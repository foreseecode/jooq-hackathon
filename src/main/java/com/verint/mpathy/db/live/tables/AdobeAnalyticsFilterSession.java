/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.AdobeAnalyticsFilterSessionRecord;

import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdobeAnalyticsFilterSession extends TableImpl<AdobeAnalyticsFilterSessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>live.adobe_analytics_filter_session</code>
     */
    public static final AdobeAnalyticsFilterSession ADOBE_ANALYTICS_FILTER_SESSION = new AdobeAnalyticsFilterSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdobeAnalyticsFilterSessionRecord> getRecordType() {
        return AdobeAnalyticsFilterSessionRecord.class;
    }

    /**
     * The column <code>live.adobe_analytics_filter_session.idfilter</code>.
     * this serves as a FK to the table "adobe_analytics_filter".
     */
    public final TableField<AdobeAnalyticsFilterSessionRecord, BigDecimal> IDFILTER = createField(DSL.name("idfilter"), SQLDataType.NUMERIC.nullable(false), this, "this serves as a FK to the table \"adobe_analytics_filter\".");

    /**
     * The column <code>live.adobe_analytics_filter_session.idvisitor</code>.
     * this serves as a FK to the table "visitor".
     */
    public final TableField<AdobeAnalyticsFilterSessionRecord, String> IDVISITOR = createField(DSL.name("idvisitor"), SQLDataType.CLOB.nullable(false), this, "this serves as a FK to the table \"visitor\".");

    /**
     * The column <code>live.adobe_analytics_filter_session.idsession</code>.
     */
    public final TableField<AdobeAnalyticsFilterSessionRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>live.adobe_analytics_filter_session.import_date</code>.
     * this is the date, the value was imported the first time.
     */
    public final TableField<AdobeAnalyticsFilterSessionRecord, LocalDate> IMPORT_DATE = createField(DSL.name("import_date"), SQLDataType.LOCALDATE.nullable(false), this, "this is the date, the value was imported the first time.");

    private AdobeAnalyticsFilterSession(Name alias, Table<AdobeAnalyticsFilterSessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdobeAnalyticsFilterSession(Name alias, Table<AdobeAnalyticsFilterSessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.adobe_analytics_filter_session</code> table
     * reference
     */
    public AdobeAnalyticsFilterSession(String alias) {
        this(DSL.name(alias), ADOBE_ANALYTICS_FILTER_SESSION);
    }

    /**
     * Create an aliased <code>live.adobe_analytics_filter_session</code> table
     * reference
     */
    public AdobeAnalyticsFilterSession(Name alias) {
        this(alias, ADOBE_ANALYTICS_FILTER_SESSION);
    }

    /**
     * Create a <code>live.adobe_analytics_filter_session</code> table reference
     */
    public AdobeAnalyticsFilterSession() {
        this(DSL.name("adobe_analytics_filter_session"), null);
    }

    public <O extends Record> AdobeAnalyticsFilterSession(Table<O> child, ForeignKey<O, AdobeAnalyticsFilterSessionRecord> key) {
        super(child, key, ADOBE_ANALYTICS_FILTER_SESSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public AdobeAnalyticsFilterSession as(String alias) {
        return new AdobeAnalyticsFilterSession(DSL.name(alias), this);
    }

    @Override
    public AdobeAnalyticsFilterSession as(Name alias) {
        return new AdobeAnalyticsFilterSession(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdobeAnalyticsFilterSession rename(String name) {
        return new AdobeAnalyticsFilterSession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdobeAnalyticsFilterSession rename(Name name) {
        return new AdobeAnalyticsFilterSession(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<BigDecimal, String, BigDecimal, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
