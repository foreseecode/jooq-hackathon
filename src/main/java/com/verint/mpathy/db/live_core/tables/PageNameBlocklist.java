/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.PageNameBlocklistRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageNameBlocklist extends TableImpl<PageNameBlocklistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.page_name_blocklist</code>
     */
    public static final PageNameBlocklist PAGE_NAME_BLOCKLIST = new PageNameBlocklist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageNameBlocklistRecord> getRecordType() {
        return PageNameBlocklistRecord.class;
    }

    /**
     * The column
     * <code>live_core.page_name_blocklist.idpage_name_blocklist</code>.
     */
    public final TableField<PageNameBlocklistRecord, Long> IDPAGE_NAME_BLOCKLIST = createField(DSL.name("idpage_name_blocklist"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.page_name_blocklist.idsite</code>.
     */
    public final TableField<PageNameBlocklistRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.page_name_blocklist.page_name</code>.
     */
    public final TableField<PageNameBlocklistRecord, String> PAGE_NAME = createField(DSL.name("page_name"), SQLDataType.CLOB, this, "");

    private PageNameBlocklist(Name alias, Table<PageNameBlocklistRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageNameBlocklist(Name alias, Table<PageNameBlocklistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"page_name_blocklist\" as  SELECT page_name_blocklist.idpage_name_blocklist,\n    page_name_blocklist.idsite,\n    page_name_blocklist.page_name\n   FROM live.page_name_blocklist;"));
    }

    /**
     * Create an aliased <code>live_core.page_name_blocklist</code> table
     * reference
     */
    public PageNameBlocklist(String alias) {
        this(DSL.name(alias), PAGE_NAME_BLOCKLIST);
    }

    /**
     * Create an aliased <code>live_core.page_name_blocklist</code> table
     * reference
     */
    public PageNameBlocklist(Name alias) {
        this(alias, PAGE_NAME_BLOCKLIST);
    }

    /**
     * Create a <code>live_core.page_name_blocklist</code> table reference
     */
    public PageNameBlocklist() {
        this(DSL.name("page_name_blocklist"), null);
    }

    public <O extends Record> PageNameBlocklist(Table<O> child, ForeignKey<O, PageNameBlocklistRecord> key) {
        super(child, key, PAGE_NAME_BLOCKLIST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public PageNameBlocklist as(String alias) {
        return new PageNameBlocklist(DSL.name(alias), this);
    }

    @Override
    public PageNameBlocklist as(Name alias) {
        return new PageNameBlocklist(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageNameBlocklist rename(String name) {
        return new PageNameBlocklist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageNameBlocklist rename(Name name) {
        return new PageNameBlocklist(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
