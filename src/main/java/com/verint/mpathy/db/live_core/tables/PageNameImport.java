/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.PageNameImportRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageNameImport extends TableImpl<PageNameImportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.page_name_import</code>
     */
    public static final PageNameImport PAGE_NAME_IMPORT = new PageNameImport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageNameImportRecord> getRecordType() {
        return PageNameImportRecord.class;
    }

    /**
     * The column <code>live_core.page_name_import.idpage_name</code>.
     */
    public final TableField<PageNameImportRecord, Long> IDPAGE_NAME = createField(DSL.name("idpage_name"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.page_name_import.idsite</code>.
     */
    public final TableField<PageNameImportRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.page_name_import.name</code>.
     */
    public final TableField<PageNameImportRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.page_name_import.description</code>.
     */
    public final TableField<PageNameImportRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private PageNameImport(Name alias, Table<PageNameImportRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageNameImport(Name alias, Table<PageNameImportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"page_name_import\" as  SELECT page_name_import.idpage_name,\n    page_name_import.idsite,\n    page_name_import.name,\n    page_name_import.description\n   FROM live.page_name_import;"));
    }

    /**
     * Create an aliased <code>live_core.page_name_import</code> table reference
     */
    public PageNameImport(String alias) {
        this(DSL.name(alias), PAGE_NAME_IMPORT);
    }

    /**
     * Create an aliased <code>live_core.page_name_import</code> table reference
     */
    public PageNameImport(Name alias) {
        this(alias, PAGE_NAME_IMPORT);
    }

    /**
     * Create a <code>live_core.page_name_import</code> table reference
     */
    public PageNameImport() {
        this(DSL.name("page_name_import"), null);
    }

    public <O extends Record> PageNameImport(Table<O> child, ForeignKey<O, PageNameImportRecord> key) {
        super(child, key, PAGE_NAME_IMPORT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public PageNameImport as(String alias) {
        return new PageNameImport(DSL.name(alias), this);
    }

    @Override
    public PageNameImport as(Name alias) {
        return new PageNameImport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageNameImport rename(String name) {
        return new PageNameImport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageNameImport rename(Name name) {
        return new PageNameImport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
