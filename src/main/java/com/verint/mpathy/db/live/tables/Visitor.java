/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.VisitorRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Visitor extends TableImpl<VisitorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.visitor</code>
     */
    public static final Visitor VISITOR = new Visitor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VisitorRecord> getRecordType() {
        return VisitorRecord.class;
    }

    /**
     * The column <code>live.visitor.idvisitor</code>.
     */
    public final TableField<VisitorRecord, BigDecimal> IDVISITOR = createField(DSL.name("idvisitor"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>live.visitor.delete_me</code>.
     */
    public final TableField<VisitorRecord, Short> DELETE_ME = createField(DSL.name("delete_me"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live.visitor.hash</code>.
     */
    public final TableField<VisitorRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.CLOB, this, "");

    private Visitor(Name alias, Table<VisitorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Visitor(Name alias, Table<VisitorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.visitor</code> table reference
     */
    public Visitor(String alias) {
        this(DSL.name(alias), VISITOR);
    }

    /**
     * Create an aliased <code>live.visitor</code> table reference
     */
    public Visitor(Name alias) {
        this(alias, VISITOR);
    }

    /**
     * Create a <code>live.visitor</code> table reference
     */
    public Visitor() {
        this(DSL.name("visitor"), null);
    }

    public <O extends Record> Visitor(Table<O> child, ForeignKey<O, VisitorRecord> key) {
        super(child, key, VISITOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Visitor as(String alias) {
        return new Visitor(DSL.name(alias), this);
    }

    @Override
    public Visitor as(Name alias) {
        return new Visitor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Visitor rename(String name) {
        return new Visitor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Visitor rename(Name name) {
        return new Visitor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<BigDecimal, Short, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
