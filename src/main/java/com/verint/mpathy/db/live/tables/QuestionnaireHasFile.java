/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.QuestionnaireHasFileRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Reference table between a questionnaire element (1) and his files (n). For
 * each file a document is referenced (content inside cassandra).
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionnaireHasFile extends TableImpl<QuestionnaireHasFileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.questionnaire_has_file</code>
     */
    public static final QuestionnaireHasFile QUESTIONNAIRE_HAS_FILE = new QuestionnaireHasFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionnaireHasFileRecord> getRecordType() {
        return QuestionnaireHasFileRecord.class;
    }

    /**
     * The column
     * <code>live.questionnaire_has_file.idquestionnaire_has_file</code>.
     * Primary key of the reference table.
     */
    public final TableField<QuestionnaireHasFileRecord, Long> IDQUESTIONNAIRE_HAS_FILE = createField(DSL.name("idquestionnaire_has_file"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Primary key of the reference table.");

    /**
     * The column <code>live.questionnaire_has_file.idsite</code>. Reference key
     * to the site table.
     */
    public final TableField<QuestionnaireHasFileRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "Reference key to the site table.");

    /**
     * The column <code>live.questionnaire_has_file.idquestionnaire</code>.
     * Reference key to the questionnaire table.
     */
    public final TableField<QuestionnaireHasFileRecord, Long> IDQUESTIONNAIRE = createField(DSL.name("idquestionnaire"), SQLDataType.BIGINT, this, "Reference key to the questionnaire table.");

    /**
     * The column
     * <code>live.questionnaire_has_file.idquestionnaire_element</code>.
     * Reference key to the questionnaire element table.
     */
    public final TableField<QuestionnaireHasFileRecord, Long> IDQUESTIONNAIRE_ELEMENT = createField(DSL.name("idquestionnaire_element"), SQLDataType.BIGINT, this, "Reference key to the questionnaire element table.");

    /**
     * The column <code>live.questionnaire_has_file.iddocument</code>. Reference
     * key to the document table.
     */
    public final TableField<QuestionnaireHasFileRecord, Long> IDDOCUMENT = createField(DSL.name("iddocument"), SQLDataType.BIGINT.nullable(false), this, "Reference key to the document table.");

    /**
     * The column <code>live.questionnaire_has_file.providerstate</code>. State
     * of the file to upload (cdn): 0 -&gt; Ignore provider state of document. |
     * 10 -&gt; Need upload | 11 -&gt; Upload successful | 20 -&gt; Delete from
     * cdn
     */
    public final TableField<QuestionnaireHasFileRecord, Short> PROVIDERSTATE = createField(DSL.name("providerstate"), SQLDataType.SMALLINT.defaultValue(DSL.field("0", SQLDataType.SMALLINT)), this, "State of the file to upload (cdn): 0 -> Ignore provider state of document. | 10 -> Need upload | 11 -> Upload successful | 20 -> Delete from cdn");

    private QuestionnaireHasFile(Name alias, Table<QuestionnaireHasFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionnaireHasFile(Name alias, Table<QuestionnaireHasFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Reference table between a questionnaire element (1) and his files (n). For each file a document is referenced (content inside cassandra)."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.questionnaire_has_file</code> table
     * reference
     */
    public QuestionnaireHasFile(String alias) {
        this(DSL.name(alias), QUESTIONNAIRE_HAS_FILE);
    }

    /**
     * Create an aliased <code>live.questionnaire_has_file</code> table
     * reference
     */
    public QuestionnaireHasFile(Name alias) {
        this(alias, QUESTIONNAIRE_HAS_FILE);
    }

    /**
     * Create a <code>live.questionnaire_has_file</code> table reference
     */
    public QuestionnaireHasFile() {
        this(DSL.name("questionnaire_has_file"), null);
    }

    public <O extends Record> QuestionnaireHasFile(Table<O> child, ForeignKey<O, QuestionnaireHasFileRecord> key) {
        super(child, key, QUESTIONNAIRE_HAS_FILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<QuestionnaireHasFileRecord, Long> getIdentity() {
        return (Identity<QuestionnaireHasFileRecord, Long>) super.getIdentity();
    }

    @Override
    public QuestionnaireHasFile as(String alias) {
        return new QuestionnaireHasFile(DSL.name(alias), this);
    }

    @Override
    public QuestionnaireHasFile as(Name alias) {
        return new QuestionnaireHasFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionnaireHasFile rename(String name) {
        return new QuestionnaireHasFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionnaireHasFile rename(Name name) {
        return new QuestionnaireHasFile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Integer, Long, Long, Long, Short> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
