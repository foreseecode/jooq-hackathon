/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.JsonValueRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JsonValue extends TableImpl<JsonValueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.json_value</code>
     */
    public static final JsonValue JSON_VALUE = new JsonValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JsonValueRecord> getRecordType() {
        return JsonValueRecord.class;
    }

    /**
     * The column <code>live_core.json_value.idjson_value</code>.
     */
    public final TableField<JsonValueRecord, Long> IDJSON_VALUE = createField(DSL.name("idjson_value"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.json_value.idjson_datatype</code>.
     */
    public final TableField<JsonValueRecord, BigDecimal> IDJSON_DATATYPE = createField(DSL.name("idjson_datatype"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.json_value.value</code>.
     */
    public final TableField<JsonValueRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    private JsonValue(Name alias, Table<JsonValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private JsonValue(Name alias, Table<JsonValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"json_value\" as  SELECT json_value.idjson_value,\n    json_value.idjson_datatype,\n    json_value.value\n   FROM live.json_value;"));
    }

    /**
     * Create an aliased <code>live_core.json_value</code> table reference
     */
    public JsonValue(String alias) {
        this(DSL.name(alias), JSON_VALUE);
    }

    /**
     * Create an aliased <code>live_core.json_value</code> table reference
     */
    public JsonValue(Name alias) {
        this(alias, JSON_VALUE);
    }

    /**
     * Create a <code>live_core.json_value</code> table reference
     */
    public JsonValue() {
        this(DSL.name("json_value"), null);
    }

    public <O extends Record> JsonValue(Table<O> child, ForeignKey<O, JsonValueRecord> key) {
        super(child, key, JSON_VALUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public JsonValue as(String alias) {
        return new JsonValue(DSL.name(alias), this);
    }

    @Override
    public JsonValue as(Name alias) {
        return new JsonValue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonValue rename(String name) {
        return new JsonValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonValue rename(Name name) {
        return new JsonValue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, BigDecimal, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
