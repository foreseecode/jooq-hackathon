/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.Tmp_0Record;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tmp_0 extends TableImpl<Tmp_0Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.tmp_0</code>
     */
    public static final Tmp_0 TMP_0 = new Tmp_0();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Tmp_0Record> getRecordType() {
        return Tmp_0Record.class;
    }

    /**
     * The column <code>live_core.tmp_0.idsession</code>.
     */
    public final TableField<Tmp_0Record, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    private Tmp_0(Name alias, Table<Tmp_0Record> aliased) {
        this(alias, aliased, null);
    }

    private Tmp_0(Name alias, Table<Tmp_0Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"tmp_0\" as  SELECT tmp_0.idsession\n   FROM live.tmp_0;"));
    }

    /**
     * Create an aliased <code>live_core.tmp_0</code> table reference
     */
    public Tmp_0(String alias) {
        this(DSL.name(alias), TMP_0);
    }

    /**
     * Create an aliased <code>live_core.tmp_0</code> table reference
     */
    public Tmp_0(Name alias) {
        this(alias, TMP_0);
    }

    /**
     * Create a <code>live_core.tmp_0</code> table reference
     */
    public Tmp_0() {
        this(DSL.name("tmp_0"), null);
    }

    public <O extends Record> Tmp_0(Table<O> child, ForeignKey<O, Tmp_0Record> key) {
        super(child, key, TMP_0);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public Tmp_0 as(String alias) {
        return new Tmp_0(DSL.name(alias), this);
    }

    @Override
    public Tmp_0 as(Name alias) {
        return new Tmp_0(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tmp_0 rename(String name) {
        return new Tmp_0(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tmp_0 rename(Name name) {
        return new Tmp_0(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<BigDecimal> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
