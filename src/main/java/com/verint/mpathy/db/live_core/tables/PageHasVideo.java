/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.PageHasVideoRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageHasVideo extends TableImpl<PageHasVideoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.page_has_video</code>
     */
    public static final PageHasVideo PAGE_HAS_VIDEO = new PageHasVideo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageHasVideoRecord> getRecordType() {
        return PageHasVideoRecord.class;
    }

    /**
     * The column <code>live_core.page_has_video.idpage_has_video</code>.
     */
    public final TableField<PageHasVideoRecord, Long> IDPAGE_HAS_VIDEO = createField(DSL.name("idpage_has_video"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.page_has_video.idsession</code>.
     */
    public final TableField<PageHasVideoRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.page_has_video.idpage</code>.
     */
    public final TableField<PageHasVideoRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.page_has_video.idmobile_device</code>.
     */
    public final TableField<PageHasVideoRecord, BigDecimal> IDMOBILE_DEVICE = createField(DSL.name("idmobile_device"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.page_has_video.idmobile_metric</code>.
     */
    public final TableField<PageHasVideoRecord, BigDecimal> IDMOBILE_METRIC = createField(DSL.name("idmobile_metric"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.page_has_video.uuid</code>.
     */
    public final TableField<PageHasVideoRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.page_has_video.start</code>.
     */
    public final TableField<PageHasVideoRecord, LocalTime> START = createField(DSL.name("start"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.page_has_video.stop</code>.
     */
    public final TableField<PageHasVideoRecord, LocalTime> STOP = createField(DSL.name("stop"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.page_has_video.encoding</code>.
     */
    public final TableField<PageHasVideoRecord, String> ENCODING = createField(DSL.name("encoding"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.page_has_video.width</code>.
     */
    public final TableField<PageHasVideoRecord, Integer> WIDTH = createField(DSL.name("width"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.page_has_video.height</code>.
     */
    public final TableField<PageHasVideoRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER, this, "");

    private PageHasVideo(Name alias, Table<PageHasVideoRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageHasVideo(Name alias, Table<PageHasVideoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"page_has_video\" as  SELECT page_has_video.idpage_has_video,\n    page_has_video.idsession,\n    page_has_video.idpage,\n    page_has_video.idmobile_device,\n    page_has_video.idmobile_metric,\n    page_has_video.uuid,\n    page_has_video.start,\n    page_has_video.stop,\n    page_has_video.encoding,\n    page_has_video.width,\n    page_has_video.height\n   FROM live.page_has_video;"));
    }

    /**
     * Create an aliased <code>live_core.page_has_video</code> table reference
     */
    public PageHasVideo(String alias) {
        this(DSL.name(alias), PAGE_HAS_VIDEO);
    }

    /**
     * Create an aliased <code>live_core.page_has_video</code> table reference
     */
    public PageHasVideo(Name alias) {
        this(alias, PAGE_HAS_VIDEO);
    }

    /**
     * Create a <code>live_core.page_has_video</code> table reference
     */
    public PageHasVideo() {
        this(DSL.name("page_has_video"), null);
    }

    public <O extends Record> PageHasVideo(Table<O> child, ForeignKey<O, PageHasVideoRecord> key) {
        super(child, key, PAGE_HAS_VIDEO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public PageHasVideo as(String alias) {
        return new PageHasVideo(DSL.name(alias), this);
    }

    @Override
    public PageHasVideo as(Name alias) {
        return new PageHasVideo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageHasVideo rename(String name) {
        return new PageHasVideo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageHasVideo rename(Name name) {
        return new PageHasVideo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, BigDecimal, BigDecimal, BigDecimal, BigDecimal, String, LocalTime, LocalTime, String, Integer, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
