/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.JsonKeyRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This table contains all available json key name of "json_value" table.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JsonKey extends TableImpl<JsonKeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.json_key</code>
     */
    public static final JsonKey JSON_KEY = new JsonKey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JsonKeyRecord> getRecordType() {
        return JsonKeyRecord.class;
    }

    /**
     * The column <code>live.json_key.idjson_key</code>.
     */
    public final TableField<JsonKeyRecord, Long> IDJSON_KEY = createField(DSL.name("idjson_key"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>live.json_key.name</code>.
     */
    public final TableField<JsonKeyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    private JsonKey(Name alias, Table<JsonKeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private JsonKey(Name alias, Table<JsonKeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table contains all available json key name of \"json_value\" table."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.json_key</code> table reference
     */
    public JsonKey(String alias) {
        this(DSL.name(alias), JSON_KEY);
    }

    /**
     * Create an aliased <code>live.json_key</code> table reference
     */
    public JsonKey(Name alias) {
        this(alias, JSON_KEY);
    }

    /**
     * Create a <code>live.json_key</code> table reference
     */
    public JsonKey() {
        this(DSL.name("json_key"), null);
    }

    public <O extends Record> JsonKey(Table<O> child, ForeignKey<O, JsonKeyRecord> key) {
        super(child, key, JSON_KEY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<JsonKeyRecord, Long> getIdentity() {
        return (Identity<JsonKeyRecord, Long>) super.getIdentity();
    }

    @Override
    public JsonKey as(String alias) {
        return new JsonKey(DSL.name(alias), this);
    }

    @Override
    public JsonKey as(Name alias) {
        return new JsonKey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonKey rename(String name) {
        return new JsonKey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonKey rename(Name name) {
        return new JsonKey(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
