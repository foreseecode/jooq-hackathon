/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.DebugClientRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DebugClient extends TableImpl<DebugClientRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.debug_client</code>
     */
    public static final DebugClient DEBUG_CLIENT = new DebugClient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DebugClientRecord> getRecordType() {
        return DebugClientRecord.class;
    }

    /**
     * The column <code>live_core.debug_client.idpage</code>.
     */
    public final TableField<DebugClientRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.debug_client.idsite</code>.
     */
    public final TableField<DebugClientRecord, Long> IDSITE = createField(DSL.name("idsite"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.debug_client.idsession</code>.
     */
    public final TableField<DebugClientRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.debug_client.message</code>.
     */
    public final TableField<DebugClientRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB, this, "");

    private DebugClient(Name alias, Table<DebugClientRecord> aliased) {
        this(alias, aliased, null);
    }

    private DebugClient(Name alias, Table<DebugClientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"debug_client\" as  SELECT debug_client.idpage,\n    debug_client.idsite,\n    debug_client.idsession,\n    debug_client.message\n   FROM live.debug_client;"));
    }

    /**
     * Create an aliased <code>live_core.debug_client</code> table reference
     */
    public DebugClient(String alias) {
        this(DSL.name(alias), DEBUG_CLIENT);
    }

    /**
     * Create an aliased <code>live_core.debug_client</code> table reference
     */
    public DebugClient(Name alias) {
        this(alias, DEBUG_CLIENT);
    }

    /**
     * Create a <code>live_core.debug_client</code> table reference
     */
    public DebugClient() {
        this(DSL.name("debug_client"), null);
    }

    public <O extends Record> DebugClient(Table<O> child, ForeignKey<O, DebugClientRecord> key) {
        super(child, key, DEBUG_CLIENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public DebugClient as(String alias) {
        return new DebugClient(DSL.name(alias), this);
    }

    @Override
    public DebugClient as(Name alias) {
        return new DebugClient(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DebugClient rename(String name) {
        return new DebugClient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DebugClient rename(Name name) {
        return new DebugClient(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<BigDecimal, Long, BigDecimal, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
