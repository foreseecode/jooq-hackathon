/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables.records;


import com.verint.mpathy.db.live_core.tables.Gesture;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GestureRecord extends TableRecordImpl<GestureRecord> implements Record4<Integer, String, Boolean, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live_core.gesture.idgesture</code>.
     */
    public void setIdgesture(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>live_core.gesture.idgesture</code>.
     */
    public Integer getIdgesture() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>live_core.gesture.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>live_core.gesture.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>live_core.gesture.active</code>.
     */
    public void setActive(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>live_core.gesture.active</code>.
     */
    public Boolean getActive() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>live_core.gesture.direction</code>.
     */
    public void setDirection(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>live_core.gesture.direction</code>.
     */
    public String getDirection() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Boolean, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Boolean, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Gesture.GESTURE.IDGESTURE;
    }

    @Override
    public Field<String> field2() {
        return Gesture.GESTURE.NAME;
    }

    @Override
    public Field<Boolean> field3() {
        return Gesture.GESTURE.ACTIVE;
    }

    @Override
    public Field<String> field4() {
        return Gesture.GESTURE.DIRECTION;
    }

    @Override
    public Integer component1() {
        return getIdgesture();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Boolean component3() {
        return getActive();
    }

    @Override
    public String component4() {
        return getDirection();
    }

    @Override
    public Integer value1() {
        return getIdgesture();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Boolean value3() {
        return getActive();
    }

    @Override
    public String value4() {
        return getDirection();
    }

    @Override
    public GestureRecord value1(Integer value) {
        setIdgesture(value);
        return this;
    }

    @Override
    public GestureRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public GestureRecord value3(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public GestureRecord value4(String value) {
        setDirection(value);
        return this;
    }

    @Override
    public GestureRecord values(Integer value1, String value2, Boolean value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GestureRecord
     */
    public GestureRecord() {
        super(Gesture.GESTURE);
    }

    /**
     * Create a detached, initialised GestureRecord
     */
    public GestureRecord(Integer idgesture, String name, Boolean active, String direction) {
        super(Gesture.GESTURE);

        setIdgesture(idgesture);
        setName(name);
        setActive(active);
        setDirection(direction);
    }
}
