/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables.records;


import com.verint.mpathy.db.live_core.tables.QuestionnaireHasExport;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionnaireHasExportRecord extends TableRecordImpl<QuestionnaireHasExportRecord> implements Record3<Long, BigDecimal, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>live_core.questionnaire_has_export.idquestionnaire</code>.
     */
    public void setIdquestionnaire(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>live_core.questionnaire_has_export.idquestionnaire</code>.
     */
    public Long getIdquestionnaire() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live_core.questionnaire_has_export.idexport</code>.
     */
    public void setIdexport(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>live_core.questionnaire_has_export.idexport</code>.
     */
    public BigDecimal getIdexport() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>live_core.questionnaire_has_export.iddocument</code>.
     */
    public void setIddocument(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>live_core.questionnaire_has_export.iddocument</code>.
     */
    public Long getIddocument() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, BigDecimal, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, BigDecimal, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return QuestionnaireHasExport.QUESTIONNAIRE_HAS_EXPORT.IDQUESTIONNAIRE;
    }

    @Override
    public Field<BigDecimal> field2() {
        return QuestionnaireHasExport.QUESTIONNAIRE_HAS_EXPORT.IDEXPORT;
    }

    @Override
    public Field<Long> field3() {
        return QuestionnaireHasExport.QUESTIONNAIRE_HAS_EXPORT.IDDOCUMENT;
    }

    @Override
    public Long component1() {
        return getIdquestionnaire();
    }

    @Override
    public BigDecimal component2() {
        return getIdexport();
    }

    @Override
    public Long component3() {
        return getIddocument();
    }

    @Override
    public Long value1() {
        return getIdquestionnaire();
    }

    @Override
    public BigDecimal value2() {
        return getIdexport();
    }

    @Override
    public Long value3() {
        return getIddocument();
    }

    @Override
    public QuestionnaireHasExportRecord value1(Long value) {
        setIdquestionnaire(value);
        return this;
    }

    @Override
    public QuestionnaireHasExportRecord value2(BigDecimal value) {
        setIdexport(value);
        return this;
    }

    @Override
    public QuestionnaireHasExportRecord value3(Long value) {
        setIddocument(value);
        return this;
    }

    @Override
    public QuestionnaireHasExportRecord values(Long value1, BigDecimal value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QuestionnaireHasExportRecord
     */
    public QuestionnaireHasExportRecord() {
        super(QuestionnaireHasExport.QUESTIONNAIRE_HAS_EXPORT);
    }

    /**
     * Create a detached, initialised QuestionnaireHasExportRecord
     */
    public QuestionnaireHasExportRecord(Long idquestionnaire, BigDecimal idexport, Long iddocument) {
        super(QuestionnaireHasExport.QUESTIONNAIRE_HAS_EXPORT);

        setIdquestionnaire(idquestionnaire);
        setIdexport(idexport);
        setIddocument(iddocument);
    }
}
