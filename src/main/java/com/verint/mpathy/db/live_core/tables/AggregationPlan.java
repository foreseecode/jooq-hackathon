/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.AggregationPlanRecord;

import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AggregationPlan extends TableImpl<AggregationPlanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.aggregation_plan</code>
     */
    public static final AggregationPlan AGGREGATION_PLAN = new AggregationPlan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AggregationPlanRecord> getRecordType() {
        return AggregationPlanRecord.class;
    }

    /**
     * The column <code>live_core.aggregation_plan.idaggregation_plan</code>.
     */
    public final TableField<AggregationPlanRecord, Long> IDAGGREGATION_PLAN = createField(DSL.name("idaggregation_plan"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.aggregation_plan.iduser</code>.
     */
    public final TableField<AggregationPlanRecord, Long> IDUSER = createField(DSL.name("iduser"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.aggregation_plan.status</code>.
     */
    public final TableField<AggregationPlanRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.aggregation_plan.date_created</code>.
     */
    public final TableField<AggregationPlanRecord, LocalTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.aggregation_plan.filter_idsite</code>.
     */
    public final TableField<AggregationPlanRecord, Integer> FILTER_IDSITE = createField(DSL.name("filter_idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.aggregation_plan.filter_imported</code>.
     */
    public final TableField<AggregationPlanRecord, Integer> FILTER_IMPORTED = createField(DSL.name("filter_imported"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.aggregation_plan.filter_mpathy_enabled</code>.
     */
    public final TableField<AggregationPlanRecord, Integer> FILTER_MPATHY_ENABLED = createField(DSL.name("filter_mpathy_enabled"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.aggregation_plan.date_start</code>.
     */
    public final TableField<AggregationPlanRecord, LocalTime> DATE_START = createField(DSL.name("date_start"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.aggregation_plan.date_end</code>.
     */
    public final TableField<AggregationPlanRecord, LocalTime> DATE_END = createField(DSL.name("date_end"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.aggregation_plan.interval_minutes</code>.
     */
    public final TableField<AggregationPlanRecord, Long> INTERVAL_MINUTES = createField(DSL.name("interval_minutes"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.aggregation_plan.duration_minutes</code>.
     */
    public final TableField<AggregationPlanRecord, Long> DURATION_MINUTES = createField(DSL.name("duration_minutes"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>live_core.aggregation_plan.flag_move_luceneindex_once</code>.
     */
    public final TableField<AggregationPlanRecord, Short> FLAG_MOVE_LUCENEINDEX_ONCE = createField(DSL.name("flag_move_luceneindex_once"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.aggregation_plan.rate</code>.
     */
    public final TableField<AggregationPlanRecord, Integer> RATE = createField(DSL.name("rate"), SQLDataType.INTEGER, this, "");

    private AggregationPlan(Name alias, Table<AggregationPlanRecord> aliased) {
        this(alias, aliased, null);
    }

    private AggregationPlan(Name alias, Table<AggregationPlanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"aggregation_plan\" as  SELECT aggregation_plan.idaggregation_plan,\n    aggregation_plan.iduser,\n    aggregation_plan.status,\n    aggregation_plan.date_created,\n    aggregation_plan.filter_idsite,\n    aggregation_plan.filter_imported,\n    aggregation_plan.filter_mpathy_enabled,\n    aggregation_plan.date_start,\n    aggregation_plan.date_end,\n    aggregation_plan.interval_minutes,\n    aggregation_plan.duration_minutes,\n    aggregation_plan.flag_move_luceneindex_once,\n    aggregation_plan.rate\n   FROM live.aggregation_plan;"));
    }

    /**
     * Create an aliased <code>live_core.aggregation_plan</code> table reference
     */
    public AggregationPlan(String alias) {
        this(DSL.name(alias), AGGREGATION_PLAN);
    }

    /**
     * Create an aliased <code>live_core.aggregation_plan</code> table reference
     */
    public AggregationPlan(Name alias) {
        this(alias, AGGREGATION_PLAN);
    }

    /**
     * Create a <code>live_core.aggregation_plan</code> table reference
     */
    public AggregationPlan() {
        this(DSL.name("aggregation_plan"), null);
    }

    public <O extends Record> AggregationPlan(Table<O> child, ForeignKey<O, AggregationPlanRecord> key) {
        super(child, key, AGGREGATION_PLAN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public AggregationPlan as(String alias) {
        return new AggregationPlan(DSL.name(alias), this);
    }

    @Override
    public AggregationPlan as(Name alias) {
        return new AggregationPlan(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AggregationPlan rename(String name) {
        return new AggregationPlan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AggregationPlan rename(Name name) {
        return new AggregationPlan(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, Short, LocalTime, Integer, Integer, Integer, LocalTime, LocalTime, Long, Long, Short, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
