/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.SessionHasResourceRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionHasResource extends TableImpl<SessionHasResourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.session_has_resource</code>
     */
    public static final SessionHasResource SESSION_HAS_RESOURCE = new SessionHasResource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionHasResourceRecord> getRecordType() {
        return SessionHasResourceRecord.class;
    }

    /**
     * The column <code>live_core.session_has_resource.idsession</code>.
     */
    public final TableField<SessionHasResourceRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.session_has_resource.hash</code>.
     */
    public final TableField<SessionHasResourceRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.CLOB, this, "");

    private SessionHasResource(Name alias, Table<SessionHasResourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private SessionHasResource(Name alias, Table<SessionHasResourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"session_has_resource\" as  SELECT session_has_resource.idsession,\n    session_has_resource.hash\n   FROM live.session_has_resource;"));
    }

    /**
     * Create an aliased <code>live_core.session_has_resource</code> table
     * reference
     */
    public SessionHasResource(String alias) {
        this(DSL.name(alias), SESSION_HAS_RESOURCE);
    }

    /**
     * Create an aliased <code>live_core.session_has_resource</code> table
     * reference
     */
    public SessionHasResource(Name alias) {
        this(alias, SESSION_HAS_RESOURCE);
    }

    /**
     * Create a <code>live_core.session_has_resource</code> table reference
     */
    public SessionHasResource() {
        this(DSL.name("session_has_resource"), null);
    }

    public <O extends Record> SessionHasResource(Table<O> child, ForeignKey<O, SessionHasResourceRecord> key) {
        super(child, key, SESSION_HAS_RESOURCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public SessionHasResource as(String alias) {
        return new SessionHasResource(DSL.name(alias), this);
    }

    @Override
    public SessionHasResource as(Name alias) {
        return new SessionHasResource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionHasResource rename(String name) {
        return new SessionHasResource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionHasResource rename(Name name) {
        return new SessionHasResource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<BigDecimal, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
