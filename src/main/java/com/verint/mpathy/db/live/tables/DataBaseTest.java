/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.DataBaseTestRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataBaseTest extends TableImpl<DataBaseTestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.data_base_test</code>
     */
    public static final DataBaseTest DATA_BASE_TEST = new DataBaseTest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataBaseTestRecord> getRecordType() {
        return DataBaseTestRecord.class;
    }

    /**
     * The column <code>live.data_base_test.id</code>.
     */
    public final TableField<DataBaseTestRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.data_base_test.test_column</code>.
     */
    public final TableField<DataBaseTestRecord, String> TEST_COLUMN = createField(DSL.name("test_column"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.data_base_test.another_test_column</code>.
     */
    public final TableField<DataBaseTestRecord, BigDecimal> ANOTHER_TEST_COLUMN = createField(DSL.name("another_test_column"), SQLDataType.NUMERIC, this, "");

    private DataBaseTest(Name alias, Table<DataBaseTestRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataBaseTest(Name alias, Table<DataBaseTestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.data_base_test</code> table reference
     */
    public DataBaseTest(String alias) {
        this(DSL.name(alias), DATA_BASE_TEST);
    }

    /**
     * Create an aliased <code>live.data_base_test</code> table reference
     */
    public DataBaseTest(Name alias) {
        this(alias, DATA_BASE_TEST);
    }

    /**
     * Create a <code>live.data_base_test</code> table reference
     */
    public DataBaseTest() {
        this(DSL.name("data_base_test"), null);
    }

    public <O extends Record> DataBaseTest(Table<O> child, ForeignKey<O, DataBaseTestRecord> key) {
        super(child, key, DATA_BASE_TEST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public DataBaseTest as(String alias) {
        return new DataBaseTest(DSL.name(alias), this);
    }

    @Override
    public DataBaseTest as(Name alias) {
        return new DataBaseTest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataBaseTest rename(String name) {
        return new DataBaseTest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataBaseTest rename(Name name) {
        return new DataBaseTest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
