/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.DocumentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table to increment the references to cassandra documents.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Document extends TableImpl<DocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.document</code>
     */
    public static final Document DOCUMENT = new Document();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentRecord> getRecordType() {
        return DocumentRecord.class;
    }

    /**
     * The column <code>live.document.iddocument</code>. Primary key of the
     * cassandra reference table.
     */
    public final TableField<DocumentRecord, Long> IDDOCUMENT = createField(DSL.name("iddocument"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Primary key of the cassandra reference table.");

    /**
     * The column <code>live.document.hash</code>. Is a content based hash to
     * identify a document.
     */
    public final TableField<DocumentRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.CLOB, this, "Is a content based hash to identify a document.");

    private Document(Name alias, Table<DocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Document(Name alias, Table<DocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table to increment the references to cassandra documents."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.document</code> table reference
     */
    public Document(String alias) {
        this(DSL.name(alias), DOCUMENT);
    }

    /**
     * Create an aliased <code>live.document</code> table reference
     */
    public Document(Name alias) {
        this(alias, DOCUMENT);
    }

    /**
     * Create a <code>live.document</code> table reference
     */
    public Document() {
        this(DSL.name("document"), null);
    }

    public <O extends Record> Document(Table<O> child, ForeignKey<O, DocumentRecord> key) {
        super(child, key, DOCUMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<DocumentRecord, Long> getIdentity() {
        return (Identity<DocumentRecord, Long>) super.getIdentity();
    }

    @Override
    public Document as(String alias) {
        return new Document(DSL.name(alias), this);
    }

    @Override
    public Document as(Name alias) {
        return new Document(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Document rename(String name) {
        return new Document(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Document rename(Name name) {
        return new Document(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
