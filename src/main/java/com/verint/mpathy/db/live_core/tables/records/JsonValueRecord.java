/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables.records;


import com.verint.mpathy.db.live_core.tables.JsonValue;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JsonValueRecord extends TableRecordImpl<JsonValueRecord> implements Record3<Long, BigDecimal, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live_core.json_value.idjson_value</code>.
     */
    public void setIdjsonValue(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>live_core.json_value.idjson_value</code>.
     */
    public Long getIdjsonValue() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live_core.json_value.idjson_datatype</code>.
     */
    public void setIdjsonDatatype(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>live_core.json_value.idjson_datatype</code>.
     */
    public BigDecimal getIdjsonDatatype() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>live_core.json_value.value</code>.
     */
    public void setValue(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>live_core.json_value.value</code>.
     */
    public String getValue() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, BigDecimal, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, BigDecimal, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return JsonValue.JSON_VALUE.IDJSON_VALUE;
    }

    @Override
    public Field<BigDecimal> field2() {
        return JsonValue.JSON_VALUE.IDJSON_DATATYPE;
    }

    @Override
    public Field<String> field3() {
        return JsonValue.JSON_VALUE.VALUE;
    }

    @Override
    public Long component1() {
        return getIdjsonValue();
    }

    @Override
    public BigDecimal component2() {
        return getIdjsonDatatype();
    }

    @Override
    public String component3() {
        return getValue();
    }

    @Override
    public Long value1() {
        return getIdjsonValue();
    }

    @Override
    public BigDecimal value2() {
        return getIdjsonDatatype();
    }

    @Override
    public String value3() {
        return getValue();
    }

    @Override
    public JsonValueRecord value1(Long value) {
        setIdjsonValue(value);
        return this;
    }

    @Override
    public JsonValueRecord value2(BigDecimal value) {
        setIdjsonDatatype(value);
        return this;
    }

    @Override
    public JsonValueRecord value3(String value) {
        setValue(value);
        return this;
    }

    @Override
    public JsonValueRecord values(Long value1, BigDecimal value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JsonValueRecord
     */
    public JsonValueRecord() {
        super(JsonValue.JSON_VALUE);
    }

    /**
     * Create a detached, initialised JsonValueRecord
     */
    public JsonValueRecord(Long idjsonValue, BigDecimal idjsonDatatype, String value) {
        super(JsonValue.JSON_VALUE);

        setIdjsonValue(idjsonValue);
        setIdjsonDatatype(idjsonDatatype);
        setValue(value);
    }
}
