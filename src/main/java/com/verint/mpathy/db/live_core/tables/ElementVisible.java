/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.ElementVisibleRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ElementVisible extends TableImpl<ElementVisibleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.element_visible</code>
     */
    public static final ElementVisible ELEMENT_VISIBLE = new ElementVisible();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElementVisibleRecord> getRecordType() {
        return ElementVisibleRecord.class;
    }

    /**
     * The column <code>live_core.element_visible.idelement</code>.
     */
    public final TableField<ElementVisibleRecord, BigDecimal> IDELEMENT = createField(DSL.name("idelement"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.element_visible.idpage</code>.
     */
    public final TableField<ElementVisibleRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.element_visible.idsite</code>.
     */
    public final TableField<ElementVisibleRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.element_visible.idsession</code>.
     */
    public final TableField<ElementVisibleRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.element_visible.idurl</code>.
     */
    public final TableField<ElementVisibleRecord, Long> IDURL = createField(DSL.name("idurl"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.element_visible.idpage_name</code>.
     */
    public final TableField<ElementVisibleRecord, Long> IDPAGE_NAME = createField(DSL.name("idpage_name"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.element_visible.length_loaded</code>.
     */
    public final TableField<ElementVisibleRecord, Long> LENGTH_LOADED = createField(DSL.name("length_loaded"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.element_visible.length_active</code>.
     */
    public final TableField<ElementVisibleRecord, Long> LENGTH_ACTIVE = createField(DSL.name("length_active"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.element_visible.length_visible</code>.
     */
    public final TableField<ElementVisibleRecord, Long> LENGTH_VISIBLE = createField(DSL.name("length_visible"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.element_visible.time_to_contact</code>.
     */
    public final TableField<ElementVisibleRecord, Long> TIME_TO_CONTACT = createField(DSL.name("time_to_contact"), SQLDataType.BIGINT, this, "");

    private ElementVisible(Name alias, Table<ElementVisibleRecord> aliased) {
        this(alias, aliased, null);
    }

    private ElementVisible(Name alias, Table<ElementVisibleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"element_visible\" as  SELECT element_visible.idelement,\n    element_visible.idpage,\n    element_visible.idsite,\n    element_visible.idsession,\n    element_visible.idurl,\n    element_visible.idpage_name,\n    element_visible.length_loaded,\n    element_visible.length_active,\n    element_visible.length_visible,\n    element_visible.time_to_contact\n   FROM live.element_visible;"));
    }

    /**
     * Create an aliased <code>live_core.element_visible</code> table reference
     */
    public ElementVisible(String alias) {
        this(DSL.name(alias), ELEMENT_VISIBLE);
    }

    /**
     * Create an aliased <code>live_core.element_visible</code> table reference
     */
    public ElementVisible(Name alias) {
        this(alias, ELEMENT_VISIBLE);
    }

    /**
     * Create a <code>live_core.element_visible</code> table reference
     */
    public ElementVisible() {
        this(DSL.name("element_visible"), null);
    }

    public <O extends Record> ElementVisible(Table<O> child, ForeignKey<O, ElementVisibleRecord> key) {
        super(child, key, ELEMENT_VISIBLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public ElementVisible as(String alias) {
        return new ElementVisible(DSL.name(alias), this);
    }

    @Override
    public ElementVisible as(Name alias) {
        return new ElementVisible(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementVisible rename(String name) {
        return new ElementVisible(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementVisible rename(Name name) {
        return new ElementVisible(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<BigDecimal, BigDecimal, Integer, BigDecimal, Long, Long, Long, Long, Long, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
