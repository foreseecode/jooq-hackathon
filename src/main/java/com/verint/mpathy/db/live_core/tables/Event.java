/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.EventRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Event extends TableImpl<EventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.event</code>
     */
    public static final Event EVENT = new Event();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventRecord> getRecordType() {
        return EventRecord.class;
    }

    /**
     * The column <code>live_core.event.idpage</code>.
     */
    public final TableField<EventRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.event.idsession</code>.
     */
    public final TableField<EventRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.event.idsite</code>.
     */
    public final TableField<EventRecord, Long> IDSITE = createField(DSL.name("idsite"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.event.event_id</code>.
     */
    public final TableField<EventRecord, Short> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.SMALLINT, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<EventRecord, Object> POINT = createField(DSL.name("point"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"path\""), this, "");

    /**
     * The column <code>live_core.event.time</code>.
     */
    public final TableField<EventRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.event.tagname</code>.
     */
    public final TableField<EventRecord, String> TAGNAME = createField(DSL.name("tagname"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.event.viewport_width</code>.
     */
    public final TableField<EventRecord, Long> VIEWPORT_WIDTH = createField(DSL.name("viewport_width"), SQLDataType.BIGINT, this, "");

    private Event(Name alias, Table<EventRecord> aliased) {
        this(alias, aliased, null);
    }

    private Event(Name alias, Table<EventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"event\" as  SELECT event.idpage,\n    event.idsession,\n    event.idsite,\n    event.event_id,\n    event.point,\n    event.\"time\",\n    event.tagname,\n    event.viewport_width\n   FROM live.event;"));
    }

    /**
     * Create an aliased <code>live_core.event</code> table reference
     */
    public Event(String alias) {
        this(DSL.name(alias), EVENT);
    }

    /**
     * Create an aliased <code>live_core.event</code> table reference
     */
    public Event(Name alias) {
        this(alias, EVENT);
    }

    /**
     * Create a <code>live_core.event</code> table reference
     */
    public Event() {
        this(DSL.name("event"), null);
    }

    public <O extends Record> Event(Table<O> child, ForeignKey<O, EventRecord> key) {
        super(child, key, EVENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public Event as(String alias) {
        return new Event(DSL.name(alias), this);
    }

    @Override
    public Event as(Name alias) {
        return new Event(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(String name) {
        return new Event(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(Name name) {
        return new Event(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<BigDecimal, BigDecimal, Long, Short, Object, Long, String, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
