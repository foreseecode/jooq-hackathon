/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.TestDv_2020_07_24Record;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestDv_2020_07_24 extends TableImpl<TestDv_2020_07_24Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.TEST_DV_2020_07_24</code>
     */
    public static final TestDv_2020_07_24 TEST_DV_2020_07_24 = new TestDv_2020_07_24();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestDv_2020_07_24Record> getRecordType() {
        return TestDv_2020_07_24Record.class;
    }

    /**
     * The column <code>live.TEST_DV_2020_07_24.id</code>.
     */
    public final TableField<TestDv_2020_07_24Record, BigDecimal> ID = createField(DSL.name("id"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.TEST_DV_2020_07_24.content</code>.
     */
    public final TableField<TestDv_2020_07_24Record, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB, this, "");

    private TestDv_2020_07_24(Name alias, Table<TestDv_2020_07_24Record> aliased) {
        this(alias, aliased, null);
    }

    private TestDv_2020_07_24(Name alias, Table<TestDv_2020_07_24Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.TEST_DV_2020_07_24</code> table reference
     */
    public TestDv_2020_07_24(String alias) {
        this(DSL.name(alias), TEST_DV_2020_07_24);
    }

    /**
     * Create an aliased <code>live.TEST_DV_2020_07_24</code> table reference
     */
    public TestDv_2020_07_24(Name alias) {
        this(alias, TEST_DV_2020_07_24);
    }

    /**
     * Create a <code>live.TEST_DV_2020_07_24</code> table reference
     */
    public TestDv_2020_07_24() {
        this(DSL.name("TEST_DV_2020_07_24"), null);
    }

    public <O extends Record> TestDv_2020_07_24(Table<O> child, ForeignKey<O, TestDv_2020_07_24Record> key) {
        super(child, key, TEST_DV_2020_07_24);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public TestDv_2020_07_24 as(String alias) {
        return new TestDv_2020_07_24(DSL.name(alias), this);
    }

    @Override
    public TestDv_2020_07_24 as(Name alias) {
        return new TestDv_2020_07_24(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestDv_2020_07_24 rename(String name) {
        return new TestDv_2020_07_24(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestDv_2020_07_24 rename(Name name) {
        return new TestDv_2020_07_24(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<BigDecimal, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
