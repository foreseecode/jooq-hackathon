/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.QuestionnaireRecord;

import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Questionnaire extends TableImpl<QuestionnaireRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.questionnaire</code>
     */
    public static final Questionnaire QUESTIONNAIRE = new Questionnaire();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionnaireRecord> getRecordType() {
        return QuestionnaireRecord.class;
    }

    /**
     * The column <code>live.questionnaire.idquestionnaire</code>.
     */
    public final TableField<QuestionnaireRecord, Long> IDQUESTIONNAIRE = createField(DSL.name("idquestionnaire"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>live.questionnaire.name</code>.
     */
    public final TableField<QuestionnaireRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.questionnaire.active</code>.
     */
    public final TableField<QuestionnaireRecord, Long> ACTIVE = createField(DSL.name("active"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.questionnaire.show_start</code>.
     */
    public final TableField<QuestionnaireRecord, LocalTime> SHOW_START = createField(DSL.name("show_start"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live.questionnaire.show_stop</code>.
     */
    public final TableField<QuestionnaireRecord, LocalTime> SHOW_STOP = createField(DSL.name("show_stop"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live.questionnaire.answered</code>.
     */
    public final TableField<QuestionnaireRecord, Long> ANSWERED = createField(DSL.name("answered"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.questionnaire.delivered</code>.
     */
    public final TableField<QuestionnaireRecord, Long> DELIVERED = createField(DSL.name("delivered"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.questionnaire.aborted</code>.
     */
    public final TableField<QuestionnaireRecord, Long> ABORTED = createField(DSL.name("aborted"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.questionnaire.idsite</code>.
     */
    public final TableField<QuestionnaireRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live.questionnaire.advanced_restrictions</code>.
     */
    public final TableField<QuestionnaireRecord, String> ADVANCED_RESTRICTIONS = createField(DSL.name("advanced_restrictions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.questionnaire.hash</code>. This hash is unique like
     * the questionnaire ident.
     */
    public final TableField<QuestionnaireRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.CLOB, this, "This hash is unique like the questionnaire ident.");

    /**
     * The column <code>live.questionnaire.created_at</code>. This is the create
     * timestamp of the questionnaire.
     */
    public final TableField<QuestionnaireRecord, LocalTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALTIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALTIME)), this, "This is the create timestamp of the questionnaire.");

    /**
     * The column <code>live.questionnaire.idquestionnaire_layout</code>.
     * Optional foreign key to selected questionnaire layout.
     */
    public final TableField<QuestionnaireRecord, Long> IDQUESTIONNAIRE_LAYOUT = createField(DSL.name("idquestionnaire_layout"), SQLDataType.BIGINT, this, "Optional foreign key to selected questionnaire layout.");

    /**
     * The column <code>live.questionnaire.status</code>.
     */
    public final TableField<QuestionnaireRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT, this, "");

    private Questionnaire(Name alias, Table<QuestionnaireRecord> aliased) {
        this(alias, aliased, null);
    }

    private Questionnaire(Name alias, Table<QuestionnaireRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.questionnaire</code> table reference
     */
    public Questionnaire(String alias) {
        this(DSL.name(alias), QUESTIONNAIRE);
    }

    /**
     * Create an aliased <code>live.questionnaire</code> table reference
     */
    public Questionnaire(Name alias) {
        this(alias, QUESTIONNAIRE);
    }

    /**
     * Create a <code>live.questionnaire</code> table reference
     */
    public Questionnaire() {
        this(DSL.name("questionnaire"), null);
    }

    public <O extends Record> Questionnaire(Table<O> child, ForeignKey<O, QuestionnaireRecord> key) {
        super(child, key, QUESTIONNAIRE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<QuestionnaireRecord, Long> getIdentity() {
        return (Identity<QuestionnaireRecord, Long>) super.getIdentity();
    }

    @Override
    public Questionnaire as(String alias) {
        return new Questionnaire(DSL.name(alias), this);
    }

    @Override
    public Questionnaire as(Name alias) {
        return new Questionnaire(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Questionnaire rename(String name) {
        return new Questionnaire(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Questionnaire rename(Name name) {
        return new Questionnaire(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, Long, LocalTime, LocalTime, Long, Long, Long, Integer, String, String, LocalTime, Long, Short> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
