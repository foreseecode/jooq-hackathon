/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables.records;


import com.verint.mpathy.db.live.tables.Document;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * Table to increment the references to cassandra documents.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentRecord extends TableRecordImpl<DocumentRecord> implements Record2<Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live.document.iddocument</code>. Primary key of the
     * cassandra reference table.
     */
    public void setIddocument(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>live.document.iddocument</code>. Primary key of the
     * cassandra reference table.
     */
    public Long getIddocument() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live.document.hash</code>. Is a content based hash to
     * identify a document.
     */
    public void setHash(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>live.document.hash</code>. Is a content based hash to
     * identify a document.
     */
    public String getHash() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Document.DOCUMENT.IDDOCUMENT;
    }

    @Override
    public Field<String> field2() {
        return Document.DOCUMENT.HASH;
    }

    @Override
    public Long component1() {
        return getIddocument();
    }

    @Override
    public String component2() {
        return getHash();
    }

    @Override
    public Long value1() {
        return getIddocument();
    }

    @Override
    public String value2() {
        return getHash();
    }

    @Override
    public DocumentRecord value1(Long value) {
        setIddocument(value);
        return this;
    }

    @Override
    public DocumentRecord value2(String value) {
        setHash(value);
        return this;
    }

    @Override
    public DocumentRecord values(Long value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DocumentRecord
     */
    public DocumentRecord() {
        super(Document.DOCUMENT);
    }

    /**
     * Create a detached, initialised DocumentRecord
     */
    public DocumentRecord(Long iddocument, String hash) {
        super(Document.DOCUMENT);

        setIddocument(iddocument);
        setHash(hash);
    }
}
