/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.LogPageHasAnswerRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * log table for page has answer merges
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogPageHasAnswer extends TableImpl<LogPageHasAnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.log_page_has_answer</code>
     */
    public static final LogPageHasAnswer LOG_PAGE_HAS_ANSWER = new LogPageHasAnswer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogPageHasAnswerRecord> getRecordType() {
        return LogPageHasAnswerRecord.class;
    }

    /**
     * The column <code>live.log_page_has_answer.idpage</code>. -&gt; page
     */
    public final TableField<LogPageHasAnswerRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "-> page");

    /**
     * The column <code>live.log_page_has_answer.idquestion</code>. -&gt;
     * idquestion
     */
    public final TableField<LogPageHasAnswerRecord, Long> IDQUESTION = createField(DSL.name("idquestion"), SQLDataType.BIGINT, this, "-> idquestion");

    /**
     * The column <code>live.log_page_has_answer.import_state</code>. 0 = not
     * imported, 1 = imported, -1 error while import, 99 = deleted
     */
    public final TableField<LogPageHasAnswerRecord, Short> IMPORT_STATE = createField(DSL.name("import_state"), SQLDataType.SMALLINT, this, "0 = not imported, 1 = imported, -1 error while import, 99 = deleted");

    /**
     * The column <code>live.log_page_has_answer.date</code>. date
     */
    public final TableField<LogPageHasAnswerRecord, LocalTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALTIME(6), this, "date");

    /**
     * The column <code>live.log_page_has_answer.import_error</code>. import
     * error message
     */
    public final TableField<LogPageHasAnswerRecord, String> IMPORT_ERROR = createField(DSL.name("import_error"), SQLDataType.CLOB, this, "import error message");

    /**
     * The column <code>live.log_page_has_answer.idresponse</code>. The response
     * id of the answer.
     */
    public final TableField<LogPageHasAnswerRecord, String> IDRESPONSE = createField(DSL.name("idresponse"), SQLDataType.CLOB, this, "The response id of the answer.");

    private LogPageHasAnswer(Name alias, Table<LogPageHasAnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogPageHasAnswer(Name alias, Table<LogPageHasAnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("log table for page has answer merges"), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.log_page_has_answer</code> table reference
     */
    public LogPageHasAnswer(String alias) {
        this(DSL.name(alias), LOG_PAGE_HAS_ANSWER);
    }

    /**
     * Create an aliased <code>live.log_page_has_answer</code> table reference
     */
    public LogPageHasAnswer(Name alias) {
        this(alias, LOG_PAGE_HAS_ANSWER);
    }

    /**
     * Create a <code>live.log_page_has_answer</code> table reference
     */
    public LogPageHasAnswer() {
        this(DSL.name("log_page_has_answer"), null);
    }

    public <O extends Record> LogPageHasAnswer(Table<O> child, ForeignKey<O, LogPageHasAnswerRecord> key) {
        super(child, key, LOG_PAGE_HAS_ANSWER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public LogPageHasAnswer as(String alias) {
        return new LogPageHasAnswer(DSL.name(alias), this);
    }

    @Override
    public LogPageHasAnswer as(Name alias) {
        return new LogPageHasAnswer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogPageHasAnswer rename(String name) {
        return new LogPageHasAnswer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogPageHasAnswer rename(Name name) {
        return new LogPageHasAnswer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<BigDecimal, Long, Short, LocalTime, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
