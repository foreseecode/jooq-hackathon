/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.SessionReimportRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionReimport extends TableImpl<SessionReimportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.session_reimport</code>
     */
    public static final SessionReimport SESSION_REIMPORT = new SessionReimport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionReimportRecord> getRecordType() {
        return SessionReimportRecord.class;
    }

    /**
     * The column <code>live_core.session_reimport.idsession</code>.
     */
    public final TableField<SessionReimportRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    private SessionReimport(Name alias, Table<SessionReimportRecord> aliased) {
        this(alias, aliased, null);
    }

    private SessionReimport(Name alias, Table<SessionReimportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"session_reimport\" as  SELECT session_reimport.idsession\n   FROM live.session_reimport;"));
    }

    /**
     * Create an aliased <code>live_core.session_reimport</code> table reference
     */
    public SessionReimport(String alias) {
        this(DSL.name(alias), SESSION_REIMPORT);
    }

    /**
     * Create an aliased <code>live_core.session_reimport</code> table reference
     */
    public SessionReimport(Name alias) {
        this(alias, SESSION_REIMPORT);
    }

    /**
     * Create a <code>live_core.session_reimport</code> table reference
     */
    public SessionReimport() {
        this(DSL.name("session_reimport"), null);
    }

    public <O extends Record> SessionReimport(Table<O> child, ForeignKey<O, SessionReimportRecord> key) {
        super(child, key, SESSION_REIMPORT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public SessionReimport as(String alias) {
        return new SessionReimport(DSL.name(alias), this);
    }

    @Override
    public SessionReimport as(Name alias) {
        return new SessionReimport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionReimport rename(String name) {
        return new SessionReimport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionReimport rename(Name name) {
        return new SessionReimport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<BigDecimal> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
