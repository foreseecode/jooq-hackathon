/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.MobileDeviceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MobileDevice extends TableImpl<MobileDeviceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.mobile_device</code>
     */
    public static final MobileDevice MOBILE_DEVICE = new MobileDevice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MobileDeviceRecord> getRecordType() {
        return MobileDeviceRecord.class;
    }

    /**
     * The column <code>live_core.mobile_device.idmobile_device</code>.
     */
    public final TableField<MobileDeviceRecord, Long> IDMOBILE_DEVICE = createField(DSL.name("idmobile_device"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.mobile_device.device_model</code>.
     */
    public final TableField<MobileDeviceRecord, String> DEVICE_MODEL = createField(DSL.name("device_model"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.mobile_device.device_family</code>.
     */
    public final TableField<MobileDeviceRecord, String> DEVICE_FAMILY = createField(DSL.name("device_family"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.mobile_device.os_name</code>.
     */
    public final TableField<MobileDeviceRecord, String> OS_NAME = createField(DSL.name("os_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.mobile_device.os_version</code>.
     */
    public final TableField<MobileDeviceRecord, String> OS_VERSION = createField(DSL.name("os_version"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.mobile_device.device_type</code>.
     */
    public final TableField<MobileDeviceRecord, String> DEVICE_TYPE = createField(DSL.name("device_type"), SQLDataType.CLOB, this, "");

    private MobileDevice(Name alias, Table<MobileDeviceRecord> aliased) {
        this(alias, aliased, null);
    }

    private MobileDevice(Name alias, Table<MobileDeviceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"mobile_device\" as  SELECT mobile_device.idmobile_device,\n    mobile_device.device_model,\n    mobile_device.device_family,\n    mobile_device.os_name,\n    mobile_device.os_version,\n    mobile_device.device_type\n   FROM live.mobile_device;"));
    }

    /**
     * Create an aliased <code>live_core.mobile_device</code> table reference
     */
    public MobileDevice(String alias) {
        this(DSL.name(alias), MOBILE_DEVICE);
    }

    /**
     * Create an aliased <code>live_core.mobile_device</code> table reference
     */
    public MobileDevice(Name alias) {
        this(alias, MOBILE_DEVICE);
    }

    /**
     * Create a <code>live_core.mobile_device</code> table reference
     */
    public MobileDevice() {
        this(DSL.name("mobile_device"), null);
    }

    public <O extends Record> MobileDevice(Table<O> child, ForeignKey<O, MobileDeviceRecord> key) {
        super(child, key, MOBILE_DEVICE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public MobileDevice as(String alias) {
        return new MobileDevice(DSL.name(alias), this);
    }

    @Override
    public MobileDevice as(Name alias) {
        return new MobileDevice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileDevice rename(String name) {
        return new MobileDevice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileDevice rename(Name name) {
        return new MobileDevice(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
