/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables.records;


import com.verint.mpathy.db.live_core.tables.DataBaseTest;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataBaseTestRecord extends TableRecordImpl<DataBaseTestRecord> implements Record3<Long, String, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live_core.data_base_test.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>live_core.data_base_test.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live_core.data_base_test.test_column</code>.
     */
    public void setTestColumn(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>live_core.data_base_test.test_column</code>.
     */
    public String getTestColumn() {
        return (String) get(1);
    }

    /**
     * Setter for <code>live_core.data_base_test.another_test_column</code>.
     */
    public void setAnotherTestColumn(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>live_core.data_base_test.another_test_column</code>.
     */
    public BigDecimal getAnotherTestColumn() {
        return (BigDecimal) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, BigDecimal> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return DataBaseTest.DATA_BASE_TEST.ID;
    }

    @Override
    public Field<String> field2() {
        return DataBaseTest.DATA_BASE_TEST.TEST_COLUMN;
    }

    @Override
    public Field<BigDecimal> field3() {
        return DataBaseTest.DATA_BASE_TEST.ANOTHER_TEST_COLUMN;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getTestColumn();
    }

    @Override
    public BigDecimal component3() {
        return getAnotherTestColumn();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getTestColumn();
    }

    @Override
    public BigDecimal value3() {
        return getAnotherTestColumn();
    }

    @Override
    public DataBaseTestRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public DataBaseTestRecord value2(String value) {
        setTestColumn(value);
        return this;
    }

    @Override
    public DataBaseTestRecord value3(BigDecimal value) {
        setAnotherTestColumn(value);
        return this;
    }

    @Override
    public DataBaseTestRecord values(Long value1, String value2, BigDecimal value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DataBaseTestRecord
     */
    public DataBaseTestRecord() {
        super(DataBaseTest.DATA_BASE_TEST);
    }

    /**
     * Create a detached, initialised DataBaseTestRecord
     */
    public DataBaseTestRecord(Long id, String testColumn, BigDecimal anotherTestColumn) {
        super(DataBaseTest.DATA_BASE_TEST);

        setId(id);
        setTestColumn(testColumn);
        setAnotherTestColumn(anotherTestColumn);
    }
}
