/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables.records;


import com.verint.mpathy.db.live_core.tables.ExceptionFilter;

import org.jooq.Field;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.TableRecordImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExceptionFilterRecord extends TableRecordImpl<ExceptionFilterRecord> implements Record8<Long, Integer, String, Double, Short, Double, Double, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live_core.exception_filter.idexception_filter</code>.
     */
    public void setIdexceptionFilter(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>live_core.exception_filter.idexception_filter</code>.
     */
    public Long getIdexceptionFilter() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live_core.exception_filter.idsite</code>.
     */
    public void setIdsite(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>live_core.exception_filter.idsite</code>.
     */
    public Integer getIdsite() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>live_core.exception_filter.regex</code>.
     */
    public void setRegex(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>live_core.exception_filter.regex</code>.
     */
    public String getRegex() {
        return (String) get(2);
    }

    /**
     * Setter for <code>live_core.exception_filter.sesspercentage</code>.
     */
    public void setSesspercentage(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>live_core.exception_filter.sesspercentage</code>.
     */
    public Double getSesspercentage() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>live_core.exception_filter.type</code>.
     */
    public void setType(Short value) {
        set(4, value);
    }

    /**
     * Getter for <code>live_core.exception_filter.type</code>.
     */
    public Short getType() {
        return (Short) get(4);
    }

    /**
     * Setter for <code>live_core.exception_filter.recprob_desktop</code>.
     */
    public void setRecprobDesktop(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>live_core.exception_filter.recprob_desktop</code>.
     */
    public Double getRecprobDesktop() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>live_core.exception_filter.recprob_phone</code>.
     */
    public void setRecprobPhone(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>live_core.exception_filter.recprob_phone</code>.
     */
    public Double getRecprobPhone() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>live_core.exception_filter.recprob_tablet</code>.
     */
    public void setRecprobTablet(Double value) {
        set(7, value);
    }

    /**
     * Getter for <code>live_core.exception_filter.recprob_tablet</code>.
     */
    public Double getRecprobTablet() {
        return (Double) get(7);
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Integer, String, Double, Short, Double, Double, Double> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Integer, String, Double, Short, Double, Double, Double> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ExceptionFilter.EXCEPTION_FILTER.IDEXCEPTION_FILTER;
    }

    @Override
    public Field<Integer> field2() {
        return ExceptionFilter.EXCEPTION_FILTER.IDSITE;
    }

    @Override
    public Field<String> field3() {
        return ExceptionFilter.EXCEPTION_FILTER.REGEX;
    }

    @Override
    public Field<Double> field4() {
        return ExceptionFilter.EXCEPTION_FILTER.SESSPERCENTAGE;
    }

    @Override
    public Field<Short> field5() {
        return ExceptionFilter.EXCEPTION_FILTER.TYPE;
    }

    @Override
    public Field<Double> field6() {
        return ExceptionFilter.EXCEPTION_FILTER.RECPROB_DESKTOP;
    }

    @Override
    public Field<Double> field7() {
        return ExceptionFilter.EXCEPTION_FILTER.RECPROB_PHONE;
    }

    @Override
    public Field<Double> field8() {
        return ExceptionFilter.EXCEPTION_FILTER.RECPROB_TABLET;
    }

    @Override
    public Long component1() {
        return getIdexceptionFilter();
    }

    @Override
    public Integer component2() {
        return getIdsite();
    }

    @Override
    public String component3() {
        return getRegex();
    }

    @Override
    public Double component4() {
        return getSesspercentage();
    }

    @Override
    public Short component5() {
        return getType();
    }

    @Override
    public Double component6() {
        return getRecprobDesktop();
    }

    @Override
    public Double component7() {
        return getRecprobPhone();
    }

    @Override
    public Double component8() {
        return getRecprobTablet();
    }

    @Override
    public Long value1() {
        return getIdexceptionFilter();
    }

    @Override
    public Integer value2() {
        return getIdsite();
    }

    @Override
    public String value3() {
        return getRegex();
    }

    @Override
    public Double value4() {
        return getSesspercentage();
    }

    @Override
    public Short value5() {
        return getType();
    }

    @Override
    public Double value6() {
        return getRecprobDesktop();
    }

    @Override
    public Double value7() {
        return getRecprobPhone();
    }

    @Override
    public Double value8() {
        return getRecprobTablet();
    }

    @Override
    public ExceptionFilterRecord value1(Long value) {
        setIdexceptionFilter(value);
        return this;
    }

    @Override
    public ExceptionFilterRecord value2(Integer value) {
        setIdsite(value);
        return this;
    }

    @Override
    public ExceptionFilterRecord value3(String value) {
        setRegex(value);
        return this;
    }

    @Override
    public ExceptionFilterRecord value4(Double value) {
        setSesspercentage(value);
        return this;
    }

    @Override
    public ExceptionFilterRecord value5(Short value) {
        setType(value);
        return this;
    }

    @Override
    public ExceptionFilterRecord value6(Double value) {
        setRecprobDesktop(value);
        return this;
    }

    @Override
    public ExceptionFilterRecord value7(Double value) {
        setRecprobPhone(value);
        return this;
    }

    @Override
    public ExceptionFilterRecord value8(Double value) {
        setRecprobTablet(value);
        return this;
    }

    @Override
    public ExceptionFilterRecord values(Long value1, Integer value2, String value3, Double value4, Short value5, Double value6, Double value7, Double value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExceptionFilterRecord
     */
    public ExceptionFilterRecord() {
        super(ExceptionFilter.EXCEPTION_FILTER);
    }

    /**
     * Create a detached, initialised ExceptionFilterRecord
     */
    public ExceptionFilterRecord(Long idexceptionFilter, Integer idsite, String regex, Double sesspercentage, Short type, Double recprobDesktop, Double recprobPhone, Double recprobTablet) {
        super(ExceptionFilter.EXCEPTION_FILTER);

        setIdexceptionFilter(idexceptionFilter);
        setIdsite(idsite);
        setRegex(regex);
        setSesspercentage(sesspercentage);
        setType(type);
        setRecprobDesktop(recprobDesktop);
        setRecprobPhone(recprobPhone);
        setRecprobTablet(recprobTablet);
    }
}
