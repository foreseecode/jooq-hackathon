/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables.records;


import com.verint.mpathy.db.live.tables.AggregationPlan;

import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AggregationPlanRecord extends TableRecordImpl<AggregationPlanRecord> implements Record13<Long, Long, Short, LocalTime, Integer, Integer, Integer, LocalTime, LocalTime, Long, Long, Short, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live.aggregation_plan.idaggregation_plan</code>. ident
     * of the aggregationplan.
     */
    public void setIdaggregationPlan(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.idaggregation_plan</code>. ident
     * of the aggregationplan.
     */
    public Long getIdaggregationPlan() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live.aggregation_plan.iduser</code>. User ident with a
     * reference to "user".
     */
    public void setIduser(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.iduser</code>. User ident with a
     * reference to "user".
     */
    public Long getIduser() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>live.aggregation_plan.status</code>. Status of the plan
     * -1:deleted, 0:inactive, 1:active.
     */
    public void setStatus(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.status</code>. Status of the plan
     * -1:deleted, 0:inactive, 1:active.
     */
    public Short getStatus() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>live.aggregation_plan.date_created</code>. Plans
     * creation date.
     */
    public void setDateCreated(LocalTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.date_created</code>. Plans
     * creation date.
     */
    public LocalTime getDateCreated() {
        return (LocalTime) get(3);
    }

    /**
     * Setter for <code>live.aggregation_plan.filter_idsite</code>. Plans idsite
     * filter, the plan is only valid for these session site ids.
     */
    public void setFilterIdsite(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.filter_idsite</code>. Plans idsite
     * filter, the plan is only valid for these session site ids.
     */
    public Integer getFilterIdsite() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>live.aggregation_plan.filter_imported</code>. Plans
     * imported state filter, the plan is only valid for these session imported
     * values.
     */
    public void setFilterImported(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.filter_imported</code>. Plans
     * imported state filter, the plan is only valid for these session imported
     * values.
     */
    public Integer getFilterImported() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>live.aggregation_plan.filter_mpathy_enabled</code>.
     * Plans mpathy_enabled filter, the plan is only valid for these session
     * mpathy_enabled values.
     */
    public void setFilterMpathyEnabled(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.filter_mpathy_enabled</code>.
     * Plans mpathy_enabled filter, the plan is only valid for these session
     * mpathy_enabled values.
     */
    public Integer getFilterMpathyEnabled() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>live.aggregation_plan.date_start</code>. Plans start
     * date - when will the plan be executed first.
     */
    public void setDateStart(LocalTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.date_start</code>. Plans start
     * date - when will the plan be executed first.
     */
    public LocalTime getDateStart() {
        return (LocalTime) get(7);
    }

    /**
     * Setter for <code>live.aggregation_plan.date_end</code>. Plans end date -
     * when will the plan be executed last.
     */
    public void setDateEnd(LocalTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.date_end</code>. Plans end date -
     * when will the plan be executed last.
     */
    public LocalTime getDateEnd() {
        return (LocalTime) get(8);
    }

    /**
     * Setter for <code>live.aggregation_plan.interval_minutes</code>. Plans
     * reexecution interval slot in minutes.
     */
    public void setIntervalMinutes(Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.interval_minutes</code>. Plans
     * reexecution interval slot in minutes.
     */
    public Long getIntervalMinutes() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>live.aggregation_plan.duration_minutes</code>. Plans
     * duration in minutes.
     */
    public void setDurationMinutes(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.duration_minutes</code>. Plans
     * duration in minutes.
     */
    public Long getDurationMinutes() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>live.aggregation_plan.flag_move_luceneindex_once</code>.
     * if set to 1 the plan decides to move lucene index(s) folder to a backup
     * location, if not existent.
     */
    public void setFlagMoveLuceneindexOnce(Short value) {
        set(11, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.flag_move_luceneindex_once</code>.
     * if set to 1 the plan decides to move lucene index(s) folder to a backup
     * location, if not existent.
     */
    public Short getFlagMoveLuceneindexOnce() {
        return (Short) get(11);
    }

    /**
     * Setter for <code>live.aggregation_plan.rate</code>. Sessions to process
     * per import run, when the plan is active.
     */
    public void setRate(Integer value) {
        set(12, value);
    }

    /**
     * Getter for <code>live.aggregation_plan.rate</code>. Sessions to process
     * per import run, when the plan is active.
     */
    public Integer getRate() {
        return (Integer) get(12);
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, Short, LocalTime, Integer, Integer, Integer, LocalTime, LocalTime, Long, Long, Short, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<Long, Long, Short, LocalTime, Integer, Integer, Integer, LocalTime, LocalTime, Long, Long, Short, Integer> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AggregationPlan.AGGREGATION_PLAN.IDAGGREGATION_PLAN;
    }

    @Override
    public Field<Long> field2() {
        return AggregationPlan.AGGREGATION_PLAN.IDUSER;
    }

    @Override
    public Field<Short> field3() {
        return AggregationPlan.AGGREGATION_PLAN.STATUS;
    }

    @Override
    public Field<LocalTime> field4() {
        return AggregationPlan.AGGREGATION_PLAN.DATE_CREATED;
    }

    @Override
    public Field<Integer> field5() {
        return AggregationPlan.AGGREGATION_PLAN.FILTER_IDSITE;
    }

    @Override
    public Field<Integer> field6() {
        return AggregationPlan.AGGREGATION_PLAN.FILTER_IMPORTED;
    }

    @Override
    public Field<Integer> field7() {
        return AggregationPlan.AGGREGATION_PLAN.FILTER_MPATHY_ENABLED;
    }

    @Override
    public Field<LocalTime> field8() {
        return AggregationPlan.AGGREGATION_PLAN.DATE_START;
    }

    @Override
    public Field<LocalTime> field9() {
        return AggregationPlan.AGGREGATION_PLAN.DATE_END;
    }

    @Override
    public Field<Long> field10() {
        return AggregationPlan.AGGREGATION_PLAN.INTERVAL_MINUTES;
    }

    @Override
    public Field<Long> field11() {
        return AggregationPlan.AGGREGATION_PLAN.DURATION_MINUTES;
    }

    @Override
    public Field<Short> field12() {
        return AggregationPlan.AGGREGATION_PLAN.FLAG_MOVE_LUCENEINDEX_ONCE;
    }

    @Override
    public Field<Integer> field13() {
        return AggregationPlan.AGGREGATION_PLAN.RATE;
    }

    @Override
    public Long component1() {
        return getIdaggregationPlan();
    }

    @Override
    public Long component2() {
        return getIduser();
    }

    @Override
    public Short component3() {
        return getStatus();
    }

    @Override
    public LocalTime component4() {
        return getDateCreated();
    }

    @Override
    public Integer component5() {
        return getFilterIdsite();
    }

    @Override
    public Integer component6() {
        return getFilterImported();
    }

    @Override
    public Integer component7() {
        return getFilterMpathyEnabled();
    }

    @Override
    public LocalTime component8() {
        return getDateStart();
    }

    @Override
    public LocalTime component9() {
        return getDateEnd();
    }

    @Override
    public Long component10() {
        return getIntervalMinutes();
    }

    @Override
    public Long component11() {
        return getDurationMinutes();
    }

    @Override
    public Short component12() {
        return getFlagMoveLuceneindexOnce();
    }

    @Override
    public Integer component13() {
        return getRate();
    }

    @Override
    public Long value1() {
        return getIdaggregationPlan();
    }

    @Override
    public Long value2() {
        return getIduser();
    }

    @Override
    public Short value3() {
        return getStatus();
    }

    @Override
    public LocalTime value4() {
        return getDateCreated();
    }

    @Override
    public Integer value5() {
        return getFilterIdsite();
    }

    @Override
    public Integer value6() {
        return getFilterImported();
    }

    @Override
    public Integer value7() {
        return getFilterMpathyEnabled();
    }

    @Override
    public LocalTime value8() {
        return getDateStart();
    }

    @Override
    public LocalTime value9() {
        return getDateEnd();
    }

    @Override
    public Long value10() {
        return getIntervalMinutes();
    }

    @Override
    public Long value11() {
        return getDurationMinutes();
    }

    @Override
    public Short value12() {
        return getFlagMoveLuceneindexOnce();
    }

    @Override
    public Integer value13() {
        return getRate();
    }

    @Override
    public AggregationPlanRecord value1(Long value) {
        setIdaggregationPlan(value);
        return this;
    }

    @Override
    public AggregationPlanRecord value2(Long value) {
        setIduser(value);
        return this;
    }

    @Override
    public AggregationPlanRecord value3(Short value) {
        setStatus(value);
        return this;
    }

    @Override
    public AggregationPlanRecord value4(LocalTime value) {
        setDateCreated(value);
        return this;
    }

    @Override
    public AggregationPlanRecord value5(Integer value) {
        setFilterIdsite(value);
        return this;
    }

    @Override
    public AggregationPlanRecord value6(Integer value) {
        setFilterImported(value);
        return this;
    }

    @Override
    public AggregationPlanRecord value7(Integer value) {
        setFilterMpathyEnabled(value);
        return this;
    }

    @Override
    public AggregationPlanRecord value8(LocalTime value) {
        setDateStart(value);
        return this;
    }

    @Override
    public AggregationPlanRecord value9(LocalTime value) {
        setDateEnd(value);
        return this;
    }

    @Override
    public AggregationPlanRecord value10(Long value) {
        setIntervalMinutes(value);
        return this;
    }

    @Override
    public AggregationPlanRecord value11(Long value) {
        setDurationMinutes(value);
        return this;
    }

    @Override
    public AggregationPlanRecord value12(Short value) {
        setFlagMoveLuceneindexOnce(value);
        return this;
    }

    @Override
    public AggregationPlanRecord value13(Integer value) {
        setRate(value);
        return this;
    }

    @Override
    public AggregationPlanRecord values(Long value1, Long value2, Short value3, LocalTime value4, Integer value5, Integer value6, Integer value7, LocalTime value8, LocalTime value9, Long value10, Long value11, Short value12, Integer value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AggregationPlanRecord
     */
    public AggregationPlanRecord() {
        super(AggregationPlan.AGGREGATION_PLAN);
    }

    /**
     * Create a detached, initialised AggregationPlanRecord
     */
    public AggregationPlanRecord(Long idaggregationPlan, Long iduser, Short status, LocalTime dateCreated, Integer filterIdsite, Integer filterImported, Integer filterMpathyEnabled, LocalTime dateStart, LocalTime dateEnd, Long intervalMinutes, Long durationMinutes, Short flagMoveLuceneindexOnce, Integer rate) {
        super(AggregationPlan.AGGREGATION_PLAN);

        setIdaggregationPlan(idaggregationPlan);
        setIduser(iduser);
        setStatus(status);
        setDateCreated(dateCreated);
        setFilterIdsite(filterIdsite);
        setFilterImported(filterImported);
        setFilterMpathyEnabled(filterMpathyEnabled);
        setDateStart(dateStart);
        setDateEnd(dateEnd);
        setIntervalMinutes(intervalMinutes);
        setDurationMinutes(durationMinutes);
        setFlagMoveLuceneindexOnce(flagMoveLuceneindexOnce);
        setRate(rate);
    }
}
