/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.HeadlessAnswerRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Collect all row data of the polls without tracking.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HeadlessAnswer extends TableImpl<HeadlessAnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.headless_answer</code>
     */
    public static final HeadlessAnswer HEADLESS_ANSWER = new HeadlessAnswer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HeadlessAnswerRecord> getRecordType() {
        return HeadlessAnswerRecord.class;
    }

    /**
     * The column <code>live.headless_answer.idpage</code>. Client site
     * generated page ident (no reference to the "page" table).
     */
    public final TableField<HeadlessAnswerRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC.nullable(false), this, "Client site generated page ident (no reference to the \"page\" table).");

    /**
     * The column <code>live.headless_answer.idvisitor</code>. Visitor ident
     * with a reference to "visitor".
     */
    public final TableField<HeadlessAnswerRecord, BigDecimal> IDVISITOR = createField(DSL.name("idvisitor"), SQLDataType.NUMERIC.nullable(false), this, "Visitor ident with a reference to \"visitor\".");

    /**
     * The column <code>live.headless_answer.idsite</code>. Site ident with a
     * reference to "site".
     */
    public final TableField<HeadlessAnswerRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "Site ident with a reference to \"site\".");

    /**
     * The column <code>live.headless_answer.timestamp</code>. Timestamp of the
     * poll request.
     */
    public final TableField<HeadlessAnswerRecord, LocalTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALTIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALTIME)), this, "Timestamp of the poll request.");

    /**
     * The column <code>live.headless_answer.length_loaded</code>. Time between
     * poll start and end.
     */
    public final TableField<HeadlessAnswerRecord, Long> LENGTH_LOADED = createField(DSL.name("length_loaded"), SQLDataType.BIGINT, this, "Time between poll start and end.");

    /**
     * The column <code>live.headless_answer.url</code>. Url of the poll
     * tracking.
     */
    public final TableField<HeadlessAnswerRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "Url of the poll tracking.");

    /**
     * The column <code>live.headless_answer.referer_url</code>. Referer url of
     * the poll tracking.
     */
    public final TableField<HeadlessAnswerRecord, String> REFERER_URL = createField(DSL.name("referer_url"), SQLDataType.CLOB, this, "Referer url of the poll tracking.");

    /**
     * The column <code>live.headless_answer.useragent</code>. Full useragent
     * string.
     */
    public final TableField<HeadlessAnswerRecord, String> USERAGENT = createField(DSL.name("useragent"), SQLDataType.CLOB, this, "Full useragent string.");

    /**
     * The column <code>live.headless_answer.user_lang</code>. The language of
     * the client browser.
     */
    public final TableField<HeadlessAnswerRecord, String> USER_LANG = createField(DSL.name("user_lang"), SQLDataType.CLOB, this, "The language of the client browser.");

    /**
     * The column <code>live.headless_answer.pagename</code>. The pagename of
     * the poll tracking.
     */
    public final TableField<HeadlessAnswerRecord, String> PAGENAME = createField(DSL.name("pagename"), SQLDataType.CLOB, this, "The pagename of the poll tracking.");

    /**
     * The column <code>live.headless_answer.script_versions</code>. Contains
     * the "loader upload date", "loader version", "engine.polls version" and
     * "polls version".
     */
    public final TableField<HeadlessAnswerRecord, String> SCRIPT_VERSIONS = createField(DSL.name("script_versions"), SQLDataType.CLOB, this, "Contains the \"loader upload date\", \"loader version\", \"engine.polls version\" and \"polls version\".");

    /**
     * The column <code>live.headless_answer.dbg_msgs</code>. Debug messages
     * from the custom code.
     */
    public final TableField<HeadlessAnswerRecord, String> DBG_MSGS = createField(DSL.name("dbg_msgs"), SQLDataType.CLOB, this, "Debug messages from the custom code.");

    /**
     * The column <code>live.headless_answer.idquestion</code>. Questionnaire
     * ident with a reference to "questionnaire".
     */
    public final TableField<HeadlessAnswerRecord, Long> IDQUESTION = createField(DSL.name("idquestion"), SQLDataType.BIGINT.nullable(false), this, "Questionnaire ident with a reference to \"questionnaire\".");

    /**
     * The column <code>live.headless_answer.idanswer</code>. Answer ident with
     * a reference to "questionnaire_answer".
     */
    public final TableField<HeadlessAnswerRecord, Long> IDANSWER = createField(DSL.name("idanswer"), SQLDataType.BIGINT, this, "Answer ident with a reference to \"questionnaire_answer\".");

    /**
     * The column <code>live.headless_answer.text</code>. The real answer from
     * the interviewee.
     */
    public final TableField<HeadlessAnswerRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "The real answer from the interviewee.");

    /**
     * The column <code>live.headless_answer.aborted</code>. If set 0, the poll
     * is finished successful.
     */
    public final TableField<HeadlessAnswerRecord, Short> ABORTED = createField(DSL.name("aborted"), SQLDataType.SMALLINT.defaultValue(DSL.field("0", SQLDataType.SMALLINT)), this, "If set 0, the poll is finished successful.");

    /**
     * The column <code>live.headless_answer.processed</code>. If set TRUE the
     * importer have processed this line successful.
     */
    public final TableField<HeadlessAnswerRecord, Boolean> PROCESSED = createField(DSL.name("processed"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "If set TRUE the importer have processed this line successful.");

    /**
     * The column <code>live.headless_answer.segments</code>. segments as
     * formatted string submitted by engine for later processing
     */
    public final TableField<HeadlessAnswerRecord, String> SEGMENTS = createField(DSL.name("segments"), SQLDataType.CLOB, this, "segments as formatted string submitted by engine for later processing");

    /**
     * The column <code>live.headless_answer.idquestionnaire</code>. Reference
     * ident to the questionnaire configuration table.
     */
    public final TableField<HeadlessAnswerRecord, Long> IDQUESTIONNAIRE = createField(DSL.name("idquestionnaire"), SQLDataType.BIGINT.nullable(false), this, "Reference ident to the questionnaire configuration table.");

    /**
     * The column <code>live.headless_answer.random_group</code>. The
     * random_group of the answer.
     */
    public final TableField<HeadlessAnswerRecord, String> RANDOM_GROUP = createField(DSL.name("random_group"), SQLDataType.CLOB, this, "The random_group of the answer.");

    /**
     * The column <code>live.headless_answer.idresponse</code>. The response id
     * of the answer.
     */
    public final TableField<HeadlessAnswerRecord, String> IDRESPONSE = createField(DSL.name("idresponse"), SQLDataType.CLOB, this, "The response id of the answer.");

    private HeadlessAnswer(Name alias, Table<HeadlessAnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private HeadlessAnswer(Name alias, Table<HeadlessAnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Collect all row data of the polls without tracking."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.headless_answer</code> table reference
     */
    public HeadlessAnswer(String alias) {
        this(DSL.name(alias), HEADLESS_ANSWER);
    }

    /**
     * Create an aliased <code>live.headless_answer</code> table reference
     */
    public HeadlessAnswer(Name alias) {
        this(alias, HEADLESS_ANSWER);
    }

    /**
     * Create a <code>live.headless_answer</code> table reference
     */
    public HeadlessAnswer() {
        this(DSL.name("headless_answer"), null);
    }

    public <O extends Record> HeadlessAnswer(Table<O> child, ForeignKey<O, HeadlessAnswerRecord> key) {
        super(child, key, HEADLESS_ANSWER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public HeadlessAnswer as(String alias) {
        return new HeadlessAnswer(DSL.name(alias), this);
    }

    @Override
    public HeadlessAnswer as(Name alias) {
        return new HeadlessAnswer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HeadlessAnswer rename(String name) {
        return new HeadlessAnswer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HeadlessAnswer rename(Name name) {
        return new HeadlessAnswer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<BigDecimal, BigDecimal, Integer, LocalTime, Long, String, String, String, String, String, String, String, Long, Long, String, Short, Boolean, String, Long, String, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
