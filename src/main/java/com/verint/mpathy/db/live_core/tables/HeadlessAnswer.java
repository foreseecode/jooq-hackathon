/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.HeadlessAnswerRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HeadlessAnswer extends TableImpl<HeadlessAnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.headless_answer</code>
     */
    public static final HeadlessAnswer HEADLESS_ANSWER = new HeadlessAnswer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HeadlessAnswerRecord> getRecordType() {
        return HeadlessAnswerRecord.class;
    }

    /**
     * The column <code>live_core.headless_answer.idpage</code>.
     */
    public final TableField<HeadlessAnswerRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.headless_answer.idvisitor</code>.
     */
    public final TableField<HeadlessAnswerRecord, BigDecimal> IDVISITOR = createField(DSL.name("idvisitor"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.headless_answer.idsite</code>.
     */
    public final TableField<HeadlessAnswerRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.headless_answer.timestamp</code>.
     */
    public final TableField<HeadlessAnswerRecord, LocalTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.headless_answer.length_loaded</code>.
     */
    public final TableField<HeadlessAnswerRecord, Long> LENGTH_LOADED = createField(DSL.name("length_loaded"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.headless_answer.url</code>.
     */
    public final TableField<HeadlessAnswerRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.headless_answer.referer_url</code>.
     */
    public final TableField<HeadlessAnswerRecord, String> REFERER_URL = createField(DSL.name("referer_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.headless_answer.useragent</code>.
     */
    public final TableField<HeadlessAnswerRecord, String> USERAGENT = createField(DSL.name("useragent"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.headless_answer.user_lang</code>.
     */
    public final TableField<HeadlessAnswerRecord, String> USER_LANG = createField(DSL.name("user_lang"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.headless_answer.pagename</code>.
     */
    public final TableField<HeadlessAnswerRecord, String> PAGENAME = createField(DSL.name("pagename"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.headless_answer.script_versions</code>.
     */
    public final TableField<HeadlessAnswerRecord, String> SCRIPT_VERSIONS = createField(DSL.name("script_versions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.headless_answer.dbg_msgs</code>.
     */
    public final TableField<HeadlessAnswerRecord, String> DBG_MSGS = createField(DSL.name("dbg_msgs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.headless_answer.idquestion</code>.
     */
    public final TableField<HeadlessAnswerRecord, Long> IDQUESTION = createField(DSL.name("idquestion"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.headless_answer.idanswer</code>.
     */
    public final TableField<HeadlessAnswerRecord, Long> IDANSWER = createField(DSL.name("idanswer"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.headless_answer.text</code>.
     */
    public final TableField<HeadlessAnswerRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.headless_answer.aborted</code>.
     */
    public final TableField<HeadlessAnswerRecord, Short> ABORTED = createField(DSL.name("aborted"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.headless_answer.processed</code>.
     */
    public final TableField<HeadlessAnswerRecord, Boolean> PROCESSED = createField(DSL.name("processed"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>live_core.headless_answer.segments</code>.
     */
    public final TableField<HeadlessAnswerRecord, String> SEGMENTS = createField(DSL.name("segments"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.headless_answer.idquestionnaire</code>.
     */
    public final TableField<HeadlessAnswerRecord, Long> IDQUESTIONNAIRE = createField(DSL.name("idquestionnaire"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.headless_answer.random_group</code>.
     */
    public final TableField<HeadlessAnswerRecord, String> RANDOM_GROUP = createField(DSL.name("random_group"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.headless_answer.idresponse</code>.
     */
    public final TableField<HeadlessAnswerRecord, String> IDRESPONSE = createField(DSL.name("idresponse"), SQLDataType.CLOB, this, "");

    private HeadlessAnswer(Name alias, Table<HeadlessAnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private HeadlessAnswer(Name alias, Table<HeadlessAnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"headless_answer\" as  SELECT headless_answer.idpage,\n    headless_answer.idvisitor,\n    headless_answer.idsite,\n    headless_answer.\"timestamp\",\n    headless_answer.length_loaded,\n    headless_answer.url,\n    headless_answer.referer_url,\n    headless_answer.useragent,\n    headless_answer.user_lang,\n    headless_answer.pagename,\n    headless_answer.script_versions,\n    headless_answer.dbg_msgs,\n    headless_answer.idquestion,\n    headless_answer.idanswer,\n    headless_answer.text,\n    headless_answer.aborted,\n    headless_answer.processed,\n    headless_answer.segments,\n    headless_answer.idquestionnaire,\n    headless_answer.random_group,\n    headless_answer.idresponse\n   FROM live.headless_answer;"));
    }

    /**
     * Create an aliased <code>live_core.headless_answer</code> table reference
     */
    public HeadlessAnswer(String alias) {
        this(DSL.name(alias), HEADLESS_ANSWER);
    }

    /**
     * Create an aliased <code>live_core.headless_answer</code> table reference
     */
    public HeadlessAnswer(Name alias) {
        this(alias, HEADLESS_ANSWER);
    }

    /**
     * Create a <code>live_core.headless_answer</code> table reference
     */
    public HeadlessAnswer() {
        this(DSL.name("headless_answer"), null);
    }

    public <O extends Record> HeadlessAnswer(Table<O> child, ForeignKey<O, HeadlessAnswerRecord> key) {
        super(child, key, HEADLESS_ANSWER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public HeadlessAnswer as(String alias) {
        return new HeadlessAnswer(DSL.name(alias), this);
    }

    @Override
    public HeadlessAnswer as(Name alias) {
        return new HeadlessAnswer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HeadlessAnswer rename(String name) {
        return new HeadlessAnswer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HeadlessAnswer rename(Name name) {
        return new HeadlessAnswer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<BigDecimal, BigDecimal, Integer, LocalTime, Long, String, String, String, String, String, String, String, Long, Long, String, Short, Boolean, String, Long, String, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
