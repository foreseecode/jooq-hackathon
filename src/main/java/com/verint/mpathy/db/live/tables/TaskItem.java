/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.TaskItemRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskItem extends TableImpl<TaskItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.task_item</code>
     */
    public static final TaskItem TASK_ITEM = new TaskItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskItemRecord> getRecordType() {
        return TaskItemRecord.class;
    }

    /**
     * The column <code>live.task_item.idtaskitem</code>.
     */
    public final TableField<TaskItemRecord, Long> IDTASKITEM = createField(DSL.name("idtaskitem"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>live.task_item.idtask</code>.
     */
    public final TableField<TaskItemRecord, Long> IDTASK = createField(DSL.name("idtask"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.task_item.name</code>.
     */
    public final TableField<TaskItemRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.task_item.sequence</code>.
     */
    public final TableField<TaskItemRecord, Long> SEQUENCE = createField(DSL.name("sequence"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.task_item.immediate_successor</code>.
     */
    public final TableField<TaskItemRecord, Short> IMMEDIATE_SUCCESSOR = createField(DSL.name("immediate_successor"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live.task_item.allow_repeat</code>.
     */
    public final TableField<TaskItemRecord, Short> ALLOW_REPEAT = createField(DSL.name("allow_repeat"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live.task_item.url</code>.
     */
    public final TableField<TaskItemRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.task_item.url_regexp</code>.
     */
    public final TableField<TaskItemRecord, String> URL_REGEXP = createField(DSL.name("url_regexp"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.task_item.pagename</code>.
     */
    public final TableField<TaskItemRecord, String> PAGENAME = createField(DSL.name("pagename"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.task_item.pagename_regexp</code>.
     */
    public final TableField<TaskItemRecord, String> PAGENAME_REGEXP = createField(DSL.name("pagename_regexp"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.task_item.event</code>.
     */
    public final TableField<TaskItemRecord, String> EVENT = createField(DSL.name("event"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.task_item.gui_schema</code>.
     */
    public final TableField<TaskItemRecord, String> GUI_SCHEMA = createField(DSL.name("gui_schema"), SQLDataType.CLOB, this, "");

    private TaskItem(Name alias, Table<TaskItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskItem(Name alias, Table<TaskItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.task_item</code> table reference
     */
    public TaskItem(String alias) {
        this(DSL.name(alias), TASK_ITEM);
    }

    /**
     * Create an aliased <code>live.task_item</code> table reference
     */
    public TaskItem(Name alias) {
        this(alias, TASK_ITEM);
    }

    /**
     * Create a <code>live.task_item</code> table reference
     */
    public TaskItem() {
        this(DSL.name("task_item"), null);
    }

    public <O extends Record> TaskItem(Table<O> child, ForeignKey<O, TaskItemRecord> key) {
        super(child, key, TASK_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<TaskItemRecord, Long> getIdentity() {
        return (Identity<TaskItemRecord, Long>) super.getIdentity();
    }

    @Override
    public TaskItem as(String alias) {
        return new TaskItem(DSL.name(alias), this);
    }

    @Override
    public TaskItem as(Name alias) {
        return new TaskItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskItem rename(String name) {
        return new TaskItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskItem rename(Name name) {
        return new TaskItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, String, Long, Short, Short, String, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
