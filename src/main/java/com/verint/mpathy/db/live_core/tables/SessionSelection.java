/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.SessionSelectionRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionSelection extends TableImpl<SessionSelectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.session_selection</code>
     */
    public static final SessionSelection SESSION_SELECTION = new SessionSelection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionSelectionRecord> getRecordType() {
        return SessionSelectionRecord.class;
    }

    /**
     * The column <code>live_core.session_selection.idsession</code>.
     */
    public final TableField<SessionSelectionRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    private SessionSelection(Name alias, Table<SessionSelectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SessionSelection(Name alias, Table<SessionSelectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"session_selection\" as  SELECT session_selection.idsession\n   FROM live.session_selection;"));
    }

    /**
     * Create an aliased <code>live_core.session_selection</code> table
     * reference
     */
    public SessionSelection(String alias) {
        this(DSL.name(alias), SESSION_SELECTION);
    }

    /**
     * Create an aliased <code>live_core.session_selection</code> table
     * reference
     */
    public SessionSelection(Name alias) {
        this(alias, SESSION_SELECTION);
    }

    /**
     * Create a <code>live_core.session_selection</code> table reference
     */
    public SessionSelection() {
        this(DSL.name("session_selection"), null);
    }

    public <O extends Record> SessionSelection(Table<O> child, ForeignKey<O, SessionSelectionRecord> key) {
        super(child, key, SESSION_SELECTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public SessionSelection as(String alias) {
        return new SessionSelection(DSL.name(alias), this);
    }

    @Override
    public SessionSelection as(Name alias) {
        return new SessionSelection(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionSelection rename(String name) {
        return new SessionSelection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionSelection rename(Name name) {
        return new SessionSelection(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<BigDecimal> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
