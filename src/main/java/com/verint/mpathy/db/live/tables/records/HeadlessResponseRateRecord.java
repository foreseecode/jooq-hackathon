/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables.records;


import com.verint.mpathy.db.live.tables.HeadlessResponseRate;

import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.TableRecordImpl;


/**
 * Collect the number of questionnaire that has been shown for a site.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HeadlessResponseRateRecord extends TableRecordImpl<HeadlessResponseRateRecord> implements Record5<Integer, Long, Long, Long, LocalTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live.headless_response_rate.idsite</code>. Site ident
     * with a reference to "site".
     */
    public void setIdsite(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>live.headless_response_rate.idsite</code>. Site ident
     * with a reference to "site".
     */
    public Integer getIdsite() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>live.headless_response_rate.idquestion</code>.
     * Questionnaire ident with a reference to "questionnaire".
     */
    public void setIdquestion(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>live.headless_response_rate.idquestion</code>.
     * Questionnaire ident with a reference to "questionnaire".
     */
    public Long getIdquestion() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>live.headless_response_rate.delivered</code>. Number of
     * questionnaire has been shown.
     */
    public void setDelivered(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>live.headless_response_rate.delivered</code>. Number of
     * questionnaire has been shown.
     */
    public Long getDelivered() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>live.headless_response_rate.answered</code>. Number of
     * questionnaire has been answered.
     */
    public void setAnswered(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>live.headless_response_rate.answered</code>. Number of
     * questionnaire has been answered.
     */
    public Long getAnswered() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>live.headless_response_rate.limit_start</code>.
     * Strarttime, which hour is the questionnaire shown.
     */
    public void setLimitStart(LocalTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>live.headless_response_rate.limit_start</code>.
     * Strarttime, which hour is the questionnaire shown.
     */
    public LocalTime getLimitStart() {
        return (LocalTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Long, Long, Long, LocalTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, Long, Long, Long, LocalTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return HeadlessResponseRate.HEADLESS_RESPONSE_RATE.IDSITE;
    }

    @Override
    public Field<Long> field2() {
        return HeadlessResponseRate.HEADLESS_RESPONSE_RATE.IDQUESTION;
    }

    @Override
    public Field<Long> field3() {
        return HeadlessResponseRate.HEADLESS_RESPONSE_RATE.DELIVERED;
    }

    @Override
    public Field<Long> field4() {
        return HeadlessResponseRate.HEADLESS_RESPONSE_RATE.ANSWERED;
    }

    @Override
    public Field<LocalTime> field5() {
        return HeadlessResponseRate.HEADLESS_RESPONSE_RATE.LIMIT_START;
    }

    @Override
    public Integer component1() {
        return getIdsite();
    }

    @Override
    public Long component2() {
        return getIdquestion();
    }

    @Override
    public Long component3() {
        return getDelivered();
    }

    @Override
    public Long component4() {
        return getAnswered();
    }

    @Override
    public LocalTime component5() {
        return getLimitStart();
    }

    @Override
    public Integer value1() {
        return getIdsite();
    }

    @Override
    public Long value2() {
        return getIdquestion();
    }

    @Override
    public Long value3() {
        return getDelivered();
    }

    @Override
    public Long value4() {
        return getAnswered();
    }

    @Override
    public LocalTime value5() {
        return getLimitStart();
    }

    @Override
    public HeadlessResponseRateRecord value1(Integer value) {
        setIdsite(value);
        return this;
    }

    @Override
    public HeadlessResponseRateRecord value2(Long value) {
        setIdquestion(value);
        return this;
    }

    @Override
    public HeadlessResponseRateRecord value3(Long value) {
        setDelivered(value);
        return this;
    }

    @Override
    public HeadlessResponseRateRecord value4(Long value) {
        setAnswered(value);
        return this;
    }

    @Override
    public HeadlessResponseRateRecord value5(LocalTime value) {
        setLimitStart(value);
        return this;
    }

    @Override
    public HeadlessResponseRateRecord values(Integer value1, Long value2, Long value3, Long value4, LocalTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HeadlessResponseRateRecord
     */
    public HeadlessResponseRateRecord() {
        super(HeadlessResponseRate.HEADLESS_RESPONSE_RATE);
    }

    /**
     * Create a detached, initialised HeadlessResponseRateRecord
     */
    public HeadlessResponseRateRecord(Integer idsite, Long idquestion, Long delivered, Long answered, LocalTime limitStart) {
        super(HeadlessResponseRate.HEADLESS_RESPONSE_RATE);

        setIdsite(idsite);
        setIdquestion(idquestion);
        setDelivered(delivered);
        setAnswered(answered);
        setLimitStart(limitStart);
    }
}
