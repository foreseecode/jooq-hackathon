/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.ResourceHasParentRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Reference table between "resource" and "resource" parent.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResourceHasParent extends TableImpl<ResourceHasParentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.resource_has_parent</code>
     */
    public static final ResourceHasParent RESOURCE_HAS_PARENT = new ResourceHasParent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResourceHasParentRecord> getRecordType() {
        return ResourceHasParentRecord.class;
    }

    /**
     * The column <code>live.resource_has_parent.idres</code>. Reference to the
     * "resource" child.
     */
    public final TableField<ResourceHasParentRecord, BigDecimal> IDRES = createField(DSL.name("idres"), SQLDataType.NUMERIC.nullable(false), this, "Reference to the \"resource\" child.");

    /**
     * The column <code>live.resource_has_parent.idparent</code>. Reference to
     * the "resource" parent.
     */
    public final TableField<ResourceHasParentRecord, BigDecimal> IDPARENT = createField(DSL.name("idparent"), SQLDataType.NUMERIC.nullable(false), this, "Reference to the \"resource\" parent.");

    private ResourceHasParent(Name alias, Table<ResourceHasParentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResourceHasParent(Name alias, Table<ResourceHasParentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Reference table between \"resource\" and \"resource\" parent."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.resource_has_parent</code> table reference
     */
    public ResourceHasParent(String alias) {
        this(DSL.name(alias), RESOURCE_HAS_PARENT);
    }

    /**
     * Create an aliased <code>live.resource_has_parent</code> table reference
     */
    public ResourceHasParent(Name alias) {
        this(alias, RESOURCE_HAS_PARENT);
    }

    /**
     * Create a <code>live.resource_has_parent</code> table reference
     */
    public ResourceHasParent() {
        this(DSL.name("resource_has_parent"), null);
    }

    public <O extends Record> ResourceHasParent(Table<O> child, ForeignKey<O, ResourceHasParentRecord> key) {
        super(child, key, RESOURCE_HAS_PARENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public ResourceHasParent as(String alias) {
        return new ResourceHasParent(DSL.name(alias), this);
    }

    @Override
    public ResourceHasParent as(Name alias) {
        return new ResourceHasParent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceHasParent rename(String name) {
        return new ResourceHasParent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceHasParent rename(Name name) {
        return new ResourceHasParent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<BigDecimal, BigDecimal> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
