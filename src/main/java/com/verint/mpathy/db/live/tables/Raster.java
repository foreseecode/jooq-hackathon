/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.RasterRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Raster extends TableImpl<RasterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.raster</code>
     */
    public static final Raster RASTER = new Raster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RasterRecord> getRecordType() {
        return RasterRecord.class;
    }

    /**
     * The column <code>live.raster.x</code>.
     */
    public final TableField<RasterRecord, Long> X = createField(DSL.name("x"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.raster.y</code>.
     */
    public final TableField<RasterRecord, Long> Y = createField(DSL.name("y"), SQLDataType.BIGINT, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<RasterRecord, Object> POLYGON = createField(DSL.name("polygon"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"path\""), this, "");

    private Raster(Name alias, Table<RasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private Raster(Name alias, Table<RasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.raster</code> table reference
     */
    public Raster(String alias) {
        this(DSL.name(alias), RASTER);
    }

    /**
     * Create an aliased <code>live.raster</code> table reference
     */
    public Raster(Name alias) {
        this(alias, RASTER);
    }

    /**
     * Create a <code>live.raster</code> table reference
     */
    public Raster() {
        this(DSL.name("raster"), null);
    }

    public <O extends Record> Raster(Table<O> child, ForeignKey<O, RasterRecord> key) {
        super(child, key, RASTER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Raster as(String alias) {
        return new Raster(DSL.name(alias), this);
    }

    @Override
    public Raster as(Name alias) {
        return new Raster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Raster rename(String name) {
        return new Raster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Raster rename(Name name) {
        return new Raster(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Object> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
