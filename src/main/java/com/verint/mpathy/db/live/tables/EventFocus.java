/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.EventFocusRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventFocus extends TableImpl<EventFocusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.event_focus</code>
     */
    public static final EventFocus EVENT_FOCUS = new EventFocus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventFocusRecord> getRecordType() {
        return EventFocusRecord.class;
    }

    /**
     * The column <code>live.event_focus.idpage</code>.
     */
    public final TableField<EventFocusRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.event_focus.idelement</code>.
     */
    public final TableField<EventFocusRecord, BigDecimal> IDELEMENT = createField(DSL.name("idelement"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.event_focus.timestamp</code>.
     */
    public final TableField<EventFocusRecord, BigDecimal> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.event_focus.idsite</code>.
     */
    public final TableField<EventFocusRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live.event_focus.idsession</code>.
     */
    public final TableField<EventFocusRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.event_focus.value</code>.
     */
    public final TableField<EventFocusRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.event_focus.uniquekey</code>.
     */
    public final TableField<EventFocusRecord, BigDecimal> UNIQUEKEY = createField(DSL.name("uniquekey"), SQLDataType.NUMERIC, this, "");

    private EventFocus(Name alias, Table<EventFocusRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventFocus(Name alias, Table<EventFocusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.event_focus</code> table reference
     */
    public EventFocus(String alias) {
        this(DSL.name(alias), EVENT_FOCUS);
    }

    /**
     * Create an aliased <code>live.event_focus</code> table reference
     */
    public EventFocus(Name alias) {
        this(alias, EVENT_FOCUS);
    }

    /**
     * Create a <code>live.event_focus</code> table reference
     */
    public EventFocus() {
        this(DSL.name("event_focus"), null);
    }

    public <O extends Record> EventFocus(Table<O> child, ForeignKey<O, EventFocusRecord> key) {
        super(child, key, EVENT_FOCUS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public EventFocus as(String alias) {
        return new EventFocus(DSL.name(alias), this);
    }

    @Override
    public EventFocus as(Name alias) {
        return new EventFocus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventFocus rename(String name) {
        return new EventFocus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventFocus rename(Name name) {
        return new EventFocus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<BigDecimal, BigDecimal, BigDecimal, Integer, BigDecimal, String, BigDecimal> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
