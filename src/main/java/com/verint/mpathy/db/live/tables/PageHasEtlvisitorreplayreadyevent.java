/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.PageHasEtlvisitorreplayreadyeventRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table contains all specific information about videos for a page.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageHasEtlvisitorreplayreadyevent extends TableImpl<PageHasEtlvisitorreplayreadyeventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>live.page_has_etlvisitorreplayreadyevent</code>
     */
    public static final PageHasEtlvisitorreplayreadyevent PAGE_HAS_ETLVISITORREPLAYREADYEVENT = new PageHasEtlvisitorreplayreadyevent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageHasEtlvisitorreplayreadyeventRecord> getRecordType() {
        return PageHasEtlvisitorreplayreadyeventRecord.class;
    }

    /**
     * The column
     * <code>live.page_has_etlvisitorreplayreadyevent.timeuuid</code>. Contains
     * the time-uuid id (version 1) to identify the EtlVisitorIsReplayReadyEvent
     * in the Cassandra database.
     */
    public final TableField<PageHasEtlvisitorreplayreadyeventRecord, String> TIMEUUID = createField(DSL.name("timeuuid"), SQLDataType.CLOB.nullable(false), this, "Contains the time-uuid id (version 1) to identify the EtlVisitorIsReplayReadyEvent in the Cassandra database.");

    /**
     * The column <code>live.page_has_etlvisitorreplayreadyevent.idpage</code>.
     * Reference, but no foreign key relation, to the "page" table. The "page"
     * table is not filled at the time of writing this and, not every entry here
     * will have an entry in the "page" table.
     */
    public final TableField<PageHasEtlvisitorreplayreadyeventRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC.nullable(false), this, "Reference, but no foreign key relation, to the \"page\" table. The \"page\" table is not filled at the time of writing this and, not every entry here will have an entry in the \"page\" table.");

    private PageHasEtlvisitorreplayreadyevent(Name alias, Table<PageHasEtlvisitorreplayreadyeventRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageHasEtlvisitorreplayreadyevent(Name alias, Table<PageHasEtlvisitorreplayreadyeventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The table contains all specific information about videos for a page."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.page_has_etlvisitorreplayreadyevent</code>
     * table reference
     */
    public PageHasEtlvisitorreplayreadyevent(String alias) {
        this(DSL.name(alias), PAGE_HAS_ETLVISITORREPLAYREADYEVENT);
    }

    /**
     * Create an aliased <code>live.page_has_etlvisitorreplayreadyevent</code>
     * table reference
     */
    public PageHasEtlvisitorreplayreadyevent(Name alias) {
        this(alias, PAGE_HAS_ETLVISITORREPLAYREADYEVENT);
    }

    /**
     * Create a <code>live.page_has_etlvisitorreplayreadyevent</code> table
     * reference
     */
    public PageHasEtlvisitorreplayreadyevent() {
        this(DSL.name("page_has_etlvisitorreplayreadyevent"), null);
    }

    public <O extends Record> PageHasEtlvisitorreplayreadyevent(Table<O> child, ForeignKey<O, PageHasEtlvisitorreplayreadyeventRecord> key) {
        super(child, key, PAGE_HAS_ETLVISITORREPLAYREADYEVENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public PageHasEtlvisitorreplayreadyevent as(String alias) {
        return new PageHasEtlvisitorreplayreadyevent(DSL.name(alias), this);
    }

    @Override
    public PageHasEtlvisitorreplayreadyevent as(Name alias) {
        return new PageHasEtlvisitorreplayreadyevent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageHasEtlvisitorreplayreadyevent rename(String name) {
        return new PageHasEtlvisitorreplayreadyevent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageHasEtlvisitorreplayreadyevent rename(Name name) {
        return new PageHasEtlvisitorreplayreadyevent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, BigDecimal> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
