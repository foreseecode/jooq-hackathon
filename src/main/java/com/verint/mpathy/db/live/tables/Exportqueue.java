/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.ExportqueueRecord;

import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Exportqueue extends TableImpl<ExportqueueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.exportqueue</code>
     */
    public static final Exportqueue EXPORTQUEUE = new Exportqueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExportqueueRecord> getRecordType() {
        return ExportqueueRecord.class;
    }

    /**
     * The column <code>live.exportqueue.idexport</code>. Key to the
     * "exportqueue" table.
     */
    public final TableField<ExportqueueRecord, Long> IDEXPORT = createField(DSL.name("idexport"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Key to the \"exportqueue\" table.");

    /**
     * The column <code>live.exportqueue.idsite</code>. -&gt; Foreign key to the
     * "site" table.
     */
    public final TableField<ExportqueueRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "-> Foreign key to the \"site\" table.");

    /**
     * The column <code>live.exportqueue.iduser</code>. -&gt; Foreign key to the
     * "user" table.
     */
    public final TableField<ExportqueueRecord, Long> IDUSER = createField(DSL.name("iduser"), SQLDataType.BIGINT.nullable(false), this, "-> Foreign key to the \"user\" table.");

    /**
     * The column <code>live.exportqueue.name_export</code>. -&gt; chosen name
     */
    public final TableField<ExportqueueRecord, String> NAME_EXPORT = createField(DSL.name("name_export"), SQLDataType.CLOB.nullable(false), this, "-> chosen name");

    /**
     * The column <code>live.exportqueue.queue_state</code>. Is the current
     * state of the export: 1 -&gt; pre-queue | 2 -&gt; queue | 3 -&gt; finished
     */
    public final TableField<ExportqueueRecord, Short> QUEUE_STATE = createField(DSL.name("queue_state"), SQLDataType.SMALLINT.nullable(false), this, "Is the current state of the export: 1 -> pre-queue | 2 -> queue | 3 -> finished");

    /**
     * The column <code>live.exportqueue.is_deleted</code>. if the export is set
     * to be deleted
     */
    public final TableField<ExportqueueRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN, this, "if the export is set to be deleted");

    /**
     * The column <code>live.exportqueue.created_at</code>. creation date
     */
    public final TableField<ExportqueueRecord, LocalTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALTIME(6), this, "creation date");

    /**
     * The column <code>live.exportqueue.finished_at</code>. finishing date
     */
    public final TableField<ExportqueueRecord, LocalTime> FINISHED_AT = createField(DSL.name("finished_at"), SQLDataType.LOCALTIME(6), this, "finishing date");

    /**
     * The column <code>live.exportqueue.last_download_at</code>. currently not
     * used
     */
    public final TableField<ExportqueueRecord, LocalTime> LAST_DOWNLOAD_AT = createField(DSL.name("last_download_at"), SQLDataType.LOCALTIME(6), this, "currently not used");

    /**
     * The column <code>live.exportqueue.expires_at</code>. date to delete
     */
    public final TableField<ExportqueueRecord, LocalTime> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.LOCALTIME(6).nullable(false), this, "date to delete");

    /**
     * The column <code>live.exportqueue.action</code>. KPI Action
     */
    public final TableField<ExportqueueRecord, String> ACTION = createField(DSL.name("action"), SQLDataType.CLOB, this, "KPI Action");

    /**
     * The column <code>live.exportqueue.details</code>.  KPIDETAILS
     */
    public final TableField<ExportqueueRecord, String> DETAILS = createField(DSL.name("details"), SQLDataType.CLOB, this, " KPIDETAILS");

    /**
     * The column <code>live.exportqueue.category</code>. KPI Category
     */
    public final TableField<ExportqueueRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB, this, "KPI Category");

    /**
     * The column <code>live.exportqueue.link</code>. path to .xlxs
     */
    public final TableField<ExportqueueRecord, String> LINK = createField(DSL.name("link"), SQLDataType.CLOB, this, "path to .xlxs");

    /**
     * The column <code>live.exportqueue.retries</code>. umber of times the
     * export got started
     */
    public final TableField<ExportqueueRecord, Short> RETRIES = createField(DSL.name("retries"), SQLDataType.SMALLINT.nullable(false), this, "umber of times the export got started");

    /**
     * The column <code>live.exportqueue.error_message</code>. ErrorMessage
     * during ExportProcess
     */
    public final TableField<ExportqueueRecord, String> ERROR_MESSAGE = createField(DSL.name("error_message"), SQLDataType.CLOB, this, "ErrorMessage during ExportProcess");

    private Exportqueue(Name alias, Table<ExportqueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private Exportqueue(Name alias, Table<ExportqueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.exportqueue</code> table reference
     */
    public Exportqueue(String alias) {
        this(DSL.name(alias), EXPORTQUEUE);
    }

    /**
     * Create an aliased <code>live.exportqueue</code> table reference
     */
    public Exportqueue(Name alias) {
        this(alias, EXPORTQUEUE);
    }

    /**
     * Create a <code>live.exportqueue</code> table reference
     */
    public Exportqueue() {
        this(DSL.name("exportqueue"), null);
    }

    public <O extends Record> Exportqueue(Table<O> child, ForeignKey<O, ExportqueueRecord> key) {
        super(child, key, EXPORTQUEUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<ExportqueueRecord, Long> getIdentity() {
        return (Identity<ExportqueueRecord, Long>) super.getIdentity();
    }

    @Override
    public Exportqueue as(String alias) {
        return new Exportqueue(DSL.name(alias), this);
    }

    @Override
    public Exportqueue as(Name alias) {
        return new Exportqueue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Exportqueue rename(String name) {
        return new Exportqueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exportqueue rename(Name name) {
        return new Exportqueue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, Integer, Long, String, Short, Boolean, LocalTime, LocalTime, LocalTime, LocalTime, String, String, String, String, Short, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
