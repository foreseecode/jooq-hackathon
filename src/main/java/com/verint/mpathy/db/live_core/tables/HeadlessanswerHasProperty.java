/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.HeadlessanswerHasPropertyRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HeadlessanswerHasProperty extends TableImpl<HeadlessanswerHasPropertyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>live_core.headlessanswer_has_property</code>
     */
    public static final HeadlessanswerHasProperty HEADLESSANSWER_HAS_PROPERTY = new HeadlessanswerHasProperty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HeadlessanswerHasPropertyRecord> getRecordType() {
        return HeadlessanswerHasPropertyRecord.class;
    }

    /**
     * The column <code>live_core.headlessanswer_has_property.group_key</code>.
     */
    public final TableField<HeadlessanswerHasPropertyRecord, BigDecimal> GROUP_KEY = createField(DSL.name("group_key"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.headlessanswer_has_property.idcp</code>.
     */
    public final TableField<HeadlessanswerHasPropertyRecord, BigDecimal> IDCP = createField(DSL.name("idcp"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.headlessanswer_has_property.idvalue</code>.
     */
    public final TableField<HeadlessanswerHasPropertyRecord, BigDecimal> IDVALUE = createField(DSL.name("idvalue"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.headlessanswer_has_property.idsite</code>.
     */
    public final TableField<HeadlessanswerHasPropertyRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.headlessanswer_has_property.idresponse</code>.
     */
    public final TableField<HeadlessanswerHasPropertyRecord, String> IDRESPONSE = createField(DSL.name("idresponse"), SQLDataType.CLOB, this, "");

    private HeadlessanswerHasProperty(Name alias, Table<HeadlessanswerHasPropertyRecord> aliased) {
        this(alias, aliased, null);
    }

    private HeadlessanswerHasProperty(Name alias, Table<HeadlessanswerHasPropertyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"headlessanswer_has_property\" as  SELECT headlessanswer_has_property.group_key,\n    headlessanswer_has_property.idcp,\n    headlessanswer_has_property.idvalue,\n    headlessanswer_has_property.idsite,\n    headlessanswer_has_property.idresponse\n   FROM live.headlessanswer_has_property;"));
    }

    /**
     * Create an aliased <code>live_core.headlessanswer_has_property</code>
     * table reference
     */
    public HeadlessanswerHasProperty(String alias) {
        this(DSL.name(alias), HEADLESSANSWER_HAS_PROPERTY);
    }

    /**
     * Create an aliased <code>live_core.headlessanswer_has_property</code>
     * table reference
     */
    public HeadlessanswerHasProperty(Name alias) {
        this(alias, HEADLESSANSWER_HAS_PROPERTY);
    }

    /**
     * Create a <code>live_core.headlessanswer_has_property</code> table
     * reference
     */
    public HeadlessanswerHasProperty() {
        this(DSL.name("headlessanswer_has_property"), null);
    }

    public <O extends Record> HeadlessanswerHasProperty(Table<O> child, ForeignKey<O, HeadlessanswerHasPropertyRecord> key) {
        super(child, key, HEADLESSANSWER_HAS_PROPERTY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public HeadlessanswerHasProperty as(String alias) {
        return new HeadlessanswerHasProperty(DSL.name(alias), this);
    }

    @Override
    public HeadlessanswerHasProperty as(Name alias) {
        return new HeadlessanswerHasProperty(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HeadlessanswerHasProperty rename(String name) {
        return new HeadlessanswerHasProperty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HeadlessanswerHasProperty rename(Name name) {
        return new HeadlessanswerHasProperty(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<BigDecimal, BigDecimal, BigDecimal, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
