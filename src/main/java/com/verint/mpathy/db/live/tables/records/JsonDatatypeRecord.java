/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables.records;


import com.verint.mpathy.db.live.tables.JsonDatatype;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This table contains all supported json datatypes for the "json_value" table.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JsonDatatypeRecord extends TableRecordImpl<JsonDatatypeRecord> implements Record2<Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live.json_datatype.idjson_datatype</code>.
     */
    public void setIdjsonDatatype(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>live.json_datatype.idjson_datatype</code>.
     */
    public Long getIdjsonDatatype() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live.json_datatype.type_class</code>.
     */
    public void setTypeClass(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>live.json_datatype.type_class</code>.
     */
    public String getTypeClass() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return JsonDatatype.JSON_DATATYPE.IDJSON_DATATYPE;
    }

    @Override
    public Field<String> field2() {
        return JsonDatatype.JSON_DATATYPE.TYPE_CLASS;
    }

    @Override
    public Long component1() {
        return getIdjsonDatatype();
    }

    @Override
    public String component2() {
        return getTypeClass();
    }

    @Override
    public Long value1() {
        return getIdjsonDatatype();
    }

    @Override
    public String value2() {
        return getTypeClass();
    }

    @Override
    public JsonDatatypeRecord value1(Long value) {
        setIdjsonDatatype(value);
        return this;
    }

    @Override
    public JsonDatatypeRecord value2(String value) {
        setTypeClass(value);
        return this;
    }

    @Override
    public JsonDatatypeRecord values(Long value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JsonDatatypeRecord
     */
    public JsonDatatypeRecord() {
        super(JsonDatatype.JSON_DATATYPE);
    }

    /**
     * Create a detached, initialised JsonDatatypeRecord
     */
    public JsonDatatypeRecord(Long idjsonDatatype, String typeClass) {
        super(JsonDatatype.JSON_DATATYPE);

        setIdjsonDatatype(idjsonDatatype);
        setTypeClass(typeClass);
    }
}
