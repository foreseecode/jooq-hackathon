/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.PageHasVideoRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table contains all specific information about videos for a page.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageHasVideo extends TableImpl<PageHasVideoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.page_has_video</code>
     */
    public static final PageHasVideo PAGE_HAS_VIDEO = new PageHasVideo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageHasVideoRecord> getRecordType() {
        return PageHasVideoRecord.class;
    }

    /**
     * The column <code>live.page_has_video.idpage_has_video</code>. Primary
     * key.
     */
    public final TableField<PageHasVideoRecord, Long> IDPAGE_HAS_VIDEO = createField(DSL.name("idpage_has_video"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>live.page_has_video.idsession</code>. Foreign key to the
     * "session" table.
     */
    public final TableField<PageHasVideoRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC.nullable(false), this, "Foreign key to the \"session\" table.");

    /**
     * The column <code>live.page_has_video.idpage</code>. Foreign key to the
     * "page" table.
     */
    public final TableField<PageHasVideoRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC.nullable(false), this, "Foreign key to the \"page\" table.");

    /**
     * The column <code>live.page_has_video.idmobile_device</code>. Foreign key
     * to the "mobile_device" table.
     */
    public final TableField<PageHasVideoRecord, BigDecimal> IDMOBILE_DEVICE = createField(DSL.name("idmobile_device"), SQLDataType.NUMERIC, this, "Foreign key to the \"mobile_device\" table.");

    /**
     * The column <code>live.page_has_video.idmobile_metric</code>. Foreign key
     * to the "mobile_metric" table.
     */
    public final TableField<PageHasVideoRecord, BigDecimal> IDMOBILE_METRIC = createField(DSL.name("idmobile_metric"), SQLDataType.NUMERIC, this, "Foreign key to the \"mobile_metric\" table.");

    /**
     * The column <code>live.page_has_video.uuid</code>. Contains the uuid id
     * (version 1) to identify the video.
     */
    public final TableField<PageHasVideoRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.CLOB.nullable(false), this, "Contains the uuid id (version 1) to identify the video.");

    /**
     * The column <code>live.page_has_video.start</code>. The column contains
     * the start timestemp of the video.
     */
    public final TableField<PageHasVideoRecord, LocalTime> START = createField(DSL.name("start"), SQLDataType.LOCALTIME(6).nullable(false), this, "The column contains the start timestemp of the video.");

    /**
     * The column <code>live.page_has_video.stop</code>. The column contains the
     * end timestemp of the video.
     */
    public final TableField<PageHasVideoRecord, LocalTime> STOP = createField(DSL.name("stop"), SQLDataType.LOCALTIME(6).nullable(false), this, "The column contains the end timestemp of the video.");

    /**
     * The column <code>live.page_has_video.encoding</code>. The column contains
     * the video encoding mime type.
     */
    public final TableField<PageHasVideoRecord, String> ENCODING = createField(DSL.name("encoding"), SQLDataType.CLOB, this, "The column contains the video encoding mime type.");

    /**
     * The column <code>live.page_has_video.width</code>. The column contains
     * the width of the video dimension.
     */
    public final TableField<PageHasVideoRecord, Integer> WIDTH = createField(DSL.name("width"), SQLDataType.INTEGER, this, "The column contains the width of the video dimension.");

    /**
     * The column <code>live.page_has_video.height</code>. The column contains
     * the height of the video dimension.
     */
    public final TableField<PageHasVideoRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER, this, "The column contains the height of the video dimension.");

    private PageHasVideo(Name alias, Table<PageHasVideoRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageHasVideo(Name alias, Table<PageHasVideoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The table contains all specific information about videos for a page."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.page_has_video</code> table reference
     */
    public PageHasVideo(String alias) {
        this(DSL.name(alias), PAGE_HAS_VIDEO);
    }

    /**
     * Create an aliased <code>live.page_has_video</code> table reference
     */
    public PageHasVideo(Name alias) {
        this(alias, PAGE_HAS_VIDEO);
    }

    /**
     * Create a <code>live.page_has_video</code> table reference
     */
    public PageHasVideo() {
        this(DSL.name("page_has_video"), null);
    }

    public <O extends Record> PageHasVideo(Table<O> child, ForeignKey<O, PageHasVideoRecord> key) {
        super(child, key, PAGE_HAS_VIDEO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<PageHasVideoRecord, Long> getIdentity() {
        return (Identity<PageHasVideoRecord, Long>) super.getIdentity();
    }

    @Override
    public PageHasVideo as(String alias) {
        return new PageHasVideo(DSL.name(alias), this);
    }

    @Override
    public PageHasVideo as(Name alias) {
        return new PageHasVideo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageHasVideo rename(String name) {
        return new PageHasVideo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageHasVideo rename(Name name) {
        return new PageHasVideo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, BigDecimal, BigDecimal, BigDecimal, BigDecimal, String, LocalTime, LocalTime, String, Integer, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
