/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.LogSessionStateRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogSessionState extends TableImpl<LogSessionStateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.log_session_state</code>
     */
    public static final LogSessionState LOG_SESSION_STATE = new LogSessionState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogSessionStateRecord> getRecordType() {
        return LogSessionStateRecord.class;
    }

    /**
     * The column <code>live_core.log_session_state.idlogsessionstate</code>.
     */
    public final TableField<LogSessionStateRecord, Long> IDLOGSESSIONSTATE = createField(DSL.name("idlogsessionstate"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.log_session_state.idvisitor</code>.
     */
    public final TableField<LogSessionStateRecord, BigDecimal> IDVISITOR = createField(DSL.name("idvisitor"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.log_session_state.idsession</code>.
     */
    public final TableField<LogSessionStateRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.log_session_state.idsite</code>.
     */
    public final TableField<LogSessionStateRecord, BigDecimal> IDSITE = createField(DSL.name("idsite"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.log_session_state.idpage_concat</code>.
     */
    public final TableField<LogSessionStateRecord, String> IDPAGE_CONCAT = createField(DSL.name("idpage_concat"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.log_session_state.idrespondent_concat</code>.
     */
    public final TableField<LogSessionStateRecord, String> IDRESPONDENT_CONCAT = createField(DSL.name("idrespondent_concat"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.log_session_state.uuid_concat</code>.
     */
    public final TableField<LogSessionStateRecord, String> UUID_CONCAT = createField(DSL.name("uuid_concat"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.log_session_state.date</code>.
     */
    public final TableField<LogSessionStateRecord, LocalTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.log_session_state.service</code>.
     */
    public final TableField<LogSessionStateRecord, String> SERVICE = createField(DSL.name("service"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.log_session_state.info</code>.
     */
    public final TableField<LogSessionStateRecord, String> INFO = createField(DSL.name("info"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.log_session_state.state</code>.
     */
    public final TableField<LogSessionStateRecord, Short> STATE = createField(DSL.name("state"), SQLDataType.SMALLINT, this, "");

    private LogSessionState(Name alias, Table<LogSessionStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogSessionState(Name alias, Table<LogSessionStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"log_session_state\" as  SELECT log_session_state.idlogsessionstate,\n    log_session_state.idvisitor,\n    log_session_state.idsession,\n    log_session_state.idsite,\n    log_session_state.idpage_concat,\n    log_session_state.idrespondent_concat,\n    log_session_state.uuid_concat,\n    log_session_state.date,\n    log_session_state.service,\n    log_session_state.info,\n    log_session_state.state\n   FROM live.log_session_state;"));
    }

    /**
     * Create an aliased <code>live_core.log_session_state</code> table
     * reference
     */
    public LogSessionState(String alias) {
        this(DSL.name(alias), LOG_SESSION_STATE);
    }

    /**
     * Create an aliased <code>live_core.log_session_state</code> table
     * reference
     */
    public LogSessionState(Name alias) {
        this(alias, LOG_SESSION_STATE);
    }

    /**
     * Create a <code>live_core.log_session_state</code> table reference
     */
    public LogSessionState() {
        this(DSL.name("log_session_state"), null);
    }

    public <O extends Record> LogSessionState(Table<O> child, ForeignKey<O, LogSessionStateRecord> key) {
        super(child, key, LOG_SESSION_STATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public LogSessionState as(String alias) {
        return new LogSessionState(DSL.name(alias), this);
    }

    @Override
    public LogSessionState as(Name alias) {
        return new LogSessionState(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogSessionState rename(String name) {
        return new LogSessionState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogSessionState rename(Name name) {
        return new LogSessionState(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, BigDecimal, BigDecimal, BigDecimal, String, String, String, LocalTime, String, String, Short> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
