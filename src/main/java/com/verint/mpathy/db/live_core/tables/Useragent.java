/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.UseragentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Useragent extends TableImpl<UseragentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.useragent</code>
     */
    public static final Useragent USERAGENT = new Useragent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UseragentRecord> getRecordType() {
        return UseragentRecord.class;
    }

    /**
     * The column <code>live_core.useragent.iduseragent</code>.
     */
    public final TableField<UseragentRecord, Long> IDUSERAGENT = createField(DSL.name("iduseragent"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.useragent.product</code>.
     */
    public final TableField<UseragentRecord, String> PRODUCT = createField(DSL.name("product"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.useragent.version</code>.
     */
    public final TableField<UseragentRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.useragent.os</code>.
     */
    public final TableField<UseragentRecord, String> OS = createField(DSL.name("os"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.useragent.ua_string</code>.
     */
    public final TableField<UseragentRecord, String> UA_STRING = createField(DSL.name("ua_string"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.useragent.type</code>.
     */
    public final TableField<UseragentRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    private Useragent(Name alias, Table<UseragentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Useragent(Name alias, Table<UseragentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"useragent\" as  SELECT useragent.iduseragent,\n    useragent.product,\n    useragent.version,\n    useragent.os,\n    useragent.ua_string,\n    useragent.type\n   FROM live.useragent;"));
    }

    /**
     * Create an aliased <code>live_core.useragent</code> table reference
     */
    public Useragent(String alias) {
        this(DSL.name(alias), USERAGENT);
    }

    /**
     * Create an aliased <code>live_core.useragent</code> table reference
     */
    public Useragent(Name alias) {
        this(alias, USERAGENT);
    }

    /**
     * Create a <code>live_core.useragent</code> table reference
     */
    public Useragent() {
        this(DSL.name("useragent"), null);
    }

    public <O extends Record> Useragent(Table<O> child, ForeignKey<O, UseragentRecord> key) {
        super(child, key, USERAGENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public Useragent as(String alias) {
        return new Useragent(DSL.name(alias), this);
    }

    @Override
    public Useragent as(Name alias) {
        return new Useragent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Useragent rename(String name) {
        return new Useragent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Useragent rename(Name name) {
        return new Useragent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
