/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables.records;


import com.verint.mpathy.db.live.tables.PageFilter;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageFilterRecord extends TableRecordImpl<PageFilterRecord> implements Record4<Long, Integer, String, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live.page_filter.idpage_filter</code>.
     */
    public void setIdpageFilter(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>live.page_filter.idpage_filter</code>.
     */
    public Long getIdpageFilter() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live.page_filter.idsite</code>.
     */
    public void setIdsite(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>live.page_filter.idsite</code>.
     */
    public Integer getIdsite() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>live.page_filter.regex</code>.
     */
    public void setRegex(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>live.page_filter.regex</code>.
     */
    public String getRegex() {
        return (String) get(2);
    }

    /**
     * Setter for <code>live.page_filter.type</code>.
     */
    public void setType(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>live.page_filter.type</code>.
     */
    public Short getType() {
        return (Short) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, String, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Integer, String, Short> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return PageFilter.PAGE_FILTER.IDPAGE_FILTER;
    }

    @Override
    public Field<Integer> field2() {
        return PageFilter.PAGE_FILTER.IDSITE;
    }

    @Override
    public Field<String> field3() {
        return PageFilter.PAGE_FILTER.REGEX;
    }

    @Override
    public Field<Short> field4() {
        return PageFilter.PAGE_FILTER.TYPE;
    }

    @Override
    public Long component1() {
        return getIdpageFilter();
    }

    @Override
    public Integer component2() {
        return getIdsite();
    }

    @Override
    public String component3() {
        return getRegex();
    }

    @Override
    public Short component4() {
        return getType();
    }

    @Override
    public Long value1() {
        return getIdpageFilter();
    }

    @Override
    public Integer value2() {
        return getIdsite();
    }

    @Override
    public String value3() {
        return getRegex();
    }

    @Override
    public Short value4() {
        return getType();
    }

    @Override
    public PageFilterRecord value1(Long value) {
        setIdpageFilter(value);
        return this;
    }

    @Override
    public PageFilterRecord value2(Integer value) {
        setIdsite(value);
        return this;
    }

    @Override
    public PageFilterRecord value3(String value) {
        setRegex(value);
        return this;
    }

    @Override
    public PageFilterRecord value4(Short value) {
        setType(value);
        return this;
    }

    @Override
    public PageFilterRecord values(Long value1, Integer value2, String value3, Short value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PageFilterRecord
     */
    public PageFilterRecord() {
        super(PageFilter.PAGE_FILTER);
    }

    /**
     * Create a detached, initialised PageFilterRecord
     */
    public PageFilterRecord(Long idpageFilter, Integer idsite, String regex, Short type) {
        super(PageFilter.PAGE_FILTER);

        setIdpageFilter(idpageFilter);
        setIdsite(idsite);
        setRegex(regex);
        setType(type);
    }
}
