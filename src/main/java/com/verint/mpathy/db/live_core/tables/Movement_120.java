/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.Movement_120Record;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Movement_120 extends TableImpl<Movement_120Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.movement_120</code>
     */
    public static final Movement_120 MOVEMENT_120 = new Movement_120();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Movement_120Record> getRecordType() {
        return Movement_120Record.class;
    }

    /**
     * The column <code>live_core.movement_120.idsite</code>.
     */
    public final TableField<Movement_120Record, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.movement_120.idpage</code>.
     */
    public final TableField<Movement_120Record, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.movement_120.move</code>.
     */
    public final TableField<Movement_120Record, String> MOVE = createField(DSL.name("move"), SQLDataType.CLOB, this, "");

    private Movement_120(Name alias, Table<Movement_120Record> aliased) {
        this(alias, aliased, null);
    }

    private Movement_120(Name alias, Table<Movement_120Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"movement_120\" as  SELECT movement_120.idsite,\n    movement_120.idpage,\n    movement_120.move\n   FROM live.movement_120;"));
    }

    /**
     * Create an aliased <code>live_core.movement_120</code> table reference
     */
    public Movement_120(String alias) {
        this(DSL.name(alias), MOVEMENT_120);
    }

    /**
     * Create an aliased <code>live_core.movement_120</code> table reference
     */
    public Movement_120(Name alias) {
        this(alias, MOVEMENT_120);
    }

    /**
     * Create a <code>live_core.movement_120</code> table reference
     */
    public Movement_120() {
        this(DSL.name("movement_120"), null);
    }

    public <O extends Record> Movement_120(Table<O> child, ForeignKey<O, Movement_120Record> key) {
        super(child, key, MOVEMENT_120);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public Movement_120 as(String alias) {
        return new Movement_120(DSL.name(alias), this);
    }

    @Override
    public Movement_120 as(Name alias) {
        return new Movement_120(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Movement_120 rename(String name) {
        return new Movement_120(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Movement_120 rename(Name name) {
        return new Movement_120(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, BigDecimal, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
