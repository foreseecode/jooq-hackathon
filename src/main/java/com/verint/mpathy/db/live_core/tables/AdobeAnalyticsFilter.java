/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.AdobeAnalyticsFilterRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdobeAnalyticsFilter extends TableImpl<AdobeAnalyticsFilterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.adobe_analytics_filter</code>
     */
    public static final AdobeAnalyticsFilter ADOBE_ANALYTICS_FILTER = new AdobeAnalyticsFilter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdobeAnalyticsFilterRecord> getRecordType() {
        return AdobeAnalyticsFilterRecord.class;
    }

    /**
     * The column <code>live_core.adobe_analytics_filter.idfilter</code>.
     */
    public final TableField<AdobeAnalyticsFilterRecord, Long> IDFILTER = createField(DSL.name("idfilter"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.adobe_analytics_filter.idsuite</code>.
     */
    public final TableField<AdobeAnalyticsFilterRecord, BigDecimal> IDSUITE = createField(DSL.name("idsuite"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.adobe_analytics_filter.segment</code>.
     */
    public final TableField<AdobeAnalyticsFilterRecord, String> SEGMENT = createField(DSL.name("segment"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.adobe_analytics_filter.segment_name</code>.
     */
    public final TableField<AdobeAnalyticsFilterRecord, String> SEGMENT_NAME = createField(DSL.name("segment_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.adobe_analytics_filter.name</code>.
     */
    public final TableField<AdobeAnalyticsFilterRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.adobe_analytics_filter.filter_enabled</code>.
     */
    public final TableField<AdobeAnalyticsFilterRecord, Boolean> FILTER_ENABLED = createField(DSL.name("filter_enabled"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>live_core.adobe_analytics_filter.import_enabled</code>.
     */
    public final TableField<AdobeAnalyticsFilterRecord, Boolean> IMPORT_ENABLED = createField(DSL.name("import_enabled"), SQLDataType.BOOLEAN, this, "");

    private AdobeAnalyticsFilter(Name alias, Table<AdobeAnalyticsFilterRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdobeAnalyticsFilter(Name alias, Table<AdobeAnalyticsFilterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"adobe_analytics_filter\" as  SELECT adobe_analytics_filter.idfilter,\n    adobe_analytics_filter.idsuite,\n    adobe_analytics_filter.segment,\n    adobe_analytics_filter.segment_name,\n    adobe_analytics_filter.name,\n    adobe_analytics_filter.filter_enabled,\n    adobe_analytics_filter.import_enabled\n   FROM live.adobe_analytics_filter;"));
    }

    /**
     * Create an aliased <code>live_core.adobe_analytics_filter</code> table
     * reference
     */
    public AdobeAnalyticsFilter(String alias) {
        this(DSL.name(alias), ADOBE_ANALYTICS_FILTER);
    }

    /**
     * Create an aliased <code>live_core.adobe_analytics_filter</code> table
     * reference
     */
    public AdobeAnalyticsFilter(Name alias) {
        this(alias, ADOBE_ANALYTICS_FILTER);
    }

    /**
     * Create a <code>live_core.adobe_analytics_filter</code> table reference
     */
    public AdobeAnalyticsFilter() {
        this(DSL.name("adobe_analytics_filter"), null);
    }

    public <O extends Record> AdobeAnalyticsFilter(Table<O> child, ForeignKey<O, AdobeAnalyticsFilterRecord> key) {
        super(child, key, ADOBE_ANALYTICS_FILTER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public AdobeAnalyticsFilter as(String alias) {
        return new AdobeAnalyticsFilter(DSL.name(alias), this);
    }

    @Override
    public AdobeAnalyticsFilter as(Name alias) {
        return new AdobeAnalyticsFilter(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdobeAnalyticsFilter rename(String name) {
        return new AdobeAnalyticsFilter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdobeAnalyticsFilter rename(Name name) {
        return new AdobeAnalyticsFilter(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, BigDecimal, String, String, String, Boolean, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
