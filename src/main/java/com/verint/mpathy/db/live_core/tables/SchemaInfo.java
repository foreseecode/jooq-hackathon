/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.SchemaInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaInfo extends TableImpl<SchemaInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.schema_info</code>
     */
    public static final SchemaInfo SCHEMA_INFO = new SchemaInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchemaInfoRecord> getRecordType() {
        return SchemaInfoRecord.class;
    }

    /**
     * The column <code>live_core.schema_info.idschema_info</code>.
     */
    public final TableField<SchemaInfoRecord, Long> IDSCHEMA_INFO = createField(DSL.name("idschema_info"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.schema_info.name</code>.
     */
    public final TableField<SchemaInfoRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.schema_info.value</code>.
     */
    public final TableField<SchemaInfoRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.schema_info.comment</code>.
     */
    public final TableField<SchemaInfoRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB, this, "");

    private SchemaInfo(Name alias, Table<SchemaInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchemaInfo(Name alias, Table<SchemaInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"schema_info\" as  SELECT schema_info.idschema_info,\n    schema_info.name,\n    schema_info.value,\n    schema_info.comment\n   FROM live.schema_info;"));
    }

    /**
     * Create an aliased <code>live_core.schema_info</code> table reference
     */
    public SchemaInfo(String alias) {
        this(DSL.name(alias), SCHEMA_INFO);
    }

    /**
     * Create an aliased <code>live_core.schema_info</code> table reference
     */
    public SchemaInfo(Name alias) {
        this(alias, SCHEMA_INFO);
    }

    /**
     * Create a <code>live_core.schema_info</code> table reference
     */
    public SchemaInfo() {
        this(DSL.name("schema_info"), null);
    }

    public <O extends Record> SchemaInfo(Table<O> child, ForeignKey<O, SchemaInfoRecord> key) {
        super(child, key, SCHEMA_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public SchemaInfo as(String alias) {
        return new SchemaInfo(DSL.name(alias), this);
    }

    @Override
    public SchemaInfo as(Name alias) {
        return new SchemaInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaInfo rename(String name) {
        return new SchemaInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaInfo rename(Name name) {
        return new SchemaInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
