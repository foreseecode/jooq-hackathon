/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.QuestionnaireRecord;

import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Questionnaire extends TableImpl<QuestionnaireRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.questionnaire</code>
     */
    public static final Questionnaire QUESTIONNAIRE = new Questionnaire();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionnaireRecord> getRecordType() {
        return QuestionnaireRecord.class;
    }

    /**
     * The column <code>live_core.questionnaire.idquestionnaire</code>.
     */
    public final TableField<QuestionnaireRecord, Long> IDQUESTIONNAIRE = createField(DSL.name("idquestionnaire"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.questionnaire.name</code>.
     */
    public final TableField<QuestionnaireRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.questionnaire.active</code>.
     */
    public final TableField<QuestionnaireRecord, Long> ACTIVE = createField(DSL.name("active"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.questionnaire.show_start</code>.
     */
    public final TableField<QuestionnaireRecord, LocalTime> SHOW_START = createField(DSL.name("show_start"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.questionnaire.show_stop</code>.
     */
    public final TableField<QuestionnaireRecord, LocalTime> SHOW_STOP = createField(DSL.name("show_stop"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.questionnaire.answered</code>.
     */
    public final TableField<QuestionnaireRecord, Long> ANSWERED = createField(DSL.name("answered"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.questionnaire.delivered</code>.
     */
    public final TableField<QuestionnaireRecord, Long> DELIVERED = createField(DSL.name("delivered"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.questionnaire.aborted</code>.
     */
    public final TableField<QuestionnaireRecord, Long> ABORTED = createField(DSL.name("aborted"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.questionnaire.idsite</code>.
     */
    public final TableField<QuestionnaireRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.questionnaire.advanced_restrictions</code>.
     */
    public final TableField<QuestionnaireRecord, String> ADVANCED_RESTRICTIONS = createField(DSL.name("advanced_restrictions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.questionnaire.hash</code>.
     */
    public final TableField<QuestionnaireRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.questionnaire.created_at</code>.
     */
    public final TableField<QuestionnaireRecord, LocalTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.questionnaire.idquestionnaire_layout</code>.
     */
    public final TableField<QuestionnaireRecord, Long> IDQUESTIONNAIRE_LAYOUT = createField(DSL.name("idquestionnaire_layout"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.questionnaire.status</code>.
     */
    public final TableField<QuestionnaireRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT, this, "");

    private Questionnaire(Name alias, Table<QuestionnaireRecord> aliased) {
        this(alias, aliased, null);
    }

    private Questionnaire(Name alias, Table<QuestionnaireRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"questionnaire\" as  SELECT questionnaire.idquestionnaire,\n    questionnaire.name,\n    questionnaire.active,\n    questionnaire.show_start,\n    questionnaire.show_stop,\n    questionnaire.answered,\n    questionnaire.delivered,\n    questionnaire.aborted,\n    questionnaire.idsite,\n    questionnaire.advanced_restrictions,\n    questionnaire.hash,\n    questionnaire.created_at,\n    questionnaire.idquestionnaire_layout,\n    questionnaire.status\n   FROM live.questionnaire;"));
    }

    /**
     * Create an aliased <code>live_core.questionnaire</code> table reference
     */
    public Questionnaire(String alias) {
        this(DSL.name(alias), QUESTIONNAIRE);
    }

    /**
     * Create an aliased <code>live_core.questionnaire</code> table reference
     */
    public Questionnaire(Name alias) {
        this(alias, QUESTIONNAIRE);
    }

    /**
     * Create a <code>live_core.questionnaire</code> table reference
     */
    public Questionnaire() {
        this(DSL.name("questionnaire"), null);
    }

    public <O extends Record> Questionnaire(Table<O> child, ForeignKey<O, QuestionnaireRecord> key) {
        super(child, key, QUESTIONNAIRE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public Questionnaire as(String alias) {
        return new Questionnaire(DSL.name(alias), this);
    }

    @Override
    public Questionnaire as(Name alias) {
        return new Questionnaire(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Questionnaire rename(String name) {
        return new Questionnaire(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Questionnaire rename(Name name) {
        return new Questionnaire(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, Long, LocalTime, LocalTime, Long, Long, Long, Integer, String, String, LocalTime, Long, Short> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
