/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.PageHasResourceRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Reference table between "page" and "resource". Contains information for
 * resource usage
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageHasResource extends TableImpl<PageHasResourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.page_has_resource</code>
     */
    public static final PageHasResource PAGE_HAS_RESOURCE = new PageHasResource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageHasResourceRecord> getRecordType() {
        return PageHasResourceRecord.class;
    }

    /**
     * The column <code>live.page_has_resource.idpage</code>. Foreign key to the
     * "page" table.
     */
    public final TableField<PageHasResourceRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC.nullable(false), this, "Foreign key to the \"page\" table.");

    /**
     * The column <code>live.page_has_resource.idres</code>. Foreign key to the
     * "resource" table.
     */
    public final TableField<PageHasResourceRecord, BigDecimal> IDRES = createField(DSL.name("idres"), SQLDataType.NUMERIC.nullable(false), this, "Foreign key to the \"resource\" table.");

    private PageHasResource(Name alias, Table<PageHasResourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageHasResource(Name alias, Table<PageHasResourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Reference table between \"page\" and \"resource\". Contains information for resource usage"), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.page_has_resource</code> table reference
     */
    public PageHasResource(String alias) {
        this(DSL.name(alias), PAGE_HAS_RESOURCE);
    }

    /**
     * Create an aliased <code>live.page_has_resource</code> table reference
     */
    public PageHasResource(Name alias) {
        this(alias, PAGE_HAS_RESOURCE);
    }

    /**
     * Create a <code>live.page_has_resource</code> table reference
     */
    public PageHasResource() {
        this(DSL.name("page_has_resource"), null);
    }

    public <O extends Record> PageHasResource(Table<O> child, ForeignKey<O, PageHasResourceRecord> key) {
        super(child, key, PAGE_HAS_RESOURCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public PageHasResource as(String alias) {
        return new PageHasResource(DSL.name(alias), this);
    }

    @Override
    public PageHasResource as(Name alias) {
        return new PageHasResource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageHasResource rename(String name) {
        return new PageHasResource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageHasResource rename(Name name) {
        return new PageHasResource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<BigDecimal, BigDecimal> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
