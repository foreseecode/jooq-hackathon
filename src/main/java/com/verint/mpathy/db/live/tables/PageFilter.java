/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.PageFilterRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageFilter extends TableImpl<PageFilterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.page_filter</code>
     */
    public static final PageFilter PAGE_FILTER = new PageFilter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageFilterRecord> getRecordType() {
        return PageFilterRecord.class;
    }

    /**
     * The column <code>live.page_filter.idpage_filter</code>.
     */
    public final TableField<PageFilterRecord, Long> IDPAGE_FILTER = createField(DSL.name("idpage_filter"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>live.page_filter.idsite</code>.
     */
    public final TableField<PageFilterRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live.page_filter.regex</code>.
     */
    public final TableField<PageFilterRecord, String> REGEX = createField(DSL.name("regex"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.page_filter.type</code>.
     */
    public final TableField<PageFilterRecord, Short> TYPE = createField(DSL.name("type"), SQLDataType.SMALLINT, this, "");

    private PageFilter(Name alias, Table<PageFilterRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageFilter(Name alias, Table<PageFilterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.page_filter</code> table reference
     */
    public PageFilter(String alias) {
        this(DSL.name(alias), PAGE_FILTER);
    }

    /**
     * Create an aliased <code>live.page_filter</code> table reference
     */
    public PageFilter(Name alias) {
        this(alias, PAGE_FILTER);
    }

    /**
     * Create a <code>live.page_filter</code> table reference
     */
    public PageFilter() {
        this(DSL.name("page_filter"), null);
    }

    public <O extends Record> PageFilter(Table<O> child, ForeignKey<O, PageFilterRecord> key) {
        super(child, key, PAGE_FILTER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<PageFilterRecord, Long> getIdentity() {
        return (Identity<PageFilterRecord, Long>) super.getIdentity();
    }

    @Override
    public PageFilter as(String alias) {
        return new PageFilter(DSL.name(alias), this);
    }

    @Override
    public PageFilter as(Name alias) {
        return new PageFilter(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageFilter rename(String name) {
        return new PageFilter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageFilter rename(Name name) {
        return new PageFilter(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, String, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
