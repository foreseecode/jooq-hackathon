/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.UserHasSafRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserHasSaf extends TableImpl<UserHasSafRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.user_has_saf</code>
     */
    public static final UserHasSaf USER_HAS_SAF = new UserHasSaf();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserHasSafRecord> getRecordType() {
        return UserHasSafRecord.class;
    }

    /**
     * The column <code>live_core.user_has_saf.iduser</code>.
     */
    public final TableField<UserHasSafRecord, Long> IDUSER = createField(DSL.name("iduser"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.user_has_saf.idfile</code>.
     */
    public final TableField<UserHasSafRecord, Long> IDFILE = createField(DSL.name("idfile"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.user_has_saf.permission</code>.
     */
    public final TableField<UserHasSafRecord, Short> PERMISSION = createField(DSL.name("permission"), SQLDataType.SMALLINT, this, "");

    private UserHasSaf(Name alias, Table<UserHasSafRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserHasSaf(Name alias, Table<UserHasSafRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"user_has_saf\" as  SELECT user_has_saf.iduser,\n    user_has_saf.idfile,\n    user_has_saf.permission\n   FROM live.user_has_saf;"));
    }

    /**
     * Create an aliased <code>live_core.user_has_saf</code> table reference
     */
    public UserHasSaf(String alias) {
        this(DSL.name(alias), USER_HAS_SAF);
    }

    /**
     * Create an aliased <code>live_core.user_has_saf</code> table reference
     */
    public UserHasSaf(Name alias) {
        this(alias, USER_HAS_SAF);
    }

    /**
     * Create a <code>live_core.user_has_saf</code> table reference
     */
    public UserHasSaf() {
        this(DSL.name("user_has_saf"), null);
    }

    public <O extends Record> UserHasSaf(Table<O> child, ForeignKey<O, UserHasSafRecord> key) {
        super(child, key, USER_HAS_SAF);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public UserHasSaf as(String alias) {
        return new UserHasSaf(DSL.name(alias), this);
    }

    @Override
    public UserHasSaf as(Name alias) {
        return new UserHasSaf(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserHasSaf rename(String name) {
        return new UserHasSaf(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserHasSaf rename(Name name) {
        return new UserHasSaf(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Short> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
