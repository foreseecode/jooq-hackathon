/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.RatioRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ratio extends TableImpl<RatioRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.ratio</code>
     */
    public static final Ratio RATIO = new Ratio();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RatioRecord> getRecordType() {
        return RatioRecord.class;
    }

    /**
     * The column <code>live.ratio.idratio</code>.
     */
    public final TableField<RatioRecord, Long> IDRATIO = createField(DSL.name("idratio"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>live.ratio.idsite</code>.
     */
    public final TableField<RatioRecord, Long> IDSITE = createField(DSL.name("idsite"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.ratio.name</code>.
     */
    public final TableField<RatioRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.ratio.query</code>.
     */
    public final TableField<RatioRecord, String> QUERY = createField(DSL.name("query"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.ratio.ratio_class</code>.
     */
    public final TableField<RatioRecord, Long> RATIO_CLASS = createField(DSL.name("ratio_class"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.ratio.thresholds</code>.
     */
    public final TableField<RatioRecord, String> THRESHOLDS = createField(DSL.name("thresholds"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.ratio.idratio_type</code>.
     */
    public final TableField<RatioRecord, Long> IDRATIO_TYPE = createField(DSL.name("idratio_type"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.ratio.json_string</code>.
     */
    public final TableField<RatioRecord, String> JSON_STRING = createField(DSL.name("json_string"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.ratio.filter</code>.
     */
    public final TableField<RatioRecord, Long> FILTER = createField(DSL.name("filter"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.ratio.min</code>.
     */
    public final TableField<RatioRecord, Long> MIN = createField(DSL.name("min"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.ratio.list</code>.
     */
    public final TableField<RatioRecord, Long> LIST = createField(DSL.name("list"), SQLDataType.BIGINT, this, "");

    private Ratio(Name alias, Table<RatioRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ratio(Name alias, Table<RatioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.ratio</code> table reference
     */
    public Ratio(String alias) {
        this(DSL.name(alias), RATIO);
    }

    /**
     * Create an aliased <code>live.ratio</code> table reference
     */
    public Ratio(Name alias) {
        this(alias, RATIO);
    }

    /**
     * Create a <code>live.ratio</code> table reference
     */
    public Ratio() {
        this(DSL.name("ratio"), null);
    }

    public <O extends Record> Ratio(Table<O> child, ForeignKey<O, RatioRecord> key) {
        super(child, key, RATIO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<RatioRecord, Long> getIdentity() {
        return (Identity<RatioRecord, Long>) super.getIdentity();
    }

    @Override
    public Ratio as(String alias) {
        return new Ratio(DSL.name(alias), this);
    }

    @Override
    public Ratio as(Name alias) {
        return new Ratio(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ratio rename(String name) {
        return new Ratio(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ratio rename(Name name) {
        return new Ratio(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, String, String, Long, String, Long, String, Long, Long, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
