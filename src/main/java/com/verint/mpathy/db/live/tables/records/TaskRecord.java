/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables.records;


import com.verint.mpathy.db.live.tables.Task;

import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskRecord extends TableRecordImpl<TaskRecord> implements Record4<Long, Integer, String, LocalTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live.task.idtask</code>.
     */
    public void setIdtask(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>live.task.idtask</code>.
     */
    public Long getIdtask() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live.task.idsite</code>.
     */
    public void setIdsite(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>live.task.idsite</code>.
     */
    public Integer getIdsite() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>live.task.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>live.task.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>live.task.last_calculation</code>. The column contains
     * the timestamp of the last calculation for this form stage.
     */
    public void setLastCalculation(LocalTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>live.task.last_calculation</code>. The column contains
     * the timestamp of the last calculation for this form stage.
     */
    public LocalTime getLastCalculation() {
        return (LocalTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, String, LocalTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Integer, String, LocalTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Task.TASK.IDTASK;
    }

    @Override
    public Field<Integer> field2() {
        return Task.TASK.IDSITE;
    }

    @Override
    public Field<String> field3() {
        return Task.TASK.NAME;
    }

    @Override
    public Field<LocalTime> field4() {
        return Task.TASK.LAST_CALCULATION;
    }

    @Override
    public Long component1() {
        return getIdtask();
    }

    @Override
    public Integer component2() {
        return getIdsite();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public LocalTime component4() {
        return getLastCalculation();
    }

    @Override
    public Long value1() {
        return getIdtask();
    }

    @Override
    public Integer value2() {
        return getIdsite();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public LocalTime value4() {
        return getLastCalculation();
    }

    @Override
    public TaskRecord value1(Long value) {
        setIdtask(value);
        return this;
    }

    @Override
    public TaskRecord value2(Integer value) {
        setIdsite(value);
        return this;
    }

    @Override
    public TaskRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public TaskRecord value4(LocalTime value) {
        setLastCalculation(value);
        return this;
    }

    @Override
    public TaskRecord values(Long value1, Integer value2, String value3, LocalTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskRecord
     */
    public TaskRecord() {
        super(Task.TASK);
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    public TaskRecord(Long idtask, Integer idsite, String name, LocalTime lastCalculation) {
        super(Task.TASK);

        setIdtask(idtask);
        setIdsite(idsite);
        setName(name);
        setLastCalculation(lastCalculation);
    }
}
