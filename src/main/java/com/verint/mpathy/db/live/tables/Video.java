/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.VideoRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * video export list and job queue
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Video extends TableImpl<VideoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.video</code>
     */
    public static final Video VIDEO = new Video();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VideoRecord> getRecordType() {
        return VideoRecord.class;
    }

    /**
     * The column <code>live.video.idvideo</code>. id of video
     */
    public final TableField<VideoRecord, Long> IDVIDEO = createField(DSL.name("idvideo"), SQLDataType.BIGINT.nullable(false).identity(true), this, "id of video");

    /**
     * The column <code>live.video.idsession</code>. video belongs to session
     */
    public final TableField<VideoRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "video belongs to session");

    /**
     * The column <code>live.video.idsite</code>. video belongs to site
     */
    public final TableField<VideoRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "video belongs to site");

    /**
     * The column <code>live.video.iduser</code>. video belongs to user
     */
    public final TableField<VideoRecord, BigDecimal> IDUSER = createField(DSL.name("iduser"), SQLDataType.NUMERIC.nullable(false), this, "video belongs to user");

    /**
     * The column <code>live.video.idpage_start</code>. video starts at pi
     */
    public final TableField<VideoRecord, BigDecimal> IDPAGE_START = createField(DSL.name("idpage_start"), SQLDataType.NUMERIC, this, "video starts at pi");

    /**
     * The column <code>live.video.idpage_end</code>. video ends at pi
     */
    public final TableField<VideoRecord, BigDecimal> IDPAGE_END = createField(DSL.name("idpage_end"), SQLDataType.NUMERIC, this, "video ends at pi");

    /**
     * The column <code>live.video.name_video</code>. video has a name
     */
    public final TableField<VideoRecord, String> NAME_VIDEO = createField(DSL.name("name_video"), SQLDataType.CLOB.nullable(false), this, "video has a name");

    /**
     * The column <code>live.video.queue_state</code>. video has a state in
     * queue (queued, running, finished)
     */
    public final TableField<VideoRecord, Short> QUEUE_STATE = createField(DSL.name("queue_state"), SQLDataType.SMALLINT.defaultValue(DSL.field("'0'::smallint", SQLDataType.SMALLINT)), this, "video has a state in queue (queued, running, finished)");

    /**
     * The column <code>live.video.finished_percent</code>. rendering progress
     */
    public final TableField<VideoRecord, Short> FINISHED_PERCENT = createField(DSL.name("finished_percent"), SQLDataType.SMALLINT.defaultValue(DSL.field("'0'::smallint", SQLDataType.SMALLINT)), this, "rendering progress");

    /**
     * The column <code>live.video.is_deleted</code>. video is deleted (soft)
     */
    public final TableField<VideoRecord, Short> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.SMALLINT.defaultValue(DSL.field("'0'::smallint", SQLDataType.SMALLINT)), this, "video is deleted (soft)");

    /**
     * The column <code>live.video.created_at</code>. video job was created at
     */
    public final TableField<VideoRecord, LocalTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALTIME(6).nullable(false), this, "video job was created at");

    /**
     * The column <code>live.video.finished_at</code>. video job finished at
     */
    public final TableField<VideoRecord, LocalTime> FINISHED_AT = createField(DSL.name("finished_at"), SQLDataType.LOCALTIME(6), this, "video job finished at");

    /**
     * The column <code>live.video.last_download_at</code>. video was last
     * downloaded at
     */
    public final TableField<VideoRecord, LocalTime> LAST_DOWNLOAD_AT = createField(DSL.name("last_download_at"), SQLDataType.LOCALTIME(6), this, "video was last downloaded at");

    /**
     * The column <code>live.video.expires_at</code>. video will expire at
     */
    public final TableField<VideoRecord, LocalTime> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.LOCALTIME(6), this, "video will expire at");

    /**
     * The column <code>live.video.error_message</code>. last error message that
     * should be reported to the user
     */
    public final TableField<VideoRecord, String> ERROR_MESSAGE = createField(DSL.name("error_message"), SQLDataType.CLOB, this, "last error message that should be reported to the user");

    /**
     * The column <code>live.video.uuid</code>. Contains the uuid to identify
     * the video in the external storage.
     */
    public final TableField<VideoRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.CLOB, this, "Contains the uuid to identify the video in the external storage.");

    private Video(Name alias, Table<VideoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Video(Name alias, Table<VideoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("video export list and job queue"), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.video</code> table reference
     */
    public Video(String alias) {
        this(DSL.name(alias), VIDEO);
    }

    /**
     * Create an aliased <code>live.video</code> table reference
     */
    public Video(Name alias) {
        this(alias, VIDEO);
    }

    /**
     * Create a <code>live.video</code> table reference
     */
    public Video() {
        this(DSL.name("video"), null);
    }

    public <O extends Record> Video(Table<O> child, ForeignKey<O, VideoRecord> key) {
        super(child, key, VIDEO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<VideoRecord, Long> getIdentity() {
        return (Identity<VideoRecord, Long>) super.getIdentity();
    }

    @Override
    public Video as(String alias) {
        return new Video(DSL.name(alias), this);
    }

    @Override
    public Video as(Name alias) {
        return new Video(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Video rename(String name) {
        return new Video(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Video rename(Name name) {
        return new Video(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, BigDecimal, Integer, BigDecimal, BigDecimal, BigDecimal, String, Short, Short, Short, LocalTime, LocalTime, LocalTime, LocalTime, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
