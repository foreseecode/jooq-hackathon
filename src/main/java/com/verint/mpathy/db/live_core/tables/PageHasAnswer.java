/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.PageHasAnswerRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageHasAnswer extends TableImpl<PageHasAnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.page_has_answer</code>
     */
    public static final PageHasAnswer PAGE_HAS_ANSWER = new PageHasAnswer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageHasAnswerRecord> getRecordType() {
        return PageHasAnswerRecord.class;
    }

    /**
     * The column <code>live_core.page_has_answer.idpage</code>.
     */
    public final TableField<PageHasAnswerRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.page_has_answer.idquestion</code>.
     */
    public final TableField<PageHasAnswerRecord, Long> IDQUESTION = createField(DSL.name("idquestion"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.page_has_answer.idanswer</code>.
     */
    public final TableField<PageHasAnswerRecord, Long> IDANSWER = createField(DSL.name("idanswer"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.page_has_answer.text</code>.
     */
    public final TableField<PageHasAnswerRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.page_has_answer.timestamp</code>.
     */
    public final TableField<PageHasAnswerRecord, LocalTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.page_has_answer.aborted</code>.
     */
    public final TableField<PageHasAnswerRecord, Short> ABORTED = createField(DSL.name("aborted"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.page_has_answer.group_key</code>.
     */
    public final TableField<PageHasAnswerRecord, BigDecimal> GROUP_KEY = createField(DSL.name("group_key"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.page_has_answer.iduseragent</code>.
     */
    public final TableField<PageHasAnswerRecord, Long> IDUSERAGENT = createField(DSL.name("iduseragent"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.page_has_answer.idpage_name</code>.
     */
    public final TableField<PageHasAnswerRecord, Long> IDPAGE_NAME = createField(DSL.name("idpage_name"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.page_has_answer.duration</code>.
     */
    public final TableField<PageHasAnswerRecord, Integer> DURATION = createField(DSL.name("duration"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.page_has_answer.idquestionnaire</code>.
     */
    public final TableField<PageHasAnswerRecord, Long> IDQUESTIONNAIRE = createField(DSL.name("idquestionnaire"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.page_has_answer.random_group</code>.
     */
    public final TableField<PageHasAnswerRecord, String> RANDOM_GROUP = createField(DSL.name("random_group"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.page_has_answer.idresponse</code>.
     */
    public final TableField<PageHasAnswerRecord, String> IDRESPONSE = createField(DSL.name("idresponse"), SQLDataType.CLOB, this, "");

    private PageHasAnswer(Name alias, Table<PageHasAnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageHasAnswer(Name alias, Table<PageHasAnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"page_has_answer\" as  SELECT page_has_answer.idpage,\n    page_has_answer.idquestion,\n    page_has_answer.idanswer,\n    page_has_answer.text,\n    page_has_answer.\"timestamp\",\n    page_has_answer.aborted,\n    page_has_answer.group_key,\n    page_has_answer.iduseragent,\n    page_has_answer.idpage_name,\n    page_has_answer.duration,\n    page_has_answer.idquestionnaire,\n    page_has_answer.random_group,\n    page_has_answer.idresponse\n   FROM live.page_has_answer;"));
    }

    /**
     * Create an aliased <code>live_core.page_has_answer</code> table reference
     */
    public PageHasAnswer(String alias) {
        this(DSL.name(alias), PAGE_HAS_ANSWER);
    }

    /**
     * Create an aliased <code>live_core.page_has_answer</code> table reference
     */
    public PageHasAnswer(Name alias) {
        this(alias, PAGE_HAS_ANSWER);
    }

    /**
     * Create a <code>live_core.page_has_answer</code> table reference
     */
    public PageHasAnswer() {
        this(DSL.name("page_has_answer"), null);
    }

    public <O extends Record> PageHasAnswer(Table<O> child, ForeignKey<O, PageHasAnswerRecord> key) {
        super(child, key, PAGE_HAS_ANSWER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public PageHasAnswer as(String alias) {
        return new PageHasAnswer(DSL.name(alias), this);
    }

    @Override
    public PageHasAnswer as(Name alias) {
        return new PageHasAnswer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageHasAnswer rename(String name) {
        return new PageHasAnswer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageHasAnswer rename(Name name) {
        return new PageHasAnswer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<BigDecimal, Long, Long, String, LocalTime, Short, BigDecimal, Long, Long, Integer, Long, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
