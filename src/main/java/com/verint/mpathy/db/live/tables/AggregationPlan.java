/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.AggregationPlanRecord;

import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AggregationPlan extends TableImpl<AggregationPlanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.aggregation_plan</code>
     */
    public static final AggregationPlan AGGREGATION_PLAN = new AggregationPlan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AggregationPlanRecord> getRecordType() {
        return AggregationPlanRecord.class;
    }

    /**
     * The column <code>live.aggregation_plan.idaggregation_plan</code>. ident
     * of the aggregationplan.
     */
    public final TableField<AggregationPlanRecord, Long> IDAGGREGATION_PLAN = createField(DSL.name("idaggregation_plan"), SQLDataType.BIGINT.nullable(false).identity(true), this, "ident of the aggregationplan.");

    /**
     * The column <code>live.aggregation_plan.iduser</code>. User ident with a
     * reference to "user".
     */
    public final TableField<AggregationPlanRecord, Long> IDUSER = createField(DSL.name("iduser"), SQLDataType.BIGINT.nullable(false), this, "User ident with a reference to \"user\".");

    /**
     * The column <code>live.aggregation_plan.status</code>. Status of the plan
     * -1:deleted, 0:inactive, 1:active.
     */
    public final TableField<AggregationPlanRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT.nullable(false), this, "Status of the plan -1:deleted, 0:inactive, 1:active.");

    /**
     * The column <code>live.aggregation_plan.date_created</code>. Plans
     * creation date.
     */
    public final TableField<AggregationPlanRecord, LocalTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALTIME(6).nullable(false), this, "Plans creation date.");

    /**
     * The column <code>live.aggregation_plan.filter_idsite</code>. Plans idsite
     * filter, the plan is only valid for these session site ids.
     */
    public final TableField<AggregationPlanRecord, Integer> FILTER_IDSITE = createField(DSL.name("filter_idsite"), SQLDataType.INTEGER, this, "Plans idsite filter, the plan is only valid for these session site ids.");

    /**
     * The column <code>live.aggregation_plan.filter_imported</code>. Plans
     * imported state filter, the plan is only valid for these session imported
     * values.
     */
    public final TableField<AggregationPlanRecord, Integer> FILTER_IMPORTED = createField(DSL.name("filter_imported"), SQLDataType.INTEGER, this, "Plans imported state filter, the plan is only valid for these session imported values.");

    /**
     * The column <code>live.aggregation_plan.filter_mpathy_enabled</code>.
     * Plans mpathy_enabled filter, the plan is only valid for these session
     * mpathy_enabled values.
     */
    public final TableField<AggregationPlanRecord, Integer> FILTER_MPATHY_ENABLED = createField(DSL.name("filter_mpathy_enabled"), SQLDataType.INTEGER, this, "Plans mpathy_enabled filter, the plan is only valid for these session mpathy_enabled values.");

    /**
     * The column <code>live.aggregation_plan.date_start</code>. Plans start
     * date - when will the plan be executed first.
     */
    public final TableField<AggregationPlanRecord, LocalTime> DATE_START = createField(DSL.name("date_start"), SQLDataType.LOCALTIME(6).nullable(false), this, "Plans start date - when will the plan be executed first.");

    /**
     * The column <code>live.aggregation_plan.date_end</code>. Plans end date -
     * when will the plan be executed last.
     */
    public final TableField<AggregationPlanRecord, LocalTime> DATE_END = createField(DSL.name("date_end"), SQLDataType.LOCALTIME(6).nullable(false), this, "Plans end date - when will the plan be executed last.");

    /**
     * The column <code>live.aggregation_plan.interval_minutes</code>. Plans
     * reexecution interval slot in minutes.
     */
    public final TableField<AggregationPlanRecord, Long> INTERVAL_MINUTES = createField(DSL.name("interval_minutes"), SQLDataType.BIGINT.nullable(false), this, "Plans reexecution interval slot in minutes.");

    /**
     * The column <code>live.aggregation_plan.duration_minutes</code>. Plans
     * duration in minutes.
     */
    public final TableField<AggregationPlanRecord, Long> DURATION_MINUTES = createField(DSL.name("duration_minutes"), SQLDataType.BIGINT.nullable(false), this, "Plans duration in minutes.");

    /**
     * The column <code>live.aggregation_plan.flag_move_luceneindex_once</code>.
     * if set to 1 the plan decides to move lucene index(s) folder to a backup
     * location, if not existent.
     */
    public final TableField<AggregationPlanRecord, Short> FLAG_MOVE_LUCENEINDEX_ONCE = createField(DSL.name("flag_move_luceneindex_once"), SQLDataType.SMALLINT.nullable(false), this, "if set to 1 the plan decides to move lucene index(s) folder to a backup location, if not existent.");

    /**
     * The column <code>live.aggregation_plan.rate</code>. Sessions to process
     * per import run, when the plan is active.
     */
    public final TableField<AggregationPlanRecord, Integer> RATE = createField(DSL.name("rate"), SQLDataType.INTEGER.nullable(false), this, "Sessions to process per import run, when the plan is active.");

    private AggregationPlan(Name alias, Table<AggregationPlanRecord> aliased) {
        this(alias, aliased, null);
    }

    private AggregationPlan(Name alias, Table<AggregationPlanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.aggregation_plan</code> table reference
     */
    public AggregationPlan(String alias) {
        this(DSL.name(alias), AGGREGATION_PLAN);
    }

    /**
     * Create an aliased <code>live.aggregation_plan</code> table reference
     */
    public AggregationPlan(Name alias) {
        this(alias, AGGREGATION_PLAN);
    }

    /**
     * Create a <code>live.aggregation_plan</code> table reference
     */
    public AggregationPlan() {
        this(DSL.name("aggregation_plan"), null);
    }

    public <O extends Record> AggregationPlan(Table<O> child, ForeignKey<O, AggregationPlanRecord> key) {
        super(child, key, AGGREGATION_PLAN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<AggregationPlanRecord, Long> getIdentity() {
        return (Identity<AggregationPlanRecord, Long>) super.getIdentity();
    }

    @Override
    public AggregationPlan as(String alias) {
        return new AggregationPlan(DSL.name(alias), this);
    }

    @Override
    public AggregationPlan as(Name alias) {
        return new AggregationPlan(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AggregationPlan rename(String name) {
        return new AggregationPlan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AggregationPlan rename(Name name) {
        return new AggregationPlan(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, Short, LocalTime, Integer, Integer, Integer, LocalTime, LocalTime, Long, Long, Short, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
