/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables.records;


import com.verint.mpathy.db.live_core.tables.SchemaInfo;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaInfoRecord extends TableRecordImpl<SchemaInfoRecord> implements Record4<Long, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live_core.schema_info.idschema_info</code>.
     */
    public void setIdschemaInfo(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>live_core.schema_info.idschema_info</code>.
     */
    public Long getIdschemaInfo() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live_core.schema_info.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>live_core.schema_info.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>live_core.schema_info.value</code>.
     */
    public void setValue(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>live_core.schema_info.value</code>.
     */
    public String getValue() {
        return (String) get(2);
    }

    /**
     * Setter for <code>live_core.schema_info.comment</code>.
     */
    public void setComment(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>live_core.schema_info.comment</code>.
     */
    public String getComment() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return SchemaInfo.SCHEMA_INFO.IDSCHEMA_INFO;
    }

    @Override
    public Field<String> field2() {
        return SchemaInfo.SCHEMA_INFO.NAME;
    }

    @Override
    public Field<String> field3() {
        return SchemaInfo.SCHEMA_INFO.VALUE;
    }

    @Override
    public Field<String> field4() {
        return SchemaInfo.SCHEMA_INFO.COMMENT;
    }

    @Override
    public Long component1() {
        return getIdschemaInfo();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getValue();
    }

    @Override
    public String component4() {
        return getComment();
    }

    @Override
    public Long value1() {
        return getIdschemaInfo();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getValue();
    }

    @Override
    public String value4() {
        return getComment();
    }

    @Override
    public SchemaInfoRecord value1(Long value) {
        setIdschemaInfo(value);
        return this;
    }

    @Override
    public SchemaInfoRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public SchemaInfoRecord value3(String value) {
        setValue(value);
        return this;
    }

    @Override
    public SchemaInfoRecord value4(String value) {
        setComment(value);
        return this;
    }

    @Override
    public SchemaInfoRecord values(Long value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SchemaInfoRecord
     */
    public SchemaInfoRecord() {
        super(SchemaInfo.SCHEMA_INFO);
    }

    /**
     * Create a detached, initialised SchemaInfoRecord
     */
    public SchemaInfoRecord(Long idschemaInfo, String name, String value, String comment) {
        super(SchemaInfo.SCHEMA_INFO);

        setIdschemaInfo(idschemaInfo);
        setName(name);
        setValue(value);
        setComment(comment);
    }
}
