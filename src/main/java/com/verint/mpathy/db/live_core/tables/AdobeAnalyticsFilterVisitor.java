/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.AdobeAnalyticsFilterVisitorRecord;

import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdobeAnalyticsFilterVisitor extends TableImpl<AdobeAnalyticsFilterVisitorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>live_core.adobe_analytics_filter_visitor</code>
     */
    public static final AdobeAnalyticsFilterVisitor ADOBE_ANALYTICS_FILTER_VISITOR = new AdobeAnalyticsFilterVisitor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdobeAnalyticsFilterVisitorRecord> getRecordType() {
        return AdobeAnalyticsFilterVisitorRecord.class;
    }

    /**
     * The column
     * <code>live_core.adobe_analytics_filter_visitor.idfilter</code>.
     */
    public final TableField<AdobeAnalyticsFilterVisitorRecord, BigDecimal> IDFILTER = createField(DSL.name("idfilter"), SQLDataType.NUMERIC, this, "");

    /**
     * The column
     * <code>live_core.adobe_analytics_filter_visitor.idvisitor</code>.
     */
    public final TableField<AdobeAnalyticsFilterVisitorRecord, String> IDVISITOR = createField(DSL.name("idvisitor"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>live_core.adobe_analytics_filter_visitor.import_date</code>.
     */
    public final TableField<AdobeAnalyticsFilterVisitorRecord, LocalDate> IMPORT_DATE = createField(DSL.name("import_date"), SQLDataType.LOCALDATE, this, "");

    private AdobeAnalyticsFilterVisitor(Name alias, Table<AdobeAnalyticsFilterVisitorRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdobeAnalyticsFilterVisitor(Name alias, Table<AdobeAnalyticsFilterVisitorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"adobe_analytics_filter_visitor\" as  SELECT adobe_analytics_filter_visitor.idfilter,\n    adobe_analytics_filter_visitor.idvisitor,\n    adobe_analytics_filter_visitor.import_date\n   FROM live.adobe_analytics_filter_visitor;"));
    }

    /**
     * Create an aliased <code>live_core.adobe_analytics_filter_visitor</code>
     * table reference
     */
    public AdobeAnalyticsFilterVisitor(String alias) {
        this(DSL.name(alias), ADOBE_ANALYTICS_FILTER_VISITOR);
    }

    /**
     * Create an aliased <code>live_core.adobe_analytics_filter_visitor</code>
     * table reference
     */
    public AdobeAnalyticsFilterVisitor(Name alias) {
        this(alias, ADOBE_ANALYTICS_FILTER_VISITOR);
    }

    /**
     * Create a <code>live_core.adobe_analytics_filter_visitor</code> table
     * reference
     */
    public AdobeAnalyticsFilterVisitor() {
        this(DSL.name("adobe_analytics_filter_visitor"), null);
    }

    public <O extends Record> AdobeAnalyticsFilterVisitor(Table<O> child, ForeignKey<O, AdobeAnalyticsFilterVisitorRecord> key) {
        super(child, key, ADOBE_ANALYTICS_FILTER_VISITOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public AdobeAnalyticsFilterVisitor as(String alias) {
        return new AdobeAnalyticsFilterVisitor(DSL.name(alias), this);
    }

    @Override
    public AdobeAnalyticsFilterVisitor as(Name alias) {
        return new AdobeAnalyticsFilterVisitor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdobeAnalyticsFilterVisitor rename(String name) {
        return new AdobeAnalyticsFilterVisitor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdobeAnalyticsFilterVisitor rename(Name name) {
        return new AdobeAnalyticsFilterVisitor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<BigDecimal, String, LocalDate> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
