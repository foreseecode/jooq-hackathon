/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.ElementRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Element extends TableImpl<ElementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.element</code>
     */
    public static final Element ELEMENT = new Element();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElementRecord> getRecordType() {
        return ElementRecord.class;
    }

    /**
     * The column <code>live.element.idelement</code>.
     */
    public final TableField<ElementRecord, Long> IDELEMENT = createField(DSL.name("idelement"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>live.element.idsite</code>.
     */
    public final TableField<ElementRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live.element.html_id</code>.
     */
    public final TableField<ElementRecord, String> HTML_ID = createField(DSL.name("html_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.element.type</code>.
     */
    public final TableField<ElementRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.element.hashvalue</code>.
     */
    public final TableField<ElementRecord, String> HASHVALUE = createField(DSL.name("hashvalue"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.element.mpt_id</code>.
     */
    public final TableField<ElementRecord, String> MPT_ID = createField(DSL.name("mpt_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.element.html_name</code>.
     */
    public final TableField<ElementRecord, String> HTML_NAME = createField(DSL.name("html_name"), SQLDataType.CLOB, this, "");

    private Element(Name alias, Table<ElementRecord> aliased) {
        this(alias, aliased, null);
    }

    private Element(Name alias, Table<ElementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.element</code> table reference
     */
    public Element(String alias) {
        this(DSL.name(alias), ELEMENT);
    }

    /**
     * Create an aliased <code>live.element</code> table reference
     */
    public Element(Name alias) {
        this(alias, ELEMENT);
    }

    /**
     * Create a <code>live.element</code> table reference
     */
    public Element() {
        this(DSL.name("element"), null);
    }

    public <O extends Record> Element(Table<O> child, ForeignKey<O, ElementRecord> key) {
        super(child, key, ELEMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<ElementRecord, Long> getIdentity() {
        return (Identity<ElementRecord, Long>) super.getIdentity();
    }

    @Override
    public Element as(String alias) {
        return new Element(DSL.name(alias), this);
    }

    @Override
    public Element as(Name alias) {
        return new Element(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Element rename(String name) {
        return new Element(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Element rename(Name name) {
        return new Element(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Integer, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
