/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.MobileMetricRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table contains all information about dynamic information of a mobile
 * device.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MobileMetric extends TableImpl<MobileMetricRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.mobile_metric</code>
     */
    public static final MobileMetric MOBILE_METRIC = new MobileMetric();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MobileMetricRecord> getRecordType() {
        return MobileMetricRecord.class;
    }

    /**
     * The column <code>live.mobile_metric.idmobile_metric</code>. Primary key.
     */
    public final TableField<MobileMetricRecord, Long> IDMOBILE_METRIC = createField(DSL.name("idmobile_metric"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>live.mobile_metric.width</code>. Contains the display
     * width of mobile device.
     */
    public final TableField<MobileMetricRecord, Integer> WIDTH = createField(DSL.name("width"), SQLDataType.INTEGER, this, "Contains the display width of mobile device.");

    /**
     * The column <code>live.mobile_metric.height</code>. Contains the display
     * height of mobile device.
     */
    public final TableField<MobileMetricRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER, this, "Contains the display height of mobile device.");

    /**
     * The column <code>live.mobile_metric.heap_size</code>. Contains the memory
     * heap size with of mobile device.
     */
    public final TableField<MobileMetricRecord, Integer> HEAP_SIZE = createField(DSL.name("heap_size"), SQLDataType.INTEGER, this, "Contains the memory heap size with of mobile device.");

    private MobileMetric(Name alias, Table<MobileMetricRecord> aliased) {
        this(alias, aliased, null);
    }

    private MobileMetric(Name alias, Table<MobileMetricRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The table contains all information about dynamic information of a mobile device."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.mobile_metric</code> table reference
     */
    public MobileMetric(String alias) {
        this(DSL.name(alias), MOBILE_METRIC);
    }

    /**
     * Create an aliased <code>live.mobile_metric</code> table reference
     */
    public MobileMetric(Name alias) {
        this(alias, MOBILE_METRIC);
    }

    /**
     * Create a <code>live.mobile_metric</code> table reference
     */
    public MobileMetric() {
        this(DSL.name("mobile_metric"), null);
    }

    public <O extends Record> MobileMetric(Table<O> child, ForeignKey<O, MobileMetricRecord> key) {
        super(child, key, MOBILE_METRIC);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<MobileMetricRecord, Long> getIdentity() {
        return (Identity<MobileMetricRecord, Long>) super.getIdentity();
    }

    @Override
    public MobileMetric as(String alias) {
        return new MobileMetric(DSL.name(alias), this);
    }

    @Override
    public MobileMetric as(Name alias) {
        return new MobileMetric(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileMetric rename(String name) {
        return new MobileMetric(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MobileMetric rename(Name name) {
        return new MobileMetric(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
