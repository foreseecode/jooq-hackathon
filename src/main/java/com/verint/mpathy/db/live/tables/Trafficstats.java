/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.TrafficstatsRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trafficstats extends TableImpl<TrafficstatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.trafficstats</code>
     */
    public static final Trafficstats TRAFFICSTATS = new Trafficstats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrafficstatsRecord> getRecordType() {
        return TrafficstatsRecord.class;
    }

    /**
     * The column <code>live.trafficstats.idsite</code>.
     */
    public final TableField<TrafficstatsRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live.trafficstats.time</code>.
     */
    public final TableField<TrafficstatsRecord, LocalTime> TIME = createField(DSL.name("time"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live.trafficstats.transfervolume</code>.
     */
    public final TableField<TrafficstatsRecord, BigDecimal> TRANSFERVOLUME = createField(DSL.name("transfervolume"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.trafficstats.transfervolume_diff</code>.
     */
    public final TableField<TrafficstatsRecord, BigDecimal> TRANSFERVOLUME_DIFF = createField(DSL.name("transfervolume_diff"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.trafficstats.loader_count</code>.
     */
    public final TableField<TrafficstatsRecord, Long> LOADER_COUNT = createField(DSL.name("loader_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.trafficstats.loader_count_diff</code>.
     */
    public final TableField<TrafficstatsRecord, Long> LOADER_COUNT_DIFF = createField(DSL.name("loader_count_diff"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.trafficstats.engine_count</code>.
     */
    public final TableField<TrafficstatsRecord, Long> ENGINE_COUNT = createField(DSL.name("engine_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.trafficstats.engine_count_diff</code>.
     */
    public final TableField<TrafficstatsRecord, Long> ENGINE_COUNT_DIFF = createField(DSL.name("engine_count_diff"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.trafficstats.account_loader_count</code>.
     */
    public final TableField<TrafficstatsRecord, Long> ACCOUNT_LOADER_COUNT = createField(DSL.name("account_loader_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.trafficstats.account_loader_count_diff</code>.
     */
    public final TableField<TrafficstatsRecord, Long> ACCOUNT_LOADER_COUNT_DIFF = createField(DSL.name("account_loader_count_diff"), SQLDataType.BIGINT, this, "");

    private Trafficstats(Name alias, Table<TrafficstatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trafficstats(Name alias, Table<TrafficstatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.trafficstats</code> table reference
     */
    public Trafficstats(String alias) {
        this(DSL.name(alias), TRAFFICSTATS);
    }

    /**
     * Create an aliased <code>live.trafficstats</code> table reference
     */
    public Trafficstats(Name alias) {
        this(alias, TRAFFICSTATS);
    }

    /**
     * Create a <code>live.trafficstats</code> table reference
     */
    public Trafficstats() {
        this(DSL.name("trafficstats"), null);
    }

    public <O extends Record> Trafficstats(Table<O> child, ForeignKey<O, TrafficstatsRecord> key) {
        super(child, key, TRAFFICSTATS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Trafficstats as(String alias) {
        return new Trafficstats(DSL.name(alias), this);
    }

    @Override
    public Trafficstats as(Name alias) {
        return new Trafficstats(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trafficstats rename(String name) {
        return new Trafficstats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trafficstats rename(Name name) {
        return new Trafficstats(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, LocalTime, BigDecimal, BigDecimal, Long, Long, Long, Long, Long, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
