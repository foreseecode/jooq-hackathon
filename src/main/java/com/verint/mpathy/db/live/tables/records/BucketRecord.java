/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables.records;


import com.verint.mpathy.db.live.tables.Bucket;

import org.jooq.Field;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BucketRecord extends TableRecordImpl<BucketRecord> implements Record9<Long, Integer, String, Short, Long, Short, Short, Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live.bucket.idbucket</code>. ident for buckets
     */
    public void setIdbucket(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>live.bucket.idbucket</code>. ident for buckets
     */
    public Long getIdbucket() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live.bucket.idsite</code>. foreign key to site table
     */
    public void setIdsite(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>live.bucket.idsite</code>. foreign key to site table
     */
    public Integer getIdsite() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>live.bucket.type</code>. alert threshold for warn mail
     * in percent
     */
    public void setType(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>live.bucket.type</code>. alert threshold for warn mail
     * in percent
     */
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>live.bucket.retention</code>. retention time for
     * sessions in days
     */
    public void setRetention(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>live.bucket.retention</code>. retention time for
     * sessions in days
     */
    public Short getRetention() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>live.bucket.limit</code>. limit of sessions to alert, 0
     * is limitless
     */
    public void setLimit(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>live.bucket.limit</code>. limit of sessions to alert, 0
     * is limitless
     */
    public Long getLimit() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>live.bucket.alert_threshold</code>. alert threshold for
     * warn mail in percent
     */
    public void setAlertThreshold(Short value) {
        set(5, value);
    }

    /**
     * Getter for <code>live.bucket.alert_threshold</code>. alert threshold for
     * warn mail in percent
     */
    public Short getAlertThreshold() {
        return (Short) get(5);
    }

    /**
     * Setter for <code>live.bucket.count_delay</code>. Delay for the
     * calculation stored in "bucket_count" in hours.
     */
    public void setCountDelay(Short value) {
        set(6, value);
    }

    /**
     * Getter for <code>live.bucket.count_delay</code>. Delay for the
     * calculation stored in "bucket_count" in hours.
     */
    public Short getCountDelay() {
        return (Short) get(6);
    }

    /**
     * Setter for <code>live.bucket.priority</code>.
     */
    public void setPriority(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>live.bucket.priority</code>.
     */
    public Long getPriority() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>live.bucket.name</code>.
     */
    public void setName(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>live.bucket.name</code>.
     */
    public String getName() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, String, Short, Long, Short, Short, Long, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, Integer, String, Short, Long, Short, Short, Long, String> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Bucket.BUCKET.IDBUCKET;
    }

    @Override
    public Field<Integer> field2() {
        return Bucket.BUCKET.IDSITE;
    }

    @Override
    public Field<String> field3() {
        return Bucket.BUCKET.TYPE;
    }

    @Override
    public Field<Short> field4() {
        return Bucket.BUCKET.RETENTION;
    }

    @Override
    public Field<Long> field5() {
        return Bucket.BUCKET.LIMIT;
    }

    @Override
    public Field<Short> field6() {
        return Bucket.BUCKET.ALERT_THRESHOLD;
    }

    @Override
    public Field<Short> field7() {
        return Bucket.BUCKET.COUNT_DELAY;
    }

    @Override
    public Field<Long> field8() {
        return Bucket.BUCKET.PRIORITY;
    }

    @Override
    public Field<String> field9() {
        return Bucket.BUCKET.NAME;
    }

    @Override
    public Long component1() {
        return getIdbucket();
    }

    @Override
    public Integer component2() {
        return getIdsite();
    }

    @Override
    public String component3() {
        return getType();
    }

    @Override
    public Short component4() {
        return getRetention();
    }

    @Override
    public Long component5() {
        return getLimit();
    }

    @Override
    public Short component6() {
        return getAlertThreshold();
    }

    @Override
    public Short component7() {
        return getCountDelay();
    }

    @Override
    public Long component8() {
        return getPriority();
    }

    @Override
    public String component9() {
        return getName();
    }

    @Override
    public Long value1() {
        return getIdbucket();
    }

    @Override
    public Integer value2() {
        return getIdsite();
    }

    @Override
    public String value3() {
        return getType();
    }

    @Override
    public Short value4() {
        return getRetention();
    }

    @Override
    public Long value5() {
        return getLimit();
    }

    @Override
    public Short value6() {
        return getAlertThreshold();
    }

    @Override
    public Short value7() {
        return getCountDelay();
    }

    @Override
    public Long value8() {
        return getPriority();
    }

    @Override
    public String value9() {
        return getName();
    }

    @Override
    public BucketRecord value1(Long value) {
        setIdbucket(value);
        return this;
    }

    @Override
    public BucketRecord value2(Integer value) {
        setIdsite(value);
        return this;
    }

    @Override
    public BucketRecord value3(String value) {
        setType(value);
        return this;
    }

    @Override
    public BucketRecord value4(Short value) {
        setRetention(value);
        return this;
    }

    @Override
    public BucketRecord value5(Long value) {
        setLimit(value);
        return this;
    }

    @Override
    public BucketRecord value6(Short value) {
        setAlertThreshold(value);
        return this;
    }

    @Override
    public BucketRecord value7(Short value) {
        setCountDelay(value);
        return this;
    }

    @Override
    public BucketRecord value8(Long value) {
        setPriority(value);
        return this;
    }

    @Override
    public BucketRecord value9(String value) {
        setName(value);
        return this;
    }

    @Override
    public BucketRecord values(Long value1, Integer value2, String value3, Short value4, Long value5, Short value6, Short value7, Long value8, String value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BucketRecord
     */
    public BucketRecord() {
        super(Bucket.BUCKET);
    }

    /**
     * Create a detached, initialised BucketRecord
     */
    public BucketRecord(Long idbucket, Integer idsite, String type, Short retention, Long limit, Short alertThreshold, Short countDelay, Long priority, String name) {
        super(Bucket.BUCKET);

        setIdbucket(idbucket);
        setIdsite(idsite);
        setType(type);
        setRetention(retention);
        setLimit(limit);
        setAlertThreshold(alertThreshold);
        setCountDelay(countDelay);
        setPriority(priority);
        setName(name);
    }
}
