/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.HeadlessPollsShowedRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Collect the number of questionnaire that has been shown for a visitor.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HeadlessPollsShowed extends TableImpl<HeadlessPollsShowedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.headless_polls_showed</code>
     */
    public static final HeadlessPollsShowed HEADLESS_POLLS_SHOWED = new HeadlessPollsShowed();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HeadlessPollsShowedRecord> getRecordType() {
        return HeadlessPollsShowedRecord.class;
    }

    /**
     * The column <code>live.headless_polls_showed.idsite</code>. site ident
     */
    public final TableField<HeadlessPollsShowedRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "site ident");

    /**
     * The column <code>live.headless_polls_showed.idvisitor</code>. visitor
     * ident
     */
    public final TableField<HeadlessPollsShowedRecord, BigDecimal> IDVISITOR = createField(DSL.name("idvisitor"), SQLDataType.NUMERIC.nullable(false), this, "visitor ident");

    /**
     * The column <code>live.headless_polls_showed.idquestion</code>.
     * questionnaire ident
     */
    public final TableField<HeadlessPollsShowedRecord, Long> IDQUESTION = createField(DSL.name("idquestion"), SQLDataType.BIGINT.nullable(false), this, "questionnaire ident");

    /**
     * The column <code>live.headless_polls_showed.date</code>. date of the
     * showed poll
     */
    public final TableField<HeadlessPollsShowedRecord, LocalTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALTIME(6).nullable(false), this, "date of the showed poll");

    private HeadlessPollsShowed(Name alias, Table<HeadlessPollsShowedRecord> aliased) {
        this(alias, aliased, null);
    }

    private HeadlessPollsShowed(Name alias, Table<HeadlessPollsShowedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Collect the number of questionnaire that has been shown for a visitor."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.headless_polls_showed</code> table reference
     */
    public HeadlessPollsShowed(String alias) {
        this(DSL.name(alias), HEADLESS_POLLS_SHOWED);
    }

    /**
     * Create an aliased <code>live.headless_polls_showed</code> table reference
     */
    public HeadlessPollsShowed(Name alias) {
        this(alias, HEADLESS_POLLS_SHOWED);
    }

    /**
     * Create a <code>live.headless_polls_showed</code> table reference
     */
    public HeadlessPollsShowed() {
        this(DSL.name("headless_polls_showed"), null);
    }

    public <O extends Record> HeadlessPollsShowed(Table<O> child, ForeignKey<O, HeadlessPollsShowedRecord> key) {
        super(child, key, HEADLESS_POLLS_SHOWED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public HeadlessPollsShowed as(String alias) {
        return new HeadlessPollsShowed(DSL.name(alias), this);
    }

    @Override
    public HeadlessPollsShowed as(Name alias) {
        return new HeadlessPollsShowed(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HeadlessPollsShowed rename(String name) {
        return new HeadlessPollsShowed(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HeadlessPollsShowed rename(Name name) {
        return new HeadlessPollsShowed(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, BigDecimal, Long, LocalTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
