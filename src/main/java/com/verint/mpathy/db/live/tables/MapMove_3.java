/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.MapMove_3Record;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Moves - every third move has been skipped during import.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MapMove_3 extends TableImpl<MapMove_3Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.map_move_3</code>
     */
    public static final MapMove_3 MAP_MOVE_3 = new MapMove_3();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MapMove_3Record> getRecordType() {
        return MapMove_3Record.class;
    }

    /**
     * The column <code>live.map_move_3.idpage</code>. Technical foreign key to
     * the "page" table and a foreign key to "page".
     */
    public final TableField<MapMove_3Record, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC.nullable(false), this, "Technical foreign key to the \"page\" table and a foreign key to \"page\".");

    /**
     * The column <code>live.map_move_3.idsession</code>. Technical foreign key
     * to the "session" table and a foreign key to "session".
     */
    public final TableField<MapMove_3Record, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC.nullable(false), this, "Technical foreign key to the \"session\" table and a foreign key to \"session\".");

    /**
     * The column <code>live.map_move_3.idsite</code>. Technical foreign key to
     * the "site" table and a foreign key to "site".
     */
    public final TableField<MapMove_3Record, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "Technical foreign key to the \"site\" table and a foreign key to \"site\".");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<MapMove_3Record, Object> POINT = createField(DSL.name("point"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"path\""), this, "Contains x and y values relative to their starting value.");

    /**
     * The column <code>live.map_move_3.time</code>. References the time in
     * which the moves occured
     */
    public final TableField<MapMove_3Record, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT, this, "References the time in which the moves occured");

    /**
     * The column <code>live.map_move_3.viewport_width</code>. Contains the
     * viewport width of the page
     */
    public final TableField<MapMove_3Record, Long> VIEWPORT_WIDTH = createField(DSL.name("viewport_width"), SQLDataType.BIGINT, this, "Contains the viewport width of the page");

    private MapMove_3(Name alias, Table<MapMove_3Record> aliased) {
        this(alias, aliased, null);
    }

    private MapMove_3(Name alias, Table<MapMove_3Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Moves - every third move has been skipped during import."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.map_move_3</code> table reference
     */
    public MapMove_3(String alias) {
        this(DSL.name(alias), MAP_MOVE_3);
    }

    /**
     * Create an aliased <code>live.map_move_3</code> table reference
     */
    public MapMove_3(Name alias) {
        this(alias, MAP_MOVE_3);
    }

    /**
     * Create a <code>live.map_move_3</code> table reference
     */
    public MapMove_3() {
        this(DSL.name("map_move_3"), null);
    }

    public <O extends Record> MapMove_3(Table<O> child, ForeignKey<O, MapMove_3Record> key) {
        super(child, key, MAP_MOVE_3);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public MapMove_3 as(String alias) {
        return new MapMove_3(DSL.name(alias), this);
    }

    @Override
    public MapMove_3 as(Name alias) {
        return new MapMove_3(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MapMove_3 rename(String name) {
        return new MapMove_3(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MapMove_3 rename(Name name) {
        return new MapMove_3(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<BigDecimal, BigDecimal, Integer, Object, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
