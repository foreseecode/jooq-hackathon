/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.Useragents2Record;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Useragents2 extends TableImpl<Useragents2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.useragents2</code>
     */
    public static final Useragents2 USERAGENTS2 = new Useragents2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Useragents2Record> getRecordType() {
        return Useragents2Record.class;
    }

    /**
     * The column <code>live_core.useragents2.product</code>.
     */
    public final TableField<Useragents2Record, String> PRODUCT = createField(DSL.name("product"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.useragents2.version</code>.
     */
    public final TableField<Useragents2Record, String> VERSION = createField(DSL.name("version"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.useragents2.os</code>.
     */
    public final TableField<Useragents2Record, String> OS = createField(DSL.name("os"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.useragents2.ua_string</code>.
     */
    public final TableField<Useragents2Record, String> UA_STRING = createField(DSL.name("ua_string"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.useragents2.type</code>.
     */
    public final TableField<Useragents2Record, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    private Useragents2(Name alias, Table<Useragents2Record> aliased) {
        this(alias, aliased, null);
    }

    private Useragents2(Name alias, Table<Useragents2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"useragents2\" as  SELECT useragents2.product,\n    useragents2.version,\n    useragents2.os,\n    useragents2.ua_string,\n    useragents2.type\n   FROM live.useragents2;"));
    }

    /**
     * Create an aliased <code>live_core.useragents2</code> table reference
     */
    public Useragents2(String alias) {
        this(DSL.name(alias), USERAGENTS2);
    }

    /**
     * Create an aliased <code>live_core.useragents2</code> table reference
     */
    public Useragents2(Name alias) {
        this(alias, USERAGENTS2);
    }

    /**
     * Create a <code>live_core.useragents2</code> table reference
     */
    public Useragents2() {
        this(DSL.name("useragents2"), null);
    }

    public <O extends Record> Useragents2(Table<O> child, ForeignKey<O, Useragents2Record> key) {
        super(child, key, USERAGENTS2);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public Useragents2 as(String alias) {
        return new Useragents2(DSL.name(alias), this);
    }

    @Override
    public Useragents2 as(Name alias) {
        return new Useragents2(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Useragents2 rename(String name) {
        return new Useragents2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Useragents2 rename(Name name) {
        return new Useragents2(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
