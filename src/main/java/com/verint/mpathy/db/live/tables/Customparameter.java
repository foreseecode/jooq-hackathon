/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.CustomparameterRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customparameter extends TableImpl<CustomparameterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.customparameter</code>
     */
    public static final Customparameter CUSTOMPARAMETER = new Customparameter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomparameterRecord> getRecordType() {
        return CustomparameterRecord.class;
    }

    /**
     * The column <code>live.customparameter.idcp</code>.
     */
    public final TableField<CustomparameterRecord, Long> IDCP = createField(DSL.name("idcp"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>live.customparameter.idsite</code>.
     */
    public final TableField<CustomparameterRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>live.customparameter.name</code>.
     */
    public final TableField<CustomparameterRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>live.customparameter.ordervalue</code>.
     */
    public final TableField<CustomparameterRecord, Long> ORDERVALUE = createField(DSL.name("ordervalue"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>live.customparameter.type</code>.
     */
    public final TableField<CustomparameterRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>live.customparameter.level</code>.
     */
    public final TableField<CustomparameterRecord, String> LEVEL = createField(DSL.name("level"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>live.customparameter.desc</code>. Original Name from
     * tracking (e.g. with german letters)
     */
    public final TableField<CustomparameterRecord, String> DESC = createField(DSL.name("desc"), SQLDataType.CLOB.nullable(false), this, "Original Name from tracking (e.g. with german letters)");

    /**
     * The column <code>live.customparameter.segment</code>.
     */
    public final TableField<CustomparameterRecord, Boolean> SEGMENT = createField(DSL.name("segment"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>live.customparameter.enabled</code>.
     */
    public final TableField<CustomparameterRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>live.customparameter.description</code>. Description of
     * combination of customparameter fieldname and value
     */
    public final TableField<CustomparameterRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "Description of combination of customparameter fieldname and value");

    /**
     * The column <code>live.customparameter.multiselect</code>.
     */
    public final TableField<CustomparameterRecord, Short> MULTISELECT = createField(DSL.name("multiselect"), SQLDataType.SMALLINT.defaultValue(DSL.field("0", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>live.customparameter.view_type</code>. The view type to
     * visualize the interaction component of the frontend.
     */
    public final TableField<CustomparameterRecord, String> VIEW_TYPE = createField(DSL.name("view_type"), SQLDataType.CLOB.defaultValue(DSL.field("'dropdown'::text", SQLDataType.CLOB)), this, "The view type to visualize the interaction component of the frontend.");

    /**
     * The column <code>live.customparameter.comparator_type</code>.
     */
    public final TableField<CustomparameterRecord, String> COMPARATOR_TYPE = createField(DSL.name("comparator_type"), SQLDataType.CLOB.defaultValue(DSL.field("'default'::text", SQLDataType.CLOB)), this, "");

    private Customparameter(Name alias, Table<CustomparameterRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customparameter(Name alias, Table<CustomparameterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.customparameter</code> table reference
     */
    public Customparameter(String alias) {
        this(DSL.name(alias), CUSTOMPARAMETER);
    }

    /**
     * Create an aliased <code>live.customparameter</code> table reference
     */
    public Customparameter(Name alias) {
        this(alias, CUSTOMPARAMETER);
    }

    /**
     * Create a <code>live.customparameter</code> table reference
     */
    public Customparameter() {
        this(DSL.name("customparameter"), null);
    }

    public <O extends Record> Customparameter(Table<O> child, ForeignKey<O, CustomparameterRecord> key) {
        super(child, key, CUSTOMPARAMETER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<CustomparameterRecord, Long> getIdentity() {
        return (Identity<CustomparameterRecord, Long>) super.getIdentity();
    }

    @Override
    public Customparameter as(String alias) {
        return new Customparameter(DSL.name(alias), this);
    }

    @Override
    public Customparameter as(Name alias) {
        return new Customparameter(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customparameter rename(String name) {
        return new Customparameter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customparameter rename(Name name) {
        return new Customparameter(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Integer, String, Long, String, String, String, Boolean, Boolean, String, Short, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
