/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.Cp_3338SessionRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cp_3338Session extends TableImpl<Cp_3338SessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.cp_3338_session</code>
     */
    public static final Cp_3338Session CP_3338_SESSION = new Cp_3338Session();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Cp_3338SessionRecord> getRecordType() {
        return Cp_3338SessionRecord.class;
    }

    /**
     * The column <code>live_core.cp_3338_session.idsession</code>.
     */
    public final TableField<Cp_3338SessionRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.cp_3338_session.idcp</code>.
     */
    public final TableField<Cp_3338SessionRecord, Long> IDCP = createField(DSL.name("idcp"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.cp_3338_session.idvalue</code>.
     */
    public final TableField<Cp_3338SessionRecord, BigDecimal> IDVALUE = createField(DSL.name("idvalue"), SQLDataType.NUMERIC, this, "");

    private Cp_3338Session(Name alias, Table<Cp_3338SessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cp_3338Session(Name alias, Table<Cp_3338SessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"cp_3338_session\" as  SELECT cp_3338_session.idsession,\n    cp_3338_session.idcp,\n    cp_3338_session.idvalue\n   FROM live.cp_3338_session;"));
    }

    /**
     * Create an aliased <code>live_core.cp_3338_session</code> table reference
     */
    public Cp_3338Session(String alias) {
        this(DSL.name(alias), CP_3338_SESSION);
    }

    /**
     * Create an aliased <code>live_core.cp_3338_session</code> table reference
     */
    public Cp_3338Session(Name alias) {
        this(alias, CP_3338_SESSION);
    }

    /**
     * Create a <code>live_core.cp_3338_session</code> table reference
     */
    public Cp_3338Session() {
        this(DSL.name("cp_3338_session"), null);
    }

    public <O extends Record> Cp_3338Session(Table<O> child, ForeignKey<O, Cp_3338SessionRecord> key) {
        super(child, key, CP_3338_SESSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public Cp_3338Session as(String alias) {
        return new Cp_3338Session(DSL.name(alias), this);
    }

    @Override
    public Cp_3338Session as(Name alias) {
        return new Cp_3338Session(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cp_3338Session rename(String name) {
        return new Cp_3338Session(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cp_3338Session rename(Name name) {
        return new Cp_3338Session(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<BigDecimal, Long, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
