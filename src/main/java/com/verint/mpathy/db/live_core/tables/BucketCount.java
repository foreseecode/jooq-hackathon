/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.BucketCountRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BucketCount extends TableImpl<BucketCountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.bucket_count</code>
     */
    public static final BucketCount BUCKET_COUNT = new BucketCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BucketCountRecord> getRecordType() {
        return BucketCountRecord.class;
    }

    /**
     * The column <code>live_core.bucket_count.idbucket_count</code>.
     */
    public final TableField<BucketCountRecord, Long> IDBUCKET_COUNT = createField(DSL.name("idbucket_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.bucket_count.idbucket</code>.
     */
    public final TableField<BucketCountRecord, BigDecimal> IDBUCKET = createField(DSL.name("idbucket"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.bucket_count.idsite</code>.
     */
    public final TableField<BucketCountRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.bucket_count.start_date</code>.
     */
    public final TableField<BucketCountRecord, LocalTime> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.bucket_count.value</code>.
     */
    public final TableField<BucketCountRecord, BigDecimal> VALUE = createField(DSL.name("value"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.bucket_count.snapshot</code>.
     */
    public final TableField<BucketCountRecord, Short> SNAPSHOT = createField(DSL.name("snapshot"), SQLDataType.SMALLINT, this, "");

    private BucketCount(Name alias, Table<BucketCountRecord> aliased) {
        this(alias, aliased, null);
    }

    private BucketCount(Name alias, Table<BucketCountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"bucket_count\" as  SELECT bucket_count.idbucket_count,\n    bucket_count.idbucket,\n    bucket_count.idsite,\n    bucket_count.start_date,\n    bucket_count.value,\n    bucket_count.snapshot\n   FROM live.bucket_count;"));
    }

    /**
     * Create an aliased <code>live_core.bucket_count</code> table reference
     */
    public BucketCount(String alias) {
        this(DSL.name(alias), BUCKET_COUNT);
    }

    /**
     * Create an aliased <code>live_core.bucket_count</code> table reference
     */
    public BucketCount(Name alias) {
        this(alias, BUCKET_COUNT);
    }

    /**
     * Create a <code>live_core.bucket_count</code> table reference
     */
    public BucketCount() {
        this(DSL.name("bucket_count"), null);
    }

    public <O extends Record> BucketCount(Table<O> child, ForeignKey<O, BucketCountRecord> key) {
        super(child, key, BUCKET_COUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public BucketCount as(String alias) {
        return new BucketCount(DSL.name(alias), this);
    }

    @Override
    public BucketCount as(Name alias) {
        return new BucketCount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BucketCount rename(String name) {
        return new BucketCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BucketCount rename(Name name) {
        return new BucketCount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, BigDecimal, Integer, LocalTime, BigDecimal, Short> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
