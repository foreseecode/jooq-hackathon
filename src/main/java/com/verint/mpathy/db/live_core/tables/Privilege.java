/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.PrivilegeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Privilege extends TableImpl<PrivilegeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.privilege</code>
     */
    public static final Privilege PRIVILEGE = new Privilege();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PrivilegeRecord> getRecordType() {
        return PrivilegeRecord.class;
    }

    /**
     * The column <code>live_core.privilege.idprivilege</code>.
     */
    public final TableField<PrivilegeRecord, Long> IDPRIVILEGE = createField(DSL.name("idprivilege"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.privilege.name</code>.
     */
    public final TableField<PrivilegeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.privilege.description</code>.
     */
    public final TableField<PrivilegeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.privilege.display_name</code>.
     */
    public final TableField<PrivilegeRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.CLOB, this, "");

    private Privilege(Name alias, Table<PrivilegeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Privilege(Name alias, Table<PrivilegeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"privilege\" as  SELECT privilege.idprivilege,\n    privilege.name,\n    privilege.description,\n    privilege.display_name\n   FROM live.privilege;"));
    }

    /**
     * Create an aliased <code>live_core.privilege</code> table reference
     */
    public Privilege(String alias) {
        this(DSL.name(alias), PRIVILEGE);
    }

    /**
     * Create an aliased <code>live_core.privilege</code> table reference
     */
    public Privilege(Name alias) {
        this(alias, PRIVILEGE);
    }

    /**
     * Create a <code>live_core.privilege</code> table reference
     */
    public Privilege() {
        this(DSL.name("privilege"), null);
    }

    public <O extends Record> Privilege(Table<O> child, ForeignKey<O, PrivilegeRecord> key) {
        super(child, key, PRIVILEGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public Privilege as(String alias) {
        return new Privilege(DSL.name(alias), this);
    }

    @Override
    public Privilege as(Name alias) {
        return new Privilege(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Privilege rename(String name) {
        return new Privilege(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Privilege rename(Name name) {
        return new Privilege(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
