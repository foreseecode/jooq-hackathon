/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.MapVisibleRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MapVisible extends TableImpl<MapVisibleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.map_visible</code>
     */
    public static final MapVisible MAP_VISIBLE = new MapVisible();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MapVisibleRecord> getRecordType() {
        return MapVisibleRecord.class;
    }

    /**
     * The column <code>live.map_visible.idpage</code>.
     */
    public final TableField<MapVisibleRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.map_visible.idsession</code>.
     */
    public final TableField<MapVisibleRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.map_visible.idsite</code>.
     */
    public final TableField<MapVisibleRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<MapVisibleRecord, Object> VIEWPORT = createField(DSL.name("viewport"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"path\""), this, "");

    /**
     * The column <code>live.map_visible.time</code>.
     */
    public final TableField<MapVisibleRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.map_visible.x1</code>.
     */
    public final TableField<MapVisibleRecord, Long> X1 = createField(DSL.name("x1"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.map_visible.y1</code>.
     */
    public final TableField<MapVisibleRecord, Long> Y1 = createField(DSL.name("y1"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.map_visible.x2</code>.
     */
    public final TableField<MapVisibleRecord, Long> X2 = createField(DSL.name("x2"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.map_visible.y2</code>.
     */
    public final TableField<MapVisibleRecord, Long> Y2 = createField(DSL.name("y2"), SQLDataType.BIGINT, this, "");

    private MapVisible(Name alias, Table<MapVisibleRecord> aliased) {
        this(alias, aliased, null);
    }

    private MapVisible(Name alias, Table<MapVisibleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.map_visible</code> table reference
     */
    public MapVisible(String alias) {
        this(DSL.name(alias), MAP_VISIBLE);
    }

    /**
     * Create an aliased <code>live.map_visible</code> table reference
     */
    public MapVisible(Name alias) {
        this(alias, MAP_VISIBLE);
    }

    /**
     * Create a <code>live.map_visible</code> table reference
     */
    public MapVisible() {
        this(DSL.name("map_visible"), null);
    }

    public <O extends Record> MapVisible(Table<O> child, ForeignKey<O, MapVisibleRecord> key) {
        super(child, key, MAP_VISIBLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public MapVisible as(String alias) {
        return new MapVisible(DSL.name(alias), this);
    }

    @Override
    public MapVisible as(Name alias) {
        return new MapVisible(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MapVisible rename(String name) {
        return new MapVisible(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MapVisible rename(Name name) {
        return new MapVisible(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<BigDecimal, BigDecimal, Integer, Object, Long, Long, Long, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
