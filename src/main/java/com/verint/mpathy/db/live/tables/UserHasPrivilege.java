/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.UserHasPrivilegeRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserHasPrivilege extends TableImpl<UserHasPrivilegeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.user_has_privilege</code>
     */
    public static final UserHasPrivilege USER_HAS_PRIVILEGE = new UserHasPrivilege();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserHasPrivilegeRecord> getRecordType() {
        return UserHasPrivilegeRecord.class;
    }

    /**
     * The column <code>live.user_has_privilege.iduser</code>. user ident from
     * user table
     */
    public final TableField<UserHasPrivilegeRecord, BigDecimal> IDUSER = createField(DSL.name("iduser"), SQLDataType.NUMERIC.nullable(false), this, "user ident from user table");

    /**
     * The column <code>live.user_has_privilege.idprivilege</code>. privilege
     * ident from privilege table
     */
    public final TableField<UserHasPrivilegeRecord, Long> IDPRIVILEGE = createField(DSL.name("idprivilege"), SQLDataType.BIGINT.nullable(false), this, "privilege ident from privilege table");

    private UserHasPrivilege(Name alias, Table<UserHasPrivilegeRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserHasPrivilege(Name alias, Table<UserHasPrivilegeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.user_has_privilege</code> table reference
     */
    public UserHasPrivilege(String alias) {
        this(DSL.name(alias), USER_HAS_PRIVILEGE);
    }

    /**
     * Create an aliased <code>live.user_has_privilege</code> table reference
     */
    public UserHasPrivilege(Name alias) {
        this(alias, USER_HAS_PRIVILEGE);
    }

    /**
     * Create a <code>live.user_has_privilege</code> table reference
     */
    public UserHasPrivilege() {
        this(DSL.name("user_has_privilege"), null);
    }

    public <O extends Record> UserHasPrivilege(Table<O> child, ForeignKey<O, UserHasPrivilegeRecord> key) {
        super(child, key, USER_HAS_PRIVILEGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public UserHasPrivilege as(String alias) {
        return new UserHasPrivilege(DSL.name(alias), this);
    }

    @Override
    public UserHasPrivilege as(Name alias) {
        return new UserHasPrivilege(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserHasPrivilege rename(String name) {
        return new UserHasPrivilege(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserHasPrivilege rename(Name name) {
        return new UserHasPrivilege(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<BigDecimal, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
