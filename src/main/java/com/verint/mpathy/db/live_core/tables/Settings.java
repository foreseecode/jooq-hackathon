/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.SettingsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Settings extends TableImpl<SettingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.settings</code>
     */
    public static final Settings SETTINGS = new Settings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SettingsRecord> getRecordType() {
        return SettingsRecord.class;
    }

    /**
     * The column <code>live_core.settings.idsettings</code>.
     */
    public final TableField<SettingsRecord, Long> IDSETTINGS = createField(DSL.name("idsettings"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.settings.iduser</code>.
     */
    public final TableField<SettingsRecord, Long> IDUSER = createField(DSL.name("iduser"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.settings.idsite</code>.
     */
    public final TableField<SettingsRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.settings.scope</code>.
     */
    public final TableField<SettingsRecord, String> SCOPE = createField(DSL.name("scope"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.settings.key</code>.
     */
    public final TableField<SettingsRecord, String> KEY = createField(DSL.name("key"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.settings.value</code>.
     */
    public final TableField<SettingsRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    private Settings(Name alias, Table<SettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Settings(Name alias, Table<SettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"settings\" as  SELECT settings.idsettings,\n    settings.iduser,\n    settings.idsite,\n    settings.scope,\n    settings.key,\n    settings.value\n   FROM live.settings;"));
    }

    /**
     * Create an aliased <code>live_core.settings</code> table reference
     */
    public Settings(String alias) {
        this(DSL.name(alias), SETTINGS);
    }

    /**
     * Create an aliased <code>live_core.settings</code> table reference
     */
    public Settings(Name alias) {
        this(alias, SETTINGS);
    }

    /**
     * Create a <code>live_core.settings</code> table reference
     */
    public Settings() {
        this(DSL.name("settings"), null);
    }

    public <O extends Record> Settings(Table<O> child, ForeignKey<O, SettingsRecord> key) {
        super(child, key, SETTINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public Settings as(String alias) {
        return new Settings(DSL.name(alias), this);
    }

    @Override
    public Settings as(Name alias) {
        return new Settings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Settings rename(String name) {
        return new Settings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Settings rename(Name name) {
        return new Settings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Integer, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
