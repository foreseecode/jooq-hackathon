/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.BucketRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bucket extends TableImpl<BucketRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.bucket</code>
     */
    public static final Bucket BUCKET = new Bucket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BucketRecord> getRecordType() {
        return BucketRecord.class;
    }

    /**
     * The column <code>live_core.bucket.idbucket</code>.
     */
    public final TableField<BucketRecord, Long> IDBUCKET = createField(DSL.name("idbucket"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.bucket.idsite</code>.
     */
    public final TableField<BucketRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.bucket.type</code>.
     */
    public final TableField<BucketRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.bucket.retention</code>.
     */
    public final TableField<BucketRecord, Short> RETENTION = createField(DSL.name("retention"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.bucket.limit</code>.
     */
    public final TableField<BucketRecord, Long> LIMIT = createField(DSL.name("limit"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.bucket.alert_threshold</code>.
     */
    public final TableField<BucketRecord, Short> ALERT_THRESHOLD = createField(DSL.name("alert_threshold"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.bucket.count_delay</code>.
     */
    public final TableField<BucketRecord, Short> COUNT_DELAY = createField(DSL.name("count_delay"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.bucket.priority</code>.
     */
    public final TableField<BucketRecord, Long> PRIORITY = createField(DSL.name("priority"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.bucket.name</code>.
     */
    public final TableField<BucketRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    private Bucket(Name alias, Table<BucketRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bucket(Name alias, Table<BucketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"bucket\" as  SELECT bucket.idbucket,\n    bucket.idsite,\n    bucket.type,\n    bucket.retention,\n    bucket.\"limit\",\n    bucket.alert_threshold,\n    bucket.count_delay,\n    bucket.priority,\n    bucket.name\n   FROM live.bucket;"));
    }

    /**
     * Create an aliased <code>live_core.bucket</code> table reference
     */
    public Bucket(String alias) {
        this(DSL.name(alias), BUCKET);
    }

    /**
     * Create an aliased <code>live_core.bucket</code> table reference
     */
    public Bucket(Name alias) {
        this(alias, BUCKET);
    }

    /**
     * Create a <code>live_core.bucket</code> table reference
     */
    public Bucket() {
        this(DSL.name("bucket"), null);
    }

    public <O extends Record> Bucket(Table<O> child, ForeignKey<O, BucketRecord> key) {
        super(child, key, BUCKET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public Bucket as(String alias) {
        return new Bucket(DSL.name(alias), this);
    }

    @Override
    public Bucket as(Name alias) {
        return new Bucket(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bucket rename(String name) {
        return new Bucket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bucket rename(Name name) {
        return new Bucket(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, String, Short, Long, Short, Short, Long, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
