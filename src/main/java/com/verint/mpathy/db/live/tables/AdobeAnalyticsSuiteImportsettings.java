/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.AdobeAnalyticsSuiteImportsettingsRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdobeAnalyticsSuiteImportsettings extends TableImpl<AdobeAnalyticsSuiteImportsettingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>live.adobe_analytics_suite_importsettings</code>
     */
    public static final AdobeAnalyticsSuiteImportsettings ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS = new AdobeAnalyticsSuiteImportsettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdobeAnalyticsSuiteImportsettingsRecord> getRecordType() {
        return AdobeAnalyticsSuiteImportsettingsRecord.class;
    }

    /**
     * The column
     * <code>live.adobe_analytics_suite_importsettings.idimport</code>. the
     * primary key of the import settings table.
     */
    public final TableField<AdobeAnalyticsSuiteImportsettingsRecord, Long> IDIMPORT = createField(DSL.name("idimport"), SQLDataType.BIGINT.nullable(false).identity(true), this, "the primary key of the import settings table.");

    /**
     * The column
     * <code>live.adobe_analytics_suite_importsettings.idsuite</code>.
     * References to the primary key of table "adobe_analytics_suite".
     */
    public final TableField<AdobeAnalyticsSuiteImportsettingsRecord, BigDecimal> IDSUITE = createField(DSL.name("idsuite"), SQLDataType.NUMERIC.nullable(false), this, "References to the primary key of table \"adobe_analytics_suite\".");

    /**
     * The column <code>live.adobe_analytics_suite_importsettings.rsid</code>.
     * the adobe analytics report suite id.
     */
    public final TableField<AdobeAnalyticsSuiteImportsettingsRecord, String> RSID = createField(DSL.name("rsid"), SQLDataType.CLOB.nullable(false), this, "the adobe analytics report suite id.");

    /**
     * The column
     * <code>live.adobe_analytics_suite_importsettings.username</code>. the
     * username needed for authentication for the adobe analytics report suite.
     */
    public final TableField<AdobeAnalyticsSuiteImportsettingsRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "the username needed for authentication for the adobe analytics report suite.");

    /**
     * The column <code>live.adobe_analytics_suite_importsettings.secret</code>.
     * the secret needed for authentication for the adobe analytics report
     * suite.
     */
    public final TableField<AdobeAnalyticsSuiteImportsettingsRecord, String> SECRET = createField(DSL.name("secret"), SQLDataType.CLOB.nullable(false), this, "the secret needed for authentication for the adobe analytics report suite.");

    /**
     * The column <code>live.adobe_analytics_suite_importsettings.evar</code>.
     * the conversion variable (evar) to generate the analytics report for.
     */
    public final TableField<AdobeAnalyticsSuiteImportsettingsRecord, String> EVAR = createField(DSL.name("evar"), SQLDataType.CLOB.nullable(false), this, "the conversion variable (evar) to generate the analytics report for.");

    /**
     * The column <code>live.adobe_analytics_suite_importsettings.metric</code>.
     * the analytics metric to generate the analytics reports for.
     */
    public final TableField<AdobeAnalyticsSuiteImportsettingsRecord, String> METRIC = createField(DSL.name("metric"), SQLDataType.CLOB, this, "the analytics metric to generate the analytics reports for.");

    /**
     * The column
     * <code>live.adobe_analytics_suite_importsettings.endpoint</code>. the
     * endpoint to ask for the adobe analytics report suite.
     */
    public final TableField<AdobeAnalyticsSuiteImportsettingsRecord, String> ENDPOINT = createField(DSL.name("endpoint"), SQLDataType.CLOB.nullable(false), this, "the endpoint to ask for the adobe analytics report suite.");

    private AdobeAnalyticsSuiteImportsettings(Name alias, Table<AdobeAnalyticsSuiteImportsettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdobeAnalyticsSuiteImportsettings(Name alias, Table<AdobeAnalyticsSuiteImportsettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.adobe_analytics_suite_importsettings</code>
     * table reference
     */
    public AdobeAnalyticsSuiteImportsettings(String alias) {
        this(DSL.name(alias), ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS);
    }

    /**
     * Create an aliased <code>live.adobe_analytics_suite_importsettings</code>
     * table reference
     */
    public AdobeAnalyticsSuiteImportsettings(Name alias) {
        this(alias, ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS);
    }

    /**
     * Create a <code>live.adobe_analytics_suite_importsettings</code> table
     * reference
     */
    public AdobeAnalyticsSuiteImportsettings() {
        this(DSL.name("adobe_analytics_suite_importsettings"), null);
    }

    public <O extends Record> AdobeAnalyticsSuiteImportsettings(Table<O> child, ForeignKey<O, AdobeAnalyticsSuiteImportsettingsRecord> key) {
        super(child, key, ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<AdobeAnalyticsSuiteImportsettingsRecord, Long> getIdentity() {
        return (Identity<AdobeAnalyticsSuiteImportsettingsRecord, Long>) super.getIdentity();
    }

    @Override
    public AdobeAnalyticsSuiteImportsettings as(String alias) {
        return new AdobeAnalyticsSuiteImportsettings(DSL.name(alias), this);
    }

    @Override
    public AdobeAnalyticsSuiteImportsettings as(Name alias) {
        return new AdobeAnalyticsSuiteImportsettings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdobeAnalyticsSuiteImportsettings rename(String name) {
        return new AdobeAnalyticsSuiteImportsettings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdobeAnalyticsSuiteImportsettings rename(Name name) {
        return new AdobeAnalyticsSuiteImportsettings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, BigDecimal, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
