/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.Cp_1SessionRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cp_1Session extends TableImpl<Cp_1SessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.cp_1_session</code>
     */
    public static final Cp_1Session CP_1_SESSION = new Cp_1Session();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Cp_1SessionRecord> getRecordType() {
        return Cp_1SessionRecord.class;
    }

    /**
     * The column <code>live.cp_1_session.idsession</code>.
     */
    public final TableField<Cp_1SessionRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.cp_1_session.idcp</code>.
     */
    public final TableField<Cp_1SessionRecord, Long> IDCP = createField(DSL.name("idcp"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.cp_1_session.idvalue</code>.
     */
    public final TableField<Cp_1SessionRecord, BigDecimal> IDVALUE = createField(DSL.name("idvalue"), SQLDataType.NUMERIC, this, "");

    private Cp_1Session(Name alias, Table<Cp_1SessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cp_1Session(Name alias, Table<Cp_1SessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.cp_1_session</code> table reference
     */
    public Cp_1Session(String alias) {
        this(DSL.name(alias), CP_1_SESSION);
    }

    /**
     * Create an aliased <code>live.cp_1_session</code> table reference
     */
    public Cp_1Session(Name alias) {
        this(alias, CP_1_SESSION);
    }

    /**
     * Create a <code>live.cp_1_session</code> table reference
     */
    public Cp_1Session() {
        this(DSL.name("cp_1_session"), null);
    }

    public <O extends Record> Cp_1Session(Table<O> child, ForeignKey<O, Cp_1SessionRecord> key) {
        super(child, key, CP_1_SESSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Cp_1Session as(String alias) {
        return new Cp_1Session(DSL.name(alias), this);
    }

    @Override
    public Cp_1Session as(Name alias) {
        return new Cp_1Session(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cp_1Session rename(String name) {
        return new Cp_1Session(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cp_1Session rename(Name name) {
        return new Cp_1Session(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<BigDecimal, Long, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
