/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables.records;


import com.verint.mpathy.db.live.tables.QuestionnaireHasFile;

import org.jooq.Field;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.TableRecordImpl;


/**
 * Reference table between a questionnaire element (1) and his files (n). For
 * each file a document is referenced (content inside cassandra).
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionnaireHasFileRecord extends TableRecordImpl<QuestionnaireHasFileRecord> implements Record6<Long, Integer, Long, Long, Long, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>live.questionnaire_has_file.idquestionnaire_has_file</code>.
     * Primary key of the reference table.
     */
    public void setIdquestionnaireHasFile(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>live.questionnaire_has_file.idquestionnaire_has_file</code>.
     * Primary key of the reference table.
     */
    public Long getIdquestionnaireHasFile() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live.questionnaire_has_file.idsite</code>. Reference key
     * to the site table.
     */
    public void setIdsite(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>live.questionnaire_has_file.idsite</code>. Reference key
     * to the site table.
     */
    public Integer getIdsite() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>live.questionnaire_has_file.idquestionnaire</code>.
     * Reference key to the questionnaire table.
     */
    public void setIdquestionnaire(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>live.questionnaire_has_file.idquestionnaire</code>.
     * Reference key to the questionnaire table.
     */
    public Long getIdquestionnaire() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>live.questionnaire_has_file.idquestionnaire_element</code>.
     * Reference key to the questionnaire element table.
     */
    public void setIdquestionnaireElement(Long value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>live.questionnaire_has_file.idquestionnaire_element</code>.
     * Reference key to the questionnaire element table.
     */
    public Long getIdquestionnaireElement() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>live.questionnaire_has_file.iddocument</code>. Reference
     * key to the document table.
     */
    public void setIddocument(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>live.questionnaire_has_file.iddocument</code>. Reference
     * key to the document table.
     */
    public Long getIddocument() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>live.questionnaire_has_file.providerstate</code>. State
     * of the file to upload (cdn): 0 -&gt; Ignore provider state of document. |
     * 10 -&gt; Need upload | 11 -&gt; Upload successful | 20 -&gt; Delete from
     * cdn
     */
    public void setProviderstate(Short value) {
        set(5, value);
    }

    /**
     * Getter for <code>live.questionnaire_has_file.providerstate</code>. State
     * of the file to upload (cdn): 0 -&gt; Ignore provider state of document. |
     * 10 -&gt; Need upload | 11 -&gt; Upload successful | 20 -&gt; Delete from
     * cdn
     */
    public Short getProviderstate() {
        return (Short) get(5);
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Integer, Long, Long, Long, Short> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, Integer, Long, Long, Long, Short> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return QuestionnaireHasFile.QUESTIONNAIRE_HAS_FILE.IDQUESTIONNAIRE_HAS_FILE;
    }

    @Override
    public Field<Integer> field2() {
        return QuestionnaireHasFile.QUESTIONNAIRE_HAS_FILE.IDSITE;
    }

    @Override
    public Field<Long> field3() {
        return QuestionnaireHasFile.QUESTIONNAIRE_HAS_FILE.IDQUESTIONNAIRE;
    }

    @Override
    public Field<Long> field4() {
        return QuestionnaireHasFile.QUESTIONNAIRE_HAS_FILE.IDQUESTIONNAIRE_ELEMENT;
    }

    @Override
    public Field<Long> field5() {
        return QuestionnaireHasFile.QUESTIONNAIRE_HAS_FILE.IDDOCUMENT;
    }

    @Override
    public Field<Short> field6() {
        return QuestionnaireHasFile.QUESTIONNAIRE_HAS_FILE.PROVIDERSTATE;
    }

    @Override
    public Long component1() {
        return getIdquestionnaireHasFile();
    }

    @Override
    public Integer component2() {
        return getIdsite();
    }

    @Override
    public Long component3() {
        return getIdquestionnaire();
    }

    @Override
    public Long component4() {
        return getIdquestionnaireElement();
    }

    @Override
    public Long component5() {
        return getIddocument();
    }

    @Override
    public Short component6() {
        return getProviderstate();
    }

    @Override
    public Long value1() {
        return getIdquestionnaireHasFile();
    }

    @Override
    public Integer value2() {
        return getIdsite();
    }

    @Override
    public Long value3() {
        return getIdquestionnaire();
    }

    @Override
    public Long value4() {
        return getIdquestionnaireElement();
    }

    @Override
    public Long value5() {
        return getIddocument();
    }

    @Override
    public Short value6() {
        return getProviderstate();
    }

    @Override
    public QuestionnaireHasFileRecord value1(Long value) {
        setIdquestionnaireHasFile(value);
        return this;
    }

    @Override
    public QuestionnaireHasFileRecord value2(Integer value) {
        setIdsite(value);
        return this;
    }

    @Override
    public QuestionnaireHasFileRecord value3(Long value) {
        setIdquestionnaire(value);
        return this;
    }

    @Override
    public QuestionnaireHasFileRecord value4(Long value) {
        setIdquestionnaireElement(value);
        return this;
    }

    @Override
    public QuestionnaireHasFileRecord value5(Long value) {
        setIddocument(value);
        return this;
    }

    @Override
    public QuestionnaireHasFileRecord value6(Short value) {
        setProviderstate(value);
        return this;
    }

    @Override
    public QuestionnaireHasFileRecord values(Long value1, Integer value2, Long value3, Long value4, Long value5, Short value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QuestionnaireHasFileRecord
     */
    public QuestionnaireHasFileRecord() {
        super(QuestionnaireHasFile.QUESTIONNAIRE_HAS_FILE);
    }

    /**
     * Create a detached, initialised QuestionnaireHasFileRecord
     */
    public QuestionnaireHasFileRecord(Long idquestionnaireHasFile, Integer idsite, Long idquestionnaire, Long idquestionnaireElement, Long iddocument, Short providerstate) {
        super(QuestionnaireHasFile.QUESTIONNAIRE_HAS_FILE);

        setIdquestionnaireHasFile(idquestionnaireHasFile);
        setIdsite(idsite);
        setIdquestionnaire(idquestionnaire);
        setIdquestionnaireElement(idquestionnaireElement);
        setIddocument(iddocument);
        setProviderstate(providerstate);
    }
}
