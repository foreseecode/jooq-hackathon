/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.AdobeAnalyticsSuiteRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdobeAnalyticsSuite extends TableImpl<AdobeAnalyticsSuiteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.adobe_analytics_suite</code>
     */
    public static final AdobeAnalyticsSuite ADOBE_ANALYTICS_SUITE = new AdobeAnalyticsSuite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdobeAnalyticsSuiteRecord> getRecordType() {
        return AdobeAnalyticsSuiteRecord.class;
    }

    /**
     * The column <code>live.adobe_analytics_suite.idsuite</code>. the primary
     * key. This serves as a reference to the table "adobe_analytics_filter".
     */
    public final TableField<AdobeAnalyticsSuiteRecord, Long> IDSUITE = createField(DSL.name("idsuite"), SQLDataType.BIGINT.nullable(false).identity(true), this, "the primary key. This serves as a reference to the table \"adobe_analytics_filter\".");

    /**
     * The column <code>live.adobe_analytics_suite.idsite</code>. this serves as
     * a FK to the table "site".
     */
    public final TableField<AdobeAnalyticsSuiteRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "this serves as a FK to the table \"site\".");

    /**
     * The column <code>live.adobe_analytics_suite.segment_regex</code>. the
     * regex to filter the adobe analytics report suite segments for relevant
     * mpathy segments.
     */
    public final TableField<AdobeAnalyticsSuiteRecord, String> SEGMENT_REGEX = createField(DSL.name("segment_regex"), SQLDataType.CLOB.nullable(false), this, "the regex to filter the adobe analytics report suite segments for relevant mpathy segments.");

    /**
     * The column
     * <code>live.adobe_analytics_suite.visitor_data_ref_column</code>. defines
     * the visitor column the imported value will be referenced to (can be
     * null).
     */
    public final TableField<AdobeAnalyticsSuiteRecord, String> VISITOR_DATA_REF_COLUMN = createField(DSL.name("visitor_data_ref_column"), SQLDataType.CLOB, this, "defines the visitor column the imported value will be referenced to (can be null).");

    /**
     * The column <code>live.adobe_analytics_suite.segment_regex_enable</code>.
     * all segments that match this filter regex will be automatically enabled
     * for import and in the interface.
     */
    public final TableField<AdobeAnalyticsSuiteRecord, String> SEGMENT_REGEX_ENABLE = createField(DSL.name("segment_regex_enable"), SQLDataType.CLOB.defaultValue(DSL.field("'.*mpathy_.*'::text", SQLDataType.CLOB)), this, "all segments that match this filter regex will be automatically enabled for import and in the interface.");

    private AdobeAnalyticsSuite(Name alias, Table<AdobeAnalyticsSuiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdobeAnalyticsSuite(Name alias, Table<AdobeAnalyticsSuiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.adobe_analytics_suite</code> table reference
     */
    public AdobeAnalyticsSuite(String alias) {
        this(DSL.name(alias), ADOBE_ANALYTICS_SUITE);
    }

    /**
     * Create an aliased <code>live.adobe_analytics_suite</code> table reference
     */
    public AdobeAnalyticsSuite(Name alias) {
        this(alias, ADOBE_ANALYTICS_SUITE);
    }

    /**
     * Create a <code>live.adobe_analytics_suite</code> table reference
     */
    public AdobeAnalyticsSuite() {
        this(DSL.name("adobe_analytics_suite"), null);
    }

    public <O extends Record> AdobeAnalyticsSuite(Table<O> child, ForeignKey<O, AdobeAnalyticsSuiteRecord> key) {
        super(child, key, ADOBE_ANALYTICS_SUITE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<AdobeAnalyticsSuiteRecord, Long> getIdentity() {
        return (Identity<AdobeAnalyticsSuiteRecord, Long>) super.getIdentity();
    }

    @Override
    public AdobeAnalyticsSuite as(String alias) {
        return new AdobeAnalyticsSuite(DSL.name(alias), this);
    }

    @Override
    public AdobeAnalyticsSuite as(Name alias) {
        return new AdobeAnalyticsSuite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdobeAnalyticsSuite rename(String name) {
        return new AdobeAnalyticsSuite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdobeAnalyticsSuite rename(Name name) {
        return new AdobeAnalyticsSuite(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
