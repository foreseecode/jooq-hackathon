/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.ResourceExcludeHostRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResourceExcludeHost extends TableImpl<ResourceExcludeHostRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.resource_exclude_host</code>
     */
    public static final ResourceExcludeHost RESOURCE_EXCLUDE_HOST = new ResourceExcludeHost();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResourceExcludeHostRecord> getRecordType() {
        return ResourceExcludeHostRecord.class;
    }

    /**
     * The column <code>live_core.resource_exclude_host.idexclude_host</code>.
     */
    public final TableField<ResourceExcludeHostRecord, Short> IDEXCLUDE_HOST = createField(DSL.name("idexclude_host"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.resource_exclude_host.host_name</code>.
     */
    public final TableField<ResourceExcludeHostRecord, String> HOST_NAME = createField(DSL.name("host_name"), SQLDataType.CLOB, this, "");

    private ResourceExcludeHost(Name alias, Table<ResourceExcludeHostRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResourceExcludeHost(Name alias, Table<ResourceExcludeHostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"resource_exclude_host\" as  SELECT resource_exclude_host.idexclude_host,\n    resource_exclude_host.host_name\n   FROM live.resource_exclude_host;"));
    }

    /**
     * Create an aliased <code>live_core.resource_exclude_host</code> table
     * reference
     */
    public ResourceExcludeHost(String alias) {
        this(DSL.name(alias), RESOURCE_EXCLUDE_HOST);
    }

    /**
     * Create an aliased <code>live_core.resource_exclude_host</code> table
     * reference
     */
    public ResourceExcludeHost(Name alias) {
        this(alias, RESOURCE_EXCLUDE_HOST);
    }

    /**
     * Create a <code>live_core.resource_exclude_host</code> table reference
     */
    public ResourceExcludeHost() {
        this(DSL.name("resource_exclude_host"), null);
    }

    public <O extends Record> ResourceExcludeHost(Table<O> child, ForeignKey<O, ResourceExcludeHostRecord> key) {
        super(child, key, RESOURCE_EXCLUDE_HOST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public ResourceExcludeHost as(String alias) {
        return new ResourceExcludeHost(DSL.name(alias), this);
    }

    @Override
    public ResourceExcludeHost as(Name alias) {
        return new ResourceExcludeHost(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceExcludeHost rename(String name) {
        return new ResourceExcludeHost(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceExcludeHost rename(Name name) {
        return new ResourceExcludeHost(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Short, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
