/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.UnmappedPageRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Holds info about pages for a site that are not mapped to a tracking config
 * page name yet.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UnmappedPage extends TableImpl<UnmappedPageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.unmapped_page</code>
     */
    public static final UnmappedPage UNMAPPED_PAGE = new UnmappedPage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UnmappedPageRecord> getRecordType() {
        return UnmappedPageRecord.class;
    }

    /**
     * The column <code>live.unmapped_page.idpage</code>. Foreign key reference
     * to the page which have a unmapped page name and url combination.
     */
    public final TableField<UnmappedPageRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC.nullable(false), this, "Foreign key reference to the page which have a unmapped page name and url combination.");

    /**
     * The column <code>live.unmapped_page.idsite</code>. Foreign key referent
     * to the defined site.
     */
    public final TableField<UnmappedPageRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "Foreign key referent to the defined site.");

    /**
     * The column <code>live.unmapped_page.idtracking_config</code>. Foreign key
     * referent to the setup assistant tracking configuration.
     */
    public final TableField<UnmappedPageRecord, Integer> IDTRACKING_CONFIG = createField(DSL.name("idtracking_config"), SQLDataType.INTEGER.nullable(false), this, "Foreign key referent to the setup assistant tracking configuration.");

    private UnmappedPage(Name alias, Table<UnmappedPageRecord> aliased) {
        this(alias, aliased, null);
    }

    private UnmappedPage(Name alias, Table<UnmappedPageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Holds info about pages for a site that are not mapped to a tracking config page name yet."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.unmapped_page</code> table reference
     */
    public UnmappedPage(String alias) {
        this(DSL.name(alias), UNMAPPED_PAGE);
    }

    /**
     * Create an aliased <code>live.unmapped_page</code> table reference
     */
    public UnmappedPage(Name alias) {
        this(alias, UNMAPPED_PAGE);
    }

    /**
     * Create a <code>live.unmapped_page</code> table reference
     */
    public UnmappedPage() {
        this(DSL.name("unmapped_page"), null);
    }

    public <O extends Record> UnmappedPage(Table<O> child, ForeignKey<O, UnmappedPageRecord> key) {
        super(child, key, UNMAPPED_PAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public UnmappedPage as(String alias) {
        return new UnmappedPage(DSL.name(alias), this);
    }

    @Override
    public UnmappedPage as(Name alias) {
        return new UnmappedPage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UnmappedPage rename(String name) {
        return new UnmappedPage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UnmappedPage rename(Name name) {
        return new UnmappedPage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<BigDecimal, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
