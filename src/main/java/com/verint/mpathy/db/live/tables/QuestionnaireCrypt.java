/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.QuestionnaireCryptRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Reference table between questionnaire (exasol) and crypt_keys (cassandra).
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionnaireCrypt extends TableImpl<QuestionnaireCryptRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.questionnaire_crypt</code>
     */
    public static final QuestionnaireCrypt QUESTIONNAIRE_CRYPT = new QuestionnaireCrypt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionnaireCryptRecord> getRecordType() {
        return QuestionnaireCryptRecord.class;
    }

    /**
     * The column <code>live.questionnaire_crypt.idquestionnaire</code>. Foreign
     * key to the questionnaire settings.
     */
    public final TableField<QuestionnaireCryptRecord, Long> IDQUESTIONNAIRE = createField(DSL.name("idquestionnaire"), SQLDataType.BIGINT.nullable(false), this, "Foreign key to the questionnaire settings.");

    /**
     * The column <code>live.questionnaire_crypt.idcrypt</code>. External key to
     * the cassandra "crypt_keys" table.
     */
    public final TableField<QuestionnaireCryptRecord, Long> IDCRYPT = createField(DSL.name("idcrypt"), SQLDataType.BIGINT.nullable(false).identity(true), this, "External key to the cassandra \"crypt_keys\" table.");

    private QuestionnaireCrypt(Name alias, Table<QuestionnaireCryptRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionnaireCrypt(Name alias, Table<QuestionnaireCryptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Reference table between questionnaire (exasol) and crypt_keys (cassandra)."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.questionnaire_crypt</code> table reference
     */
    public QuestionnaireCrypt(String alias) {
        this(DSL.name(alias), QUESTIONNAIRE_CRYPT);
    }

    /**
     * Create an aliased <code>live.questionnaire_crypt</code> table reference
     */
    public QuestionnaireCrypt(Name alias) {
        this(alias, QUESTIONNAIRE_CRYPT);
    }

    /**
     * Create a <code>live.questionnaire_crypt</code> table reference
     */
    public QuestionnaireCrypt() {
        this(DSL.name("questionnaire_crypt"), null);
    }

    public <O extends Record> QuestionnaireCrypt(Table<O> child, ForeignKey<O, QuestionnaireCryptRecord> key) {
        super(child, key, QUESTIONNAIRE_CRYPT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<QuestionnaireCryptRecord, Long> getIdentity() {
        return (Identity<QuestionnaireCryptRecord, Long>) super.getIdentity();
    }

    @Override
    public QuestionnaireCrypt as(String alias) {
        return new QuestionnaireCrypt(DSL.name(alias), this);
    }

    @Override
    public QuestionnaireCrypt as(Name alias) {
        return new QuestionnaireCrypt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionnaireCrypt rename(String name) {
        return new QuestionnaireCrypt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionnaireCrypt rename(Name name) {
        return new QuestionnaireCrypt(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
