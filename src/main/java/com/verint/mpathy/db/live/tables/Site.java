/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.SiteRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Site extends TableImpl<SiteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.site</code>
     */
    public static final Site SITE = new Site();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SiteRecord> getRecordType() {
        return SiteRecord.class;
    }

    /**
     * The column <code>live.site.idsite</code>.
     */
    public final TableField<SiteRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>live.site.name</code>.
     */
    public final TableField<SiteRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.site.url</code>.
     */
    public final TableField<SiteRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.site.date</code>.
     */
    public final TableField<SiteRecord, LocalTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live.site.archive</code>.
     */
    public final TableField<SiteRecord, Long> ARCHIVE = createField(DSL.name("archive"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.site.layout</code>.
     */
    public final TableField<SiteRecord, String> LAYOUT = createField(DSL.name("layout"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.site.idaccount</code>.
     */
    public final TableField<SiteRecord, Long> IDACCOUNT = createField(DSL.name("idaccount"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.site.ignorekeys</code>.
     */
    public final TableField<SiteRecord, Long> IGNOREKEYS = createField(DSL.name("ignorekeys"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.site.deleted</code>.
     */
    public final TableField<SiteRecord, Long> DELETED = createField(DSL.name("deleted"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.site.devices</code>.
     */
    public final TableField<SiteRecord, String> DEVICES = createField(DSL.name("devices"), SQLDataType.CLOB.defaultValue(DSL.field("'desktop'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>live.site.priority</code>.
     */
    public final TableField<SiteRecord, Short> PRIORITY = createField(DSL.name("priority"), SQLDataType.SMALLINT.defaultValue(DSL.field("0", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>live.site.idserver</code>.
     */
    public final TableField<SiteRecord, Short> IDSERVER = createField(DSL.name("idserver"), SQLDataType.SMALLINT.defaultValue(DSL.field("6", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>live.site.layout_tablet</code>.
     */
    public final TableField<SiteRecord, String> LAYOUT_TABLET = createField(DSL.name("layout_tablet"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.site.layout_phone</code>.
     */
    public final TableField<SiteRecord, String> LAYOUT_PHONE = createField(DSL.name("layout_phone"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.site.foreseesitekey</code>.
     */
    public final TableField<SiteRecord, String> FORESEESITEKEY = createField(DSL.name("foreseesitekey"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.site.idclient</code>.
     */
    public final TableField<SiteRecord, BigDecimal> IDCLIENT = createField(DSL.name("idclient"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.site.alert_email_receivers</code>.
     */
    public final TableField<SiteRecord, String> ALERT_EMAIL_RECEIVERS = createField(DSL.name("alert_email_receivers"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.site.foresee_customer_id</code>. The value is the
     * legacy "site.idclient" value from foresee.
     */
    public final TableField<SiteRecord, String> FORESEE_CUSTOMER_ID = createField(DSL.name("foresee_customer_id"), SQLDataType.CLOB, this, "The value is the legacy \"site.idclient\" value from foresee.");

    private Site(Name alias, Table<SiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Site(Name alias, Table<SiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.site</code> table reference
     */
    public Site(String alias) {
        this(DSL.name(alias), SITE);
    }

    /**
     * Create an aliased <code>live.site</code> table reference
     */
    public Site(Name alias) {
        this(alias, SITE);
    }

    /**
     * Create a <code>live.site</code> table reference
     */
    public Site() {
        this(DSL.name("site"), null);
    }

    public <O extends Record> Site(Table<O> child, ForeignKey<O, SiteRecord> key) {
        super(child, key, SITE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<SiteRecord, Integer> getIdentity() {
        return (Identity<SiteRecord, Integer>) super.getIdentity();
    }

    @Override
    public Site as(String alias) {
        return new Site(DSL.name(alias), this);
    }

    @Override
    public Site as(Name alias) {
        return new Site(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Site rename(String name) {
        return new Site(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Site rename(Name name) {
        return new Site(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Integer, String, String, LocalTime, Long, String, Long, Long, Long, String, Short, Short, String, String, String, BigDecimal, String, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
