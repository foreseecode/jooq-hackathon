/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables.records;


import com.verint.mpathy.db.live.tables.AdobeAnalyticsSuiteImportsettings;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdobeAnalyticsSuiteImportsettingsRecord extends TableRecordImpl<AdobeAnalyticsSuiteImportsettingsRecord> implements Record8<Long, BigDecimal, String, String, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>live.adobe_analytics_suite_importsettings.idimport</code>. the
     * primary key of the import settings table.
     */
    public void setIdimport(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>live.adobe_analytics_suite_importsettings.idimport</code>. the
     * primary key of the import settings table.
     */
    public Long getIdimport() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>live.adobe_analytics_suite_importsettings.idsuite</code>.
     * References to the primary key of table "adobe_analytics_suite".
     */
    public void setIdsuite(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>live.adobe_analytics_suite_importsettings.idsuite</code>.
     * References to the primary key of table "adobe_analytics_suite".
     */
    public BigDecimal getIdsuite() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>live.adobe_analytics_suite_importsettings.rsid</code>.
     * the adobe analytics report suite id.
     */
    public void setRsid(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>live.adobe_analytics_suite_importsettings.rsid</code>.
     * the adobe analytics report suite id.
     */
    public String getRsid() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>live.adobe_analytics_suite_importsettings.username</code>. the
     * username needed for authentication for the adobe analytics report suite.
     */
    public void setUsername(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>live.adobe_analytics_suite_importsettings.username</code>. the
     * username needed for authentication for the adobe analytics report suite.
     */
    public String getUsername() {
        return (String) get(3);
    }

    /**
     * Setter for <code>live.adobe_analytics_suite_importsettings.secret</code>.
     * the secret needed for authentication for the adobe analytics report
     * suite.
     */
    public void setSecret(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>live.adobe_analytics_suite_importsettings.secret</code>.
     * the secret needed for authentication for the adobe analytics report
     * suite.
     */
    public String getSecret() {
        return (String) get(4);
    }

    /**
     * Setter for <code>live.adobe_analytics_suite_importsettings.evar</code>.
     * the conversion variable (evar) to generate the analytics report for.
     */
    public void setEvar(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>live.adobe_analytics_suite_importsettings.evar</code>.
     * the conversion variable (evar) to generate the analytics report for.
     */
    public String getEvar() {
        return (String) get(5);
    }

    /**
     * Setter for <code>live.adobe_analytics_suite_importsettings.metric</code>.
     * the analytics metric to generate the analytics reports for.
     */
    public void setMetric(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>live.adobe_analytics_suite_importsettings.metric</code>.
     * the analytics metric to generate the analytics reports for.
     */
    public String getMetric() {
        return (String) get(6);
    }

    /**
     * Setter for
     * <code>live.adobe_analytics_suite_importsettings.endpoint</code>. the
     * endpoint to ask for the adobe analytics report suite.
     */
    public void setEndpoint(String value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>live.adobe_analytics_suite_importsettings.endpoint</code>. the
     * endpoint to ask for the adobe analytics report suite.
     */
    public String getEndpoint() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, BigDecimal, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, BigDecimal, String, String, String, String, String, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AdobeAnalyticsSuiteImportsettings.ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS.IDIMPORT;
    }

    @Override
    public Field<BigDecimal> field2() {
        return AdobeAnalyticsSuiteImportsettings.ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS.IDSUITE;
    }

    @Override
    public Field<String> field3() {
        return AdobeAnalyticsSuiteImportsettings.ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS.RSID;
    }

    @Override
    public Field<String> field4() {
        return AdobeAnalyticsSuiteImportsettings.ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS.USERNAME;
    }

    @Override
    public Field<String> field5() {
        return AdobeAnalyticsSuiteImportsettings.ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS.SECRET;
    }

    @Override
    public Field<String> field6() {
        return AdobeAnalyticsSuiteImportsettings.ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS.EVAR;
    }

    @Override
    public Field<String> field7() {
        return AdobeAnalyticsSuiteImportsettings.ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS.METRIC;
    }

    @Override
    public Field<String> field8() {
        return AdobeAnalyticsSuiteImportsettings.ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS.ENDPOINT;
    }

    @Override
    public Long component1() {
        return getIdimport();
    }

    @Override
    public BigDecimal component2() {
        return getIdsuite();
    }

    @Override
    public String component3() {
        return getRsid();
    }

    @Override
    public String component4() {
        return getUsername();
    }

    @Override
    public String component5() {
        return getSecret();
    }

    @Override
    public String component6() {
        return getEvar();
    }

    @Override
    public String component7() {
        return getMetric();
    }

    @Override
    public String component8() {
        return getEndpoint();
    }

    @Override
    public Long value1() {
        return getIdimport();
    }

    @Override
    public BigDecimal value2() {
        return getIdsuite();
    }

    @Override
    public String value3() {
        return getRsid();
    }

    @Override
    public String value4() {
        return getUsername();
    }

    @Override
    public String value5() {
        return getSecret();
    }

    @Override
    public String value6() {
        return getEvar();
    }

    @Override
    public String value7() {
        return getMetric();
    }

    @Override
    public String value8() {
        return getEndpoint();
    }

    @Override
    public AdobeAnalyticsSuiteImportsettingsRecord value1(Long value) {
        setIdimport(value);
        return this;
    }

    @Override
    public AdobeAnalyticsSuiteImportsettingsRecord value2(BigDecimal value) {
        setIdsuite(value);
        return this;
    }

    @Override
    public AdobeAnalyticsSuiteImportsettingsRecord value3(String value) {
        setRsid(value);
        return this;
    }

    @Override
    public AdobeAnalyticsSuiteImportsettingsRecord value4(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public AdobeAnalyticsSuiteImportsettingsRecord value5(String value) {
        setSecret(value);
        return this;
    }

    @Override
    public AdobeAnalyticsSuiteImportsettingsRecord value6(String value) {
        setEvar(value);
        return this;
    }

    @Override
    public AdobeAnalyticsSuiteImportsettingsRecord value7(String value) {
        setMetric(value);
        return this;
    }

    @Override
    public AdobeAnalyticsSuiteImportsettingsRecord value8(String value) {
        setEndpoint(value);
        return this;
    }

    @Override
    public AdobeAnalyticsSuiteImportsettingsRecord values(Long value1, BigDecimal value2, String value3, String value4, String value5, String value6, String value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AdobeAnalyticsSuiteImportsettingsRecord
     */
    public AdobeAnalyticsSuiteImportsettingsRecord() {
        super(AdobeAnalyticsSuiteImportsettings.ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS);
    }

    /**
     * Create a detached, initialised AdobeAnalyticsSuiteImportsettingsRecord
     */
    public AdobeAnalyticsSuiteImportsettingsRecord(Long idimport, BigDecimal idsuite, String rsid, String username, String secret, String evar, String metric, String endpoint) {
        super(AdobeAnalyticsSuiteImportsettings.ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS);

        setIdimport(idimport);
        setIdsuite(idsuite);
        setRsid(rsid);
        setUsername(username);
        setSecret(secret);
        setEvar(evar);
        setMetric(metric);
        setEndpoint(endpoint);
    }
}
