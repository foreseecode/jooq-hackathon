/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.SettingsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * General settings table to define key/value pairs at user, site or user/site
 * level.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Settings extends TableImpl<SettingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.settings</code>
     */
    public static final Settings SETTINGS = new Settings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SettingsRecord> getRecordType() {
        return SettingsRecord.class;
    }

    /**
     * The column <code>live.settings.idsettings</code>. Primary key of this
     * table.
     */
    public final TableField<SettingsRecord, Long> IDSETTINGS = createField(DSL.name("idsettings"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Primary key of this table.");

    /**
     * The column <code>live.settings.iduser</code>. Optional foreign key to the
     * user table.
     */
    public final TableField<SettingsRecord, Long> IDUSER = createField(DSL.name("iduser"), SQLDataType.BIGINT, this, "Optional foreign key to the user table.");

    /**
     * The column <code>live.settings.idsite</code>. Optional foreign key to the
     * site table.
     */
    public final TableField<SettingsRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "Optional foreign key to the site table.");

    /**
     * The column <code>live.settings.scope</code>. The scope which define a
     * optional namespace for "key".
     */
    public final TableField<SettingsRecord, String> SCOPE = createField(DSL.name("scope"), SQLDataType.CLOB.defaultValue(DSL.field("'default'::text", SQLDataType.CLOB)), this, "The scope which define a optional namespace for \"key\".");

    /**
     * The column <code>live.settings.key</code>. The key to identify "value"
     * for the "iduser" or "idsite".
     */
    public final TableField<SettingsRecord, String> KEY = createField(DSL.name("key"), SQLDataType.CLOB.nullable(false), this, "The key to identify \"value\" for the \"iduser\" or \"idsite\".");

    /**
     * The column <code>live.settings.value</code>. The concrete value of the
     * settings entry.
     */
    public final TableField<SettingsRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "The concrete value of the settings entry.");

    private Settings(Name alias, Table<SettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Settings(Name alias, Table<SettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("General settings table to define key/value pairs at user, site or user/site level."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.settings</code> table reference
     */
    public Settings(String alias) {
        this(DSL.name(alias), SETTINGS);
    }

    /**
     * Create an aliased <code>live.settings</code> table reference
     */
    public Settings(Name alias) {
        this(alias, SETTINGS);
    }

    /**
     * Create a <code>live.settings</code> table reference
     */
    public Settings() {
        this(DSL.name("settings"), null);
    }

    public <O extends Record> Settings(Table<O> child, ForeignKey<O, SettingsRecord> key) {
        super(child, key, SETTINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<SettingsRecord, Long> getIdentity() {
        return (Identity<SettingsRecord, Long>) super.getIdentity();
    }

    @Override
    public Settings as(String alias) {
        return new Settings(DSL.name(alias), this);
    }

    @Override
    public Settings as(Name alias) {
        return new Settings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Settings rename(String name) {
        return new Settings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Settings rename(Name name) {
        return new Settings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Integer, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
