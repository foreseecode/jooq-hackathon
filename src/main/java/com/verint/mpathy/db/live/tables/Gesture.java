/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.GestureRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table with all known gesture of mobile devices.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Gesture extends TableImpl<GestureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.gesture</code>
     */
    public static final Gesture GESTURE = new Gesture();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GestureRecord> getRecordType() {
        return GestureRecord.class;
    }

    /**
     * The column <code>live.gesture.idgesture</code>. Technical primary key.
     */
    public final TableField<GestureRecord, Integer> IDGESTURE = createField(DSL.name("idgesture"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Technical primary key.");

    /**
     * The column <code>live.gesture.name</code>. Contain the short name of a
     * gesture.
     */
    public final TableField<GestureRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "Contain the short name of a gesture.");

    /**
     * The column <code>live.gesture.active</code>. Flag with the activity state
     * of this gesture.
     */
    public final TableField<GestureRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "Flag with the activity state of this gesture.");

    /**
     * The column <code>live.gesture.direction</code>. Contains the short name
     * of the gesture direction.
     */
    public final TableField<GestureRecord, String> DIRECTION = createField(DSL.name("direction"), SQLDataType.CLOB, this, "Contains the short name of the gesture direction.");

    private Gesture(Name alias, Table<GestureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Gesture(Name alias, Table<GestureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table with all known gesture of mobile devices."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.gesture</code> table reference
     */
    public Gesture(String alias) {
        this(DSL.name(alias), GESTURE);
    }

    /**
     * Create an aliased <code>live.gesture</code> table reference
     */
    public Gesture(Name alias) {
        this(alias, GESTURE);
    }

    /**
     * Create a <code>live.gesture</code> table reference
     */
    public Gesture() {
        this(DSL.name("gesture"), null);
    }

    public <O extends Record> Gesture(Table<O> child, ForeignKey<O, GestureRecord> key) {
        super(child, key, GESTURE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<GestureRecord, Integer> getIdentity() {
        return (Identity<GestureRecord, Integer>) super.getIdentity();
    }

    @Override
    public Gesture as(String alias) {
        return new Gesture(DSL.name(alias), this);
    }

    @Override
    public Gesture as(Name alias) {
        return new Gesture(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Gesture rename(String name) {
        return new Gesture(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Gesture rename(Name name) {
        return new Gesture(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Boolean, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
