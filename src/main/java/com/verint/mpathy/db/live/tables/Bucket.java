/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.BucketRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bucket extends TableImpl<BucketRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.bucket</code>
     */
    public static final Bucket BUCKET = new Bucket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BucketRecord> getRecordType() {
        return BucketRecord.class;
    }

    /**
     * The column <code>live.bucket.idbucket</code>. ident for buckets
     */
    public final TableField<BucketRecord, Long> IDBUCKET = createField(DSL.name("idbucket"), SQLDataType.BIGINT.nullable(false).identity(true), this, "ident for buckets");

    /**
     * The column <code>live.bucket.idsite</code>. foreign key to site table
     */
    public final TableField<BucketRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "foreign key to site table");

    /**
     * The column <code>live.bucket.type</code>. alert threshold for warn mail
     * in percent
     */
    public final TableField<BucketRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "alert threshold for warn mail in percent");

    /**
     * The column <code>live.bucket.retention</code>. retention time for
     * sessions in days
     */
    public final TableField<BucketRecord, Short> RETENTION = createField(DSL.name("retention"), SQLDataType.SMALLINT.defaultValue(DSL.field("90", SQLDataType.SMALLINT)), this, "retention time for sessions in days");

    /**
     * The column <code>live.bucket.limit</code>. limit of sessions to alert, 0
     * is limitless
     */
    public final TableField<BucketRecord, Long> LIMIT = createField(DSL.name("limit"), SQLDataType.BIGINT.defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "limit of sessions to alert, 0 is limitless");

    /**
     * The column <code>live.bucket.alert_threshold</code>. alert threshold for
     * warn mail in percent
     */
    public final TableField<BucketRecord, Short> ALERT_THRESHOLD = createField(DSL.name("alert_threshold"), SQLDataType.SMALLINT.defaultValue(DSL.field("90", SQLDataType.SMALLINT)), this, "alert threshold for warn mail in percent");

    /**
     * The column <code>live.bucket.count_delay</code>. Delay for the
     * calculation stored in "bucket_count" in hours.
     */
    public final TableField<BucketRecord, Short> COUNT_DELAY = createField(DSL.name("count_delay"), SQLDataType.SMALLINT.defaultValue(DSL.field("48", SQLDataType.SMALLINT)), this, "Delay for the calculation stored in \"bucket_count\" in hours.");

    /**
     * The column <code>live.bucket.priority</code>.
     */
    public final TableField<BucketRecord, Long> PRIORITY = createField(DSL.name("priority"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.bucket.name</code>.
     */
    public final TableField<BucketRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    private Bucket(Name alias, Table<BucketRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bucket(Name alias, Table<BucketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.bucket</code> table reference
     */
    public Bucket(String alias) {
        this(DSL.name(alias), BUCKET);
    }

    /**
     * Create an aliased <code>live.bucket</code> table reference
     */
    public Bucket(Name alias) {
        this(alias, BUCKET);
    }

    /**
     * Create a <code>live.bucket</code> table reference
     */
    public Bucket() {
        this(DSL.name("bucket"), null);
    }

    public <O extends Record> Bucket(Table<O> child, ForeignKey<O, BucketRecord> key) {
        super(child, key, BUCKET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<BucketRecord, Long> getIdentity() {
        return (Identity<BucketRecord, Long>) super.getIdentity();
    }

    @Override
    public Bucket as(String alias) {
        return new Bucket(DSL.name(alias), this);
    }

    @Override
    public Bucket as(Name alias) {
        return new Bucket(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bucket rename(String name) {
        return new Bucket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bucket rename(Name name) {
        return new Bucket(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, String, Short, Long, Short, Short, Long, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
