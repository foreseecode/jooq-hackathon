/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.PageNameRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageName extends TableImpl<PageNameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.page_name</code>
     */
    public static final PageName PAGE_NAME = new PageName();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageNameRecord> getRecordType() {
        return PageNameRecord.class;
    }

    /**
     * The column <code>live.page_name.idpage_name</code>.
     */
    public final TableField<PageNameRecord, Long> IDPAGE_NAME = createField(DSL.name("idpage_name"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>live.page_name.idsite</code>.
     */
    public final TableField<PageNameRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live.page_name.name</code>.
     */
    public final TableField<PageNameRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.page_name.description</code>. Description of the
     * page name
     */
    public final TableField<PageNameRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "Description of the page name");

    private PageName(Name alias, Table<PageNameRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageName(Name alias, Table<PageNameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.page_name</code> table reference
     */
    public PageName(String alias) {
        this(DSL.name(alias), PAGE_NAME);
    }

    /**
     * Create an aliased <code>live.page_name</code> table reference
     */
    public PageName(Name alias) {
        this(alias, PAGE_NAME);
    }

    /**
     * Create a <code>live.page_name</code> table reference
     */
    public PageName() {
        this(DSL.name("page_name"), null);
    }

    public <O extends Record> PageName(Table<O> child, ForeignKey<O, PageNameRecord> key) {
        super(child, key, PAGE_NAME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<PageNameRecord, Long> getIdentity() {
        return (Identity<PageNameRecord, Long>) super.getIdentity();
    }

    @Override
    public PageName as(String alias) {
        return new PageName(DSL.name(alias), this);
    }

    @Override
    public PageName as(Name alias) {
        return new PageName(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageName rename(String name) {
        return new PageName(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageName rename(Name name) {
        return new PageName(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
