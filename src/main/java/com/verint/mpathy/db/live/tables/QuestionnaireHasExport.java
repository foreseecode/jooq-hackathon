/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.QuestionnaireHasExportRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionnaireHasExport extends TableImpl<QuestionnaireHasExportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.questionnaire_has_export</code>
     */
    public static final QuestionnaireHasExport QUESTIONNAIRE_HAS_EXPORT = new QuestionnaireHasExport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionnaireHasExportRecord> getRecordType() {
        return QuestionnaireHasExportRecord.class;
    }

    /**
     * The column <code>live.questionnaire_has_export.idquestionnaire</code>.
     * Reference key to the questionnaire table.
     */
    public final TableField<QuestionnaireHasExportRecord, Long> IDQUESTIONNAIRE = createField(DSL.name("idquestionnaire"), SQLDataType.BIGINT.nullable(false), this, "Reference key to the questionnaire table.");

    /**
     * The column <code>live.questionnaire_has_export.idexport</code>. Reference
     * key to the exportqueue table.
     */
    public final TableField<QuestionnaireHasExportRecord, BigDecimal> IDEXPORT = createField(DSL.name("idexport"), SQLDataType.NUMERIC.nullable(false), this, "Reference key to the exportqueue table.");

    /**
     * The column <code>live.questionnaire_has_export.iddocument</code>.
     * Reference key to the document table.
     */
    public final TableField<QuestionnaireHasExportRecord, Long> IDDOCUMENT = createField(DSL.name("iddocument"), SQLDataType.BIGINT, this, "Reference key to the document table.");

    private QuestionnaireHasExport(Name alias, Table<QuestionnaireHasExportRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionnaireHasExport(Name alias, Table<QuestionnaireHasExportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.questionnaire_has_export</code> table
     * reference
     */
    public QuestionnaireHasExport(String alias) {
        this(DSL.name(alias), QUESTIONNAIRE_HAS_EXPORT);
    }

    /**
     * Create an aliased <code>live.questionnaire_has_export</code> table
     * reference
     */
    public QuestionnaireHasExport(Name alias) {
        this(alias, QUESTIONNAIRE_HAS_EXPORT);
    }

    /**
     * Create a <code>live.questionnaire_has_export</code> table reference
     */
    public QuestionnaireHasExport() {
        this(DSL.name("questionnaire_has_export"), null);
    }

    public <O extends Record> QuestionnaireHasExport(Table<O> child, ForeignKey<O, QuestionnaireHasExportRecord> key) {
        super(child, key, QUESTIONNAIRE_HAS_EXPORT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public QuestionnaireHasExport as(String alias) {
        return new QuestionnaireHasExport(DSL.name(alias), this);
    }

    @Override
    public QuestionnaireHasExport as(Name alias) {
        return new QuestionnaireHasExport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionnaireHasExport rename(String name) {
        return new QuestionnaireHasExport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionnaireHasExport rename(Name name) {
        return new QuestionnaireHasExport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, BigDecimal, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
