/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.QuestionnaireAlertRecord;

import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionnaireAlert extends TableImpl<QuestionnaireAlertRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.questionnaire_alert</code>
     */
    public static final QuestionnaireAlert QUESTIONNAIRE_ALERT = new QuestionnaireAlert();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionnaireAlertRecord> getRecordType() {
        return QuestionnaireAlertRecord.class;
    }

    /**
     * The column <code>live.questionnaire_alert.idquestionnaire_alert</code>.
     */
    public final TableField<QuestionnaireAlertRecord, Long> IDQUESTIONNAIRE_ALERT = createField(DSL.name("idquestionnaire_alert"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>live.questionnaire_alert.idquestionnaire</code>.
     * Reference ident to the questionnaire.
     */
    public final TableField<QuestionnaireAlertRecord, Long> IDQUESTIONNAIRE = createField(DSL.name("idquestionnaire"), SQLDataType.BIGINT.nullable(false), this, "Reference ident to the questionnaire.");

    /**
     * The column <code>live.questionnaire_alert.idquestion</code>.
     */
    public final TableField<QuestionnaireAlertRecord, Long> IDQUESTION = createField(DSL.name("idquestion"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.questionnaire_alert.idanswer</code>.
     */
    public final TableField<QuestionnaireAlertRecord, Long> IDANSWER = createField(DSL.name("idanswer"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.questionnaire_alert.textinput</code>. Is the text
     * input necessary or required?
     */
    public final TableField<QuestionnaireAlertRecord, Boolean> TEXTINPUT = createField(DSL.name("textinput"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "Is the text input necessary or required?");

    /**
     * The column <code>live.questionnaire_alert.cronminutes</code>. How often
     * should be checked? every x minutes
     */
    public final TableField<QuestionnaireAlertRecord, Integer> CRONMINUTES = createField(DSL.name("cronminutes"), SQLDataType.INTEGER.defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "How often should be checked? every x minutes");

    /**
     * The column <code>live.questionnaire_alert.template</code>.
     */
    public final TableField<QuestionnaireAlertRecord, String> TEMPLATE = createField(DSL.name("template"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>live.questionnaire_alert.subject</code>.
     */
    public final TableField<QuestionnaireAlertRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>live.questionnaire_alert.email_list</code>.
     */
    public final TableField<QuestionnaireAlertRecord, String> EMAIL_LIST = createField(DSL.name("email_list"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>live.questionnaire_alert.email_bcc_list</code>.
     */
    public final TableField<QuestionnaireAlertRecord, String> EMAIL_BCC_LIST = createField(DSL.name("email_bcc_list"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.questionnaire_alert.last_timestamp</code>.
     */
    public final TableField<QuestionnaireAlertRecord, LocalTime> LAST_TIMESTAMP = createField(DSL.name("last_timestamp"), SQLDataType.LOCALTIME(6), this, "");

    private QuestionnaireAlert(Name alias, Table<QuestionnaireAlertRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionnaireAlert(Name alias, Table<QuestionnaireAlertRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.questionnaire_alert</code> table reference
     */
    public QuestionnaireAlert(String alias) {
        this(DSL.name(alias), QUESTIONNAIRE_ALERT);
    }

    /**
     * Create an aliased <code>live.questionnaire_alert</code> table reference
     */
    public QuestionnaireAlert(Name alias) {
        this(alias, QUESTIONNAIRE_ALERT);
    }

    /**
     * Create a <code>live.questionnaire_alert</code> table reference
     */
    public QuestionnaireAlert() {
        this(DSL.name("questionnaire_alert"), null);
    }

    public <O extends Record> QuestionnaireAlert(Table<O> child, ForeignKey<O, QuestionnaireAlertRecord> key) {
        super(child, key, QUESTIONNAIRE_ALERT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<QuestionnaireAlertRecord, Long> getIdentity() {
        return (Identity<QuestionnaireAlertRecord, Long>) super.getIdentity();
    }

    @Override
    public QuestionnaireAlert as(String alias) {
        return new QuestionnaireAlert(DSL.name(alias), this);
    }

    @Override
    public QuestionnaireAlert as(Name alias) {
        return new QuestionnaireAlert(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionnaireAlert rename(String name) {
        return new QuestionnaireAlert(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionnaireAlert rename(Name name) {
        return new QuestionnaireAlert(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Long, Long, Boolean, Integer, String, String, String, String, LocalTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
