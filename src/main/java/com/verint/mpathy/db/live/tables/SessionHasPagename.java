/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.SessionHasPagenameRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionHasPagename extends TableImpl<SessionHasPagenameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.session_has_pagename</code>
     */
    public static final SessionHasPagename SESSION_HAS_PAGENAME = new SessionHasPagename();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionHasPagenameRecord> getRecordType() {
        return SessionHasPagenameRecord.class;
    }

    /**
     * The column <code>live.session_has_pagename.idsite</code>.
     */
    public final TableField<SessionHasPagenameRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>live.session_has_pagename.idsession</code>.
     */
    public final TableField<SessionHasPagenameRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>live.session_has_pagename.idpage_name</code>.
     */
    public final TableField<SessionHasPagenameRecord, Long> IDPAGE_NAME = createField(DSL.name("idpage_name"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>live.session_has_pagename.occurrence</code>.
     */
    public final TableField<SessionHasPagenameRecord, Integer> OCCURRENCE = createField(DSL.name("occurrence"), SQLDataType.INTEGER, this, "");

    private SessionHasPagename(Name alias, Table<SessionHasPagenameRecord> aliased) {
        this(alias, aliased, null);
    }

    private SessionHasPagename(Name alias, Table<SessionHasPagenameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.session_has_pagename</code> table reference
     */
    public SessionHasPagename(String alias) {
        this(DSL.name(alias), SESSION_HAS_PAGENAME);
    }

    /**
     * Create an aliased <code>live.session_has_pagename</code> table reference
     */
    public SessionHasPagename(Name alias) {
        this(alias, SESSION_HAS_PAGENAME);
    }

    /**
     * Create a <code>live.session_has_pagename</code> table reference
     */
    public SessionHasPagename() {
        this(DSL.name("session_has_pagename"), null);
    }

    public <O extends Record> SessionHasPagename(Table<O> child, ForeignKey<O, SessionHasPagenameRecord> key) {
        super(child, key, SESSION_HAS_PAGENAME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public SessionHasPagename as(String alias) {
        return new SessionHasPagename(DSL.name(alias), this);
    }

    @Override
    public SessionHasPagename as(Name alias) {
        return new SessionHasPagename(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionHasPagename rename(String name) {
        return new SessionHasPagename(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionHasPagename rename(Name name) {
        return new SessionHasPagename(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, BigDecimal, Long, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
