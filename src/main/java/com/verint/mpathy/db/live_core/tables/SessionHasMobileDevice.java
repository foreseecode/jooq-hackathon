/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.SessionHasMobileDeviceRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionHasMobileDevice extends TableImpl<SessionHasMobileDeviceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>live_core.session_has_mobile_device</code>
     */
    public static final SessionHasMobileDevice SESSION_HAS_MOBILE_DEVICE = new SessionHasMobileDevice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionHasMobileDeviceRecord> getRecordType() {
        return SessionHasMobileDeviceRecord.class;
    }

    /**
     * The column <code>live_core.session_has_mobile_device.idsession</code>.
     */
    public final TableField<SessionHasMobileDeviceRecord, Long> IDSESSION = createField(DSL.name("idsession"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>live_core.session_has_mobile_device.idmobile_device</code>.
     */
    public final TableField<SessionHasMobileDeviceRecord, BigDecimal> IDMOBILE_DEVICE = createField(DSL.name("idmobile_device"), SQLDataType.NUMERIC, this, "");

    private SessionHasMobileDevice(Name alias, Table<SessionHasMobileDeviceRecord> aliased) {
        this(alias, aliased, null);
    }

    private SessionHasMobileDevice(Name alias, Table<SessionHasMobileDeviceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"session_has_mobile_device\" as  SELECT session_has_mobile_device.idsession,\n    session_has_mobile_device.idmobile_device\n   FROM live.session_has_mobile_device;"));
    }

    /**
     * Create an aliased <code>live_core.session_has_mobile_device</code> table
     * reference
     */
    public SessionHasMobileDevice(String alias) {
        this(DSL.name(alias), SESSION_HAS_MOBILE_DEVICE);
    }

    /**
     * Create an aliased <code>live_core.session_has_mobile_device</code> table
     * reference
     */
    public SessionHasMobileDevice(Name alias) {
        this(alias, SESSION_HAS_MOBILE_DEVICE);
    }

    /**
     * Create a <code>live_core.session_has_mobile_device</code> table reference
     */
    public SessionHasMobileDevice() {
        this(DSL.name("session_has_mobile_device"), null);
    }

    public <O extends Record> SessionHasMobileDevice(Table<O> child, ForeignKey<O, SessionHasMobileDeviceRecord> key) {
        super(child, key, SESSION_HAS_MOBILE_DEVICE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public SessionHasMobileDevice as(String alias) {
        return new SessionHasMobileDevice(DSL.name(alias), this);
    }

    @Override
    public SessionHasMobileDevice as(Name alias) {
        return new SessionHasMobileDevice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionHasMobileDevice rename(String name) {
        return new SessionHasMobileDevice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionHasMobileDevice rename(Name name) {
        return new SessionHasMobileDevice(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, BigDecimal> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
