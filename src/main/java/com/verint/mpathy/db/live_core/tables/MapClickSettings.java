/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.MapClickSettingsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MapClickSettings extends TableImpl<MapClickSettingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.map_click_settings</code>
     */
    public static final MapClickSettings MAP_CLICK_SETTINGS = new MapClickSettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MapClickSettingsRecord> getRecordType() {
        return MapClickSettingsRecord.class;
    }

    /**
     * The column <code>live_core.map_click_settings.idsite</code>.
     */
    public final TableField<MapClickSettingsRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.map_click_settings.idpage_name</code>.
     */
    public final TableField<MapClickSettingsRecord, Long> IDPAGE_NAME = createField(DSL.name("idpage_name"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.map_click_settings.pattern</code>.
     */
    public final TableField<MapClickSettingsRecord, String> PATTERN = createField(DSL.name("pattern"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.map_click_settings.replacement</code>.
     */
    public final TableField<MapClickSettingsRecord, String> REPLACEMENT = createField(DSL.name("replacement"), SQLDataType.CLOB, this, "");

    private MapClickSettings(Name alias, Table<MapClickSettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MapClickSettings(Name alias, Table<MapClickSettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"map_click_settings\" as  SELECT map_click_settings.idsite,\n    map_click_settings.idpage_name,\n    map_click_settings.pattern,\n    map_click_settings.replacement\n   FROM live.map_click_settings;"));
    }

    /**
     * Create an aliased <code>live_core.map_click_settings</code> table
     * reference
     */
    public MapClickSettings(String alias) {
        this(DSL.name(alias), MAP_CLICK_SETTINGS);
    }

    /**
     * Create an aliased <code>live_core.map_click_settings</code> table
     * reference
     */
    public MapClickSettings(Name alias) {
        this(alias, MAP_CLICK_SETTINGS);
    }

    /**
     * Create a <code>live_core.map_click_settings</code> table reference
     */
    public MapClickSettings() {
        this(DSL.name("map_click_settings"), null);
    }

    public <O extends Record> MapClickSettings(Table<O> child, ForeignKey<O, MapClickSettingsRecord> key) {
        super(child, key, MAP_CLICK_SETTINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public MapClickSettings as(String alias) {
        return new MapClickSettings(DSL.name(alias), this);
    }

    @Override
    public MapClickSettings as(Name alias) {
        return new MapClickSettings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MapClickSettings rename(String name) {
        return new MapClickSettings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MapClickSettings rename(Name name) {
        return new MapClickSettings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
