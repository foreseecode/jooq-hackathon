/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables.records;


import com.verint.mpathy.db.live.tables.HeadlessAnswer;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.Record21;
import org.jooq.Row21;
import org.jooq.impl.TableRecordImpl;


/**
 * Collect all row data of the polls without tracking.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HeadlessAnswerRecord extends TableRecordImpl<HeadlessAnswerRecord> implements Record21<BigDecimal, BigDecimal, Integer, LocalTime, Long, String, String, String, String, String, String, String, Long, Long, String, Short, Boolean, String, Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live.headless_answer.idpage</code>. Client site
     * generated page ident (no reference to the "page" table).
     */
    public void setIdpage(BigDecimal value) {
        set(0, value);
    }

    /**
     * Getter for <code>live.headless_answer.idpage</code>. Client site
     * generated page ident (no reference to the "page" table).
     */
    public BigDecimal getIdpage() {
        return (BigDecimal) get(0);
    }

    /**
     * Setter for <code>live.headless_answer.idvisitor</code>. Visitor ident
     * with a reference to "visitor".
     */
    public void setIdvisitor(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>live.headless_answer.idvisitor</code>. Visitor ident
     * with a reference to "visitor".
     */
    public BigDecimal getIdvisitor() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>live.headless_answer.idsite</code>. Site ident with a
     * reference to "site".
     */
    public void setIdsite(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>live.headless_answer.idsite</code>. Site ident with a
     * reference to "site".
     */
    public Integer getIdsite() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>live.headless_answer.timestamp</code>. Timestamp of the
     * poll request.
     */
    public void setTimestamp(LocalTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>live.headless_answer.timestamp</code>. Timestamp of the
     * poll request.
     */
    public LocalTime getTimestamp() {
        return (LocalTime) get(3);
    }

    /**
     * Setter for <code>live.headless_answer.length_loaded</code>. Time between
     * poll start and end.
     */
    public void setLengthLoaded(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>live.headless_answer.length_loaded</code>. Time between
     * poll start and end.
     */
    public Long getLengthLoaded() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>live.headless_answer.url</code>. Url of the poll
     * tracking.
     */
    public void setUrl(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>live.headless_answer.url</code>. Url of the poll
     * tracking.
     */
    public String getUrl() {
        return (String) get(5);
    }

    /**
     * Setter for <code>live.headless_answer.referer_url</code>. Referer url of
     * the poll tracking.
     */
    public void setRefererUrl(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>live.headless_answer.referer_url</code>. Referer url of
     * the poll tracking.
     */
    public String getRefererUrl() {
        return (String) get(6);
    }

    /**
     * Setter for <code>live.headless_answer.useragent</code>. Full useragent
     * string.
     */
    public void setUseragent(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>live.headless_answer.useragent</code>. Full useragent
     * string.
     */
    public String getUseragent() {
        return (String) get(7);
    }

    /**
     * Setter for <code>live.headless_answer.user_lang</code>. The language of
     * the client browser.
     */
    public void setUserLang(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>live.headless_answer.user_lang</code>. The language of
     * the client browser.
     */
    public String getUserLang() {
        return (String) get(8);
    }

    /**
     * Setter for <code>live.headless_answer.pagename</code>. The pagename of
     * the poll tracking.
     */
    public void setPagename(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>live.headless_answer.pagename</code>. The pagename of
     * the poll tracking.
     */
    public String getPagename() {
        return (String) get(9);
    }

    /**
     * Setter for <code>live.headless_answer.script_versions</code>. Contains
     * the "loader upload date", "loader version", "engine.polls version" and
     * "polls version".
     */
    public void setScriptVersions(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>live.headless_answer.script_versions</code>. Contains
     * the "loader upload date", "loader version", "engine.polls version" and
     * "polls version".
     */
    public String getScriptVersions() {
        return (String) get(10);
    }

    /**
     * Setter for <code>live.headless_answer.dbg_msgs</code>. Debug messages
     * from the custom code.
     */
    public void setDbgMsgs(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>live.headless_answer.dbg_msgs</code>. Debug messages
     * from the custom code.
     */
    public String getDbgMsgs() {
        return (String) get(11);
    }

    /**
     * Setter for <code>live.headless_answer.idquestion</code>. Questionnaire
     * ident with a reference to "questionnaire".
     */
    public void setIdquestion(Long value) {
        set(12, value);
    }

    /**
     * Getter for <code>live.headless_answer.idquestion</code>. Questionnaire
     * ident with a reference to "questionnaire".
     */
    public Long getIdquestion() {
        return (Long) get(12);
    }

    /**
     * Setter for <code>live.headless_answer.idanswer</code>. Answer ident with
     * a reference to "questionnaire_answer".
     */
    public void setIdanswer(Long value) {
        set(13, value);
    }

    /**
     * Getter for <code>live.headless_answer.idanswer</code>. Answer ident with
     * a reference to "questionnaire_answer".
     */
    public Long getIdanswer() {
        return (Long) get(13);
    }

    /**
     * Setter for <code>live.headless_answer.text</code>. The real answer from
     * the interviewee.
     */
    public void setText(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>live.headless_answer.text</code>. The real answer from
     * the interviewee.
     */
    public String getText() {
        return (String) get(14);
    }

    /**
     * Setter for <code>live.headless_answer.aborted</code>. If set 0, the poll
     * is finished successful.
     */
    public void setAborted(Short value) {
        set(15, value);
    }

    /**
     * Getter for <code>live.headless_answer.aborted</code>. If set 0, the poll
     * is finished successful.
     */
    public Short getAborted() {
        return (Short) get(15);
    }

    /**
     * Setter for <code>live.headless_answer.processed</code>. If set TRUE the
     * importer have processed this line successful.
     */
    public void setProcessed(Boolean value) {
        set(16, value);
    }

    /**
     * Getter for <code>live.headless_answer.processed</code>. If set TRUE the
     * importer have processed this line successful.
     */
    public Boolean getProcessed() {
        return (Boolean) get(16);
    }

    /**
     * Setter for <code>live.headless_answer.segments</code>. segments as
     * formatted string submitted by engine for later processing
     */
    public void setSegments(String value) {
        set(17, value);
    }

    /**
     * Getter for <code>live.headless_answer.segments</code>. segments as
     * formatted string submitted by engine for later processing
     */
    public String getSegments() {
        return (String) get(17);
    }

    /**
     * Setter for <code>live.headless_answer.idquestionnaire</code>. Reference
     * ident to the questionnaire configuration table.
     */
    public void setIdquestionnaire(Long value) {
        set(18, value);
    }

    /**
     * Getter for <code>live.headless_answer.idquestionnaire</code>. Reference
     * ident to the questionnaire configuration table.
     */
    public Long getIdquestionnaire() {
        return (Long) get(18);
    }

    /**
     * Setter for <code>live.headless_answer.random_group</code>. The
     * random_group of the answer.
     */
    public void setRandomGroup(String value) {
        set(19, value);
    }

    /**
     * Getter for <code>live.headless_answer.random_group</code>. The
     * random_group of the answer.
     */
    public String getRandomGroup() {
        return (String) get(19);
    }

    /**
     * Setter for <code>live.headless_answer.idresponse</code>. The response id
     * of the answer.
     */
    public void setIdresponse(String value) {
        set(20, value);
    }

    /**
     * Getter for <code>live.headless_answer.idresponse</code>. The response id
     * of the answer.
     */
    public String getIdresponse() {
        return (String) get(20);
    }

    // -------------------------------------------------------------------------
    // Record21 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row21<BigDecimal, BigDecimal, Integer, LocalTime, Long, String, String, String, String, String, String, String, Long, Long, String, Short, Boolean, String, Long, String, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }

    @Override
    public Row21<BigDecimal, BigDecimal, Integer, LocalTime, Long, String, String, String, String, String, String, String, Long, Long, String, Short, Boolean, String, Long, String, String> valuesRow() {
        return (Row21) super.valuesRow();
    }

    @Override
    public Field<BigDecimal> field1() {
        return HeadlessAnswer.HEADLESS_ANSWER.IDPAGE;
    }

    @Override
    public Field<BigDecimal> field2() {
        return HeadlessAnswer.HEADLESS_ANSWER.IDVISITOR;
    }

    @Override
    public Field<Integer> field3() {
        return HeadlessAnswer.HEADLESS_ANSWER.IDSITE;
    }

    @Override
    public Field<LocalTime> field4() {
        return HeadlessAnswer.HEADLESS_ANSWER.TIMESTAMP;
    }

    @Override
    public Field<Long> field5() {
        return HeadlessAnswer.HEADLESS_ANSWER.LENGTH_LOADED;
    }

    @Override
    public Field<String> field6() {
        return HeadlessAnswer.HEADLESS_ANSWER.URL;
    }

    @Override
    public Field<String> field7() {
        return HeadlessAnswer.HEADLESS_ANSWER.REFERER_URL;
    }

    @Override
    public Field<String> field8() {
        return HeadlessAnswer.HEADLESS_ANSWER.USERAGENT;
    }

    @Override
    public Field<String> field9() {
        return HeadlessAnswer.HEADLESS_ANSWER.USER_LANG;
    }

    @Override
    public Field<String> field10() {
        return HeadlessAnswer.HEADLESS_ANSWER.PAGENAME;
    }

    @Override
    public Field<String> field11() {
        return HeadlessAnswer.HEADLESS_ANSWER.SCRIPT_VERSIONS;
    }

    @Override
    public Field<String> field12() {
        return HeadlessAnswer.HEADLESS_ANSWER.DBG_MSGS;
    }

    @Override
    public Field<Long> field13() {
        return HeadlessAnswer.HEADLESS_ANSWER.IDQUESTION;
    }

    @Override
    public Field<Long> field14() {
        return HeadlessAnswer.HEADLESS_ANSWER.IDANSWER;
    }

    @Override
    public Field<String> field15() {
        return HeadlessAnswer.HEADLESS_ANSWER.TEXT;
    }

    @Override
    public Field<Short> field16() {
        return HeadlessAnswer.HEADLESS_ANSWER.ABORTED;
    }

    @Override
    public Field<Boolean> field17() {
        return HeadlessAnswer.HEADLESS_ANSWER.PROCESSED;
    }

    @Override
    public Field<String> field18() {
        return HeadlessAnswer.HEADLESS_ANSWER.SEGMENTS;
    }

    @Override
    public Field<Long> field19() {
        return HeadlessAnswer.HEADLESS_ANSWER.IDQUESTIONNAIRE;
    }

    @Override
    public Field<String> field20() {
        return HeadlessAnswer.HEADLESS_ANSWER.RANDOM_GROUP;
    }

    @Override
    public Field<String> field21() {
        return HeadlessAnswer.HEADLESS_ANSWER.IDRESPONSE;
    }

    @Override
    public BigDecimal component1() {
        return getIdpage();
    }

    @Override
    public BigDecimal component2() {
        return getIdvisitor();
    }

    @Override
    public Integer component3() {
        return getIdsite();
    }

    @Override
    public LocalTime component4() {
        return getTimestamp();
    }

    @Override
    public Long component5() {
        return getLengthLoaded();
    }

    @Override
    public String component6() {
        return getUrl();
    }

    @Override
    public String component7() {
        return getRefererUrl();
    }

    @Override
    public String component8() {
        return getUseragent();
    }

    @Override
    public String component9() {
        return getUserLang();
    }

    @Override
    public String component10() {
        return getPagename();
    }

    @Override
    public String component11() {
        return getScriptVersions();
    }

    @Override
    public String component12() {
        return getDbgMsgs();
    }

    @Override
    public Long component13() {
        return getIdquestion();
    }

    @Override
    public Long component14() {
        return getIdanswer();
    }

    @Override
    public String component15() {
        return getText();
    }

    @Override
    public Short component16() {
        return getAborted();
    }

    @Override
    public Boolean component17() {
        return getProcessed();
    }

    @Override
    public String component18() {
        return getSegments();
    }

    @Override
    public Long component19() {
        return getIdquestionnaire();
    }

    @Override
    public String component20() {
        return getRandomGroup();
    }

    @Override
    public String component21() {
        return getIdresponse();
    }

    @Override
    public BigDecimal value1() {
        return getIdpage();
    }

    @Override
    public BigDecimal value2() {
        return getIdvisitor();
    }

    @Override
    public Integer value3() {
        return getIdsite();
    }

    @Override
    public LocalTime value4() {
        return getTimestamp();
    }

    @Override
    public Long value5() {
        return getLengthLoaded();
    }

    @Override
    public String value6() {
        return getUrl();
    }

    @Override
    public String value7() {
        return getRefererUrl();
    }

    @Override
    public String value8() {
        return getUseragent();
    }

    @Override
    public String value9() {
        return getUserLang();
    }

    @Override
    public String value10() {
        return getPagename();
    }

    @Override
    public String value11() {
        return getScriptVersions();
    }

    @Override
    public String value12() {
        return getDbgMsgs();
    }

    @Override
    public Long value13() {
        return getIdquestion();
    }

    @Override
    public Long value14() {
        return getIdanswer();
    }

    @Override
    public String value15() {
        return getText();
    }

    @Override
    public Short value16() {
        return getAborted();
    }

    @Override
    public Boolean value17() {
        return getProcessed();
    }

    @Override
    public String value18() {
        return getSegments();
    }

    @Override
    public Long value19() {
        return getIdquestionnaire();
    }

    @Override
    public String value20() {
        return getRandomGroup();
    }

    @Override
    public String value21() {
        return getIdresponse();
    }

    @Override
    public HeadlessAnswerRecord value1(BigDecimal value) {
        setIdpage(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value2(BigDecimal value) {
        setIdvisitor(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value3(Integer value) {
        setIdsite(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value4(LocalTime value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value5(Long value) {
        setLengthLoaded(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value6(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value7(String value) {
        setRefererUrl(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value8(String value) {
        setUseragent(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value9(String value) {
        setUserLang(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value10(String value) {
        setPagename(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value11(String value) {
        setScriptVersions(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value12(String value) {
        setDbgMsgs(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value13(Long value) {
        setIdquestion(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value14(Long value) {
        setIdanswer(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value15(String value) {
        setText(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value16(Short value) {
        setAborted(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value17(Boolean value) {
        setProcessed(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value18(String value) {
        setSegments(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value19(Long value) {
        setIdquestionnaire(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value20(String value) {
        setRandomGroup(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord value21(String value) {
        setIdresponse(value);
        return this;
    }

    @Override
    public HeadlessAnswerRecord values(BigDecimal value1, BigDecimal value2, Integer value3, LocalTime value4, Long value5, String value6, String value7, String value8, String value9, String value10, String value11, String value12, Long value13, Long value14, String value15, Short value16, Boolean value17, String value18, Long value19, String value20, String value21) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        value21(value21);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HeadlessAnswerRecord
     */
    public HeadlessAnswerRecord() {
        super(HeadlessAnswer.HEADLESS_ANSWER);
    }

    /**
     * Create a detached, initialised HeadlessAnswerRecord
     */
    public HeadlessAnswerRecord(BigDecimal idpage, BigDecimal idvisitor, Integer idsite, LocalTime timestamp, Long lengthLoaded, String url, String refererUrl, String useragent, String userLang, String pagename, String scriptVersions, String dbgMsgs, Long idquestion, Long idanswer, String text, Short aborted, Boolean processed, String segments, Long idquestionnaire, String randomGroup, String idresponse) {
        super(HeadlessAnswer.HEADLESS_ANSWER);

        setIdpage(idpage);
        setIdvisitor(idvisitor);
        setIdsite(idsite);
        setTimestamp(timestamp);
        setLengthLoaded(lengthLoaded);
        setUrl(url);
        setRefererUrl(refererUrl);
        setUseragent(useragent);
        setUserLang(userLang);
        setPagename(pagename);
        setScriptVersions(scriptVersions);
        setDbgMsgs(dbgMsgs);
        setIdquestion(idquestion);
        setIdanswer(idanswer);
        setText(text);
        setAborted(aborted);
        setProcessed(processed);
        setSegments(segments);
        setIdquestionnaire(idquestionnaire);
        setRandomGroup(randomGroup);
        setIdresponse(idresponse);
    }
}
