/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.SafSegmentHasPageRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SafSegmentHasPage extends TableImpl<SafSegmentHasPageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.saf_segment_has_page</code>
     */
    public static final SafSegmentHasPage SAF_SEGMENT_HAS_PAGE = new SafSegmentHasPage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SafSegmentHasPageRecord> getRecordType() {
        return SafSegmentHasPageRecord.class;
    }

    /**
     * The column <code>live_core.saf_segment_has_page.idpage</code>.
     */
    public final TableField<SafSegmentHasPageRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.saf_segment_has_page.idsite</code>.
     */
    public final TableField<SafSegmentHasPageRecord, Long> IDSITE = createField(DSL.name("idsite"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.saf_segment_has_page.idfilter</code>.
     */
    public final TableField<SafSegmentHasPageRecord, BigDecimal> IDFILTER = createField(DSL.name("idfilter"), SQLDataType.NUMERIC, this, "");

    private SafSegmentHasPage(Name alias, Table<SafSegmentHasPageRecord> aliased) {
        this(alias, aliased, null);
    }

    private SafSegmentHasPage(Name alias, Table<SafSegmentHasPageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"saf_segment_has_page\" as  SELECT saf_segment_has_page.idpage,\n    saf_segment_has_page.idsite,\n    saf_segment_has_page.idfilter\n   FROM live.saf_segment_has_page;"));
    }

    /**
     * Create an aliased <code>live_core.saf_segment_has_page</code> table
     * reference
     */
    public SafSegmentHasPage(String alias) {
        this(DSL.name(alias), SAF_SEGMENT_HAS_PAGE);
    }

    /**
     * Create an aliased <code>live_core.saf_segment_has_page</code> table
     * reference
     */
    public SafSegmentHasPage(Name alias) {
        this(alias, SAF_SEGMENT_HAS_PAGE);
    }

    /**
     * Create a <code>live_core.saf_segment_has_page</code> table reference
     */
    public SafSegmentHasPage() {
        this(DSL.name("saf_segment_has_page"), null);
    }

    public <O extends Record> SafSegmentHasPage(Table<O> child, ForeignKey<O, SafSegmentHasPageRecord> key) {
        super(child, key, SAF_SEGMENT_HAS_PAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public SafSegmentHasPage as(String alias) {
        return new SafSegmentHasPage(DSL.name(alias), this);
    }

    @Override
    public SafSegmentHasPage as(Name alias) {
        return new SafSegmentHasPage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SafSegmentHasPage rename(String name) {
        return new SafSegmentHasPage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SafSegmentHasPage rename(Name name) {
        return new SafSegmentHasPage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<BigDecimal, Long, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
