/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.EventTableRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventTable extends TableImpl<EventTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.event_table</code>
     */
    public static final EventTable EVENT_TABLE = new EventTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventTableRecord> getRecordType() {
        return EventTableRecord.class;
    }

    /**
     * The column <code>live.event_table.idevent</code>.
     */
    public final TableField<EventTableRecord, Short> IDEVENT = createField(DSL.name("idevent"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live.event_table.name</code>.
     */
    public final TableField<EventTableRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.event_table.structure</code>.
     */
    public final TableField<EventTableRecord, String> STRUCTURE = createField(DSL.name("structure"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.event_table.user_activity</code>.
     */
    public final TableField<EventTableRecord, Boolean> USER_ACTIVITY = createField(DSL.name("user_activity"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>live.event_table.revision</code>.
     */
    public final TableField<EventTableRecord, Short> REVISION = createField(DSL.name("revision"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live.event_table.deprecated</code>.
     */
    public final TableField<EventTableRecord, Boolean> DEPRECATED = createField(DSL.name("deprecated"), SQLDataType.BOOLEAN, this, "");

    private EventTable(Name alias, Table<EventTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventTable(Name alias, Table<EventTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.event_table</code> table reference
     */
    public EventTable(String alias) {
        this(DSL.name(alias), EVENT_TABLE);
    }

    /**
     * Create an aliased <code>live.event_table</code> table reference
     */
    public EventTable(Name alias) {
        this(alias, EVENT_TABLE);
    }

    /**
     * Create a <code>live.event_table</code> table reference
     */
    public EventTable() {
        this(DSL.name("event_table"), null);
    }

    public <O extends Record> EventTable(Table<O> child, ForeignKey<O, EventTableRecord> key) {
        super(child, key, EVENT_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public EventTable as(String alias) {
        return new EventTable(DSL.name(alias), this);
    }

    @Override
    public EventTable as(Name alias) {
        return new EventTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventTable rename(String name) {
        return new EventTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventTable rename(Name name) {
        return new EventTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Short, String, String, Boolean, Short, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
