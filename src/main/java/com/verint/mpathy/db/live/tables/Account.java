/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.AccountRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.account</code>
     */
    public static final Account ACCOUNT = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>live.account.idaccount</code>.
     */
    public final TableField<AccountRecord, Long> IDACCOUNT = createField(DSL.name("idaccount"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>live.account.authkey</code>.
     */
    public final TableField<AccountRecord, String> AUTHKEY = createField(DSL.name("authkey"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.account.created_at</code>.
     */
    public final TableField<AccountRecord, LocalTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live.account.expiredate</code>.
     */
    public final TableField<AccountRecord, LocalTime> EXPIREDATE = createField(DSL.name("expiredate"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live.account.active</code>.
     */
    public final TableField<AccountRecord, Long> ACTIVE = createField(DSL.name("active"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.account.loader_count</code>.
     */
    public final TableField<AccountRecord, BigDecimal> LOADER_COUNT = createField(DSL.name("loader_count"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.account.sitelimit</code>.
     */
    public final TableField<AccountRecord, Long> SITELIMIT = createField(DSL.name("sitelimit"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.account.transfervolume</code>.
     */
    public final TableField<AccountRecord, BigDecimal> TRANSFERVOLUME = createField(DSL.name("transfervolume"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.account.has_profiles</code>.
     */
    public final TableField<AccountRecord, Long> HAS_PROFILES = createField(DSL.name("has_profiles"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.account.userlimit</code>.
     */
    public final TableField<AccountRecord, Long> USERLIMIT = createField(DSL.name("userlimit"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.account.website</code>.
     */
    public final TableField<AccountRecord, String> WEBSITE = createField(DSL.name("website"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.account.visits</code>.
     */
    public final TableField<AccountRecord, Long> VISITS = createField(DSL.name("visits"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.account.storagetime</code>.
     */
    public final TableField<AccountRecord, Long> STORAGETIME = createField(DSL.name("storagetime"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.account.billing_streetaddress</code>.
     */
    public final TableField<AccountRecord, String> BILLING_STREETADDRESS = createField(DSL.name("billing_streetaddress"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.account.billing_postcode</code>.
     */
    public final TableField<AccountRecord, String> BILLING_POSTCODE = createField(DSL.name("billing_postcode"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.account.billing_city</code>.
     */
    public final TableField<AccountRecord, String> BILLING_CITY = createField(DSL.name("billing_city"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.account.billing_firstname</code>.
     */
    public final TableField<AccountRecord, String> BILLING_FIRSTNAME = createField(DSL.name("billing_firstname"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.account.billing_lastname</code>.
     */
    public final TableField<AccountRecord, String> BILLING_LASTNAME = createField(DSL.name("billing_lastname"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.account.billing_salutation</code>.
     */
    public final TableField<AccountRecord, String> BILLING_SALUTATION = createField(DSL.name("billing_salutation"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.account.billing_company</code>.
     */
    public final TableField<AccountRecord, String> BILLING_COMPANY = createField(DSL.name("billing_company"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.account.accounttype</code>.
     */
    public final TableField<AccountRecord, Short> ACCOUNTTYPE = createField(DSL.name("accounttype"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live.account.heatmaps</code>.
     */
    public final TableField<AccountRecord, Long> HEATMAPS = createField(DSL.name("heatmaps"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.account.formanalysis</code>.
     */
    public final TableField<AccountRecord, Long> FORMANALYSIS = createField(DSL.name("formanalysis"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.account.special</code>.
     */
    public final TableField<AccountRecord, String> SPECIAL = createField(DSL.name("special"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.account.providerstate</code>.
     */
    public final TableField<AccountRecord, Short> PROVIDERSTATE = createField(DSL.name("providerstate"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live.account.scrollingmaps</code>.
     */
    public final TableField<AccountRecord, Long> SCROLLINGMAPS = createField(DSL.name("scrollingmaps"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.account.questionnaires</code>.
     */
    public final TableField<AccountRecord, Long> QUESTIONNAIRES = createField(DSL.name("questionnaires"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.account.uxmonitoring</code>.
     */
    public final TableField<AccountRecord, Boolean> UXMONITORING = createField(DSL.name("uxmonitoring"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>live.account.pilimit</code>. Pageimpression account
     * limit
     */
    public final TableField<AccountRecord, Long> PILIMIT = createField(DSL.name("pilimit"), SQLDataType.BIGINT, this, "Pageimpression account limit");

    /**
     * The column <code>live.account.preloader_version</code>.
     */
    public final TableField<AccountRecord, String> PRELOADER_VERSION = createField(DSL.name("preloader_version"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.account.cc_version</code>. new cc-version to upload
     */
    public final TableField<AccountRecord, String> CC_VERSION = createField(DSL.name("cc_version"), SQLDataType.CLOB, this, "new cc-version to upload");

    /**
     * The column <code>live.account.repository_name</code>. repository name for
     * git project which contains cc code
     */
    public final TableField<AccountRecord, String> REPOSITORY_NAME = createField(DSL.name("repository_name"), SQLDataType.CLOB, this, "repository name for git project which contains cc code");

    /**
     * The column <code>live.account.alternative_project_name</code>. tag name
     * for git project which contains actual cc code to upload
     */
    public final TableField<AccountRecord, String> ALTERNATIVE_PROJECT_NAME = createField(DSL.name("alternative_project_name"), SQLDataType.CLOB, this, "tag name for git project which contains actual cc code to upload");

    private Account(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.account</code> table reference
     */
    public Account(String alias) {
        this(DSL.name(alias), ACCOUNT);
    }

    /**
     * Create an aliased <code>live.account</code> table reference
     */
    public Account(Name alias) {
        this(alias, ACCOUNT);
    }

    /**
     * Create a <code>live.account</code> table reference
     */
    public Account() {
        this(DSL.name("account"), null);
    }

    public <O extends Record> Account(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<AccountRecord, Long> getIdentity() {
        return (Identity<AccountRecord, Long>) super.getIdentity();
    }

    @Override
    public Account as(String alias) {
        return new Account(DSL.name(alias), this);
    }

    @Override
    public Account as(Name alias) {
        return new Account(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Name name) {
        return new Account(name, null);
    }
}
