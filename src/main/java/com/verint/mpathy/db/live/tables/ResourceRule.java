/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.ResourceRuleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Contains all CSS files that have to be downloaded.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResourceRule extends TableImpl<ResourceRuleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.resource_rule</code>
     */
    public static final ResourceRule RESOURCE_RULE = new ResourceRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResourceRuleRecord> getRecordType() {
        return ResourceRuleRecord.class;
    }

    /**
     * The column <code>live.resource_rule.idrule</code>. Primary Key to
     * "resource_rule"-Table.
     */
    public final TableField<ResourceRuleRecord, Long> IDRULE = createField(DSL.name("idrule"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Primary Key to \"resource_rule\"-Table.");

    /**
     * The column <code>live.resource_rule.idsite</code>. Technical foreign key
     * to the "site" table and a foreign key to "site".
     */
    public final TableField<ResourceRuleRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "Technical foreign key to the \"site\" table and a foreign key to \"site\".");

    /**
     * The column <code>live.resource_rule.url_pattern</code>. Contains regex
     * pattern to check whether to apply the rule to the URL 
     */
    public final TableField<ResourceRuleRecord, String> URL_PATTERN = createField(DSL.name("url_pattern"), SQLDataType.CLOB.nullable(false), this, "Contains regex pattern to check whether to apply the rule to the URL ");

    /**
     * The column <code>live.resource_rule.status</code>. Contains the
     * descripton of rule "idrule".
     */
    public final TableField<ResourceRuleRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false), this, "Contains the descripton of rule \"idrule\".");

    /**
     * The column <code>live.resource_rule.priority</code>. Allow the order for
     * a site with more than one rule. The value 1 is the lowest priority.
     */
    public final TableField<ResourceRuleRecord, Integer> PRIORITY = createField(DSL.name("priority"), SQLDataType.INTEGER.nullable(false), this, "Allow the order for a site with more than one rule. The value 1 is the lowest priority.");

    private ResourceRule(Name alias, Table<ResourceRuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResourceRule(Name alias, Table<ResourceRuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Contains all CSS files that have to be downloaded."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.resource_rule</code> table reference
     */
    public ResourceRule(String alias) {
        this(DSL.name(alias), RESOURCE_RULE);
    }

    /**
     * Create an aliased <code>live.resource_rule</code> table reference
     */
    public ResourceRule(Name alias) {
        this(alias, RESOURCE_RULE);
    }

    /**
     * Create a <code>live.resource_rule</code> table reference
     */
    public ResourceRule() {
        this(DSL.name("resource_rule"), null);
    }

    public <O extends Record> ResourceRule(Table<O> child, ForeignKey<O, ResourceRuleRecord> key) {
        super(child, key, RESOURCE_RULE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<ResourceRuleRecord, Long> getIdentity() {
        return (Identity<ResourceRuleRecord, Long>) super.getIdentity();
    }

    @Override
    public ResourceRule as(String alias) {
        return new ResourceRule(DSL.name(alias), this);
    }

    @Override
    public ResourceRule as(Name alias) {
        return new ResourceRule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceRule rename(String name) {
        return new ResourceRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceRule rename(Name name) {
        return new ResourceRule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, String, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
