/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables.records;


import com.verint.mpathy.db.live.tables.ResourceExcludeHost;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * The table contains host/domains which must not be processed  by the
 * mpathy-asset-store-serivce.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResourceExcludeHostRecord extends TableRecordImpl<ResourceExcludeHostRecord> implements Record2<Short, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live.resource_exclude_host.idexclude_host</code>.
     * Primary key for the host entry.
     */
    public void setIdexcludeHost(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>live.resource_exclude_host.idexclude_host</code>.
     * Primary key for the host entry.
     */
    public Short getIdexcludeHost() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>live.resource_exclude_host.host_name</code>. The column
     * is the name of a host which must not contain in a url string.
     */
    public void setHostName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>live.resource_exclude_host.host_name</code>. The column
     * is the name of a host which must not contain in a url string.
     */
    public String getHostName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Short, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Short, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return ResourceExcludeHost.RESOURCE_EXCLUDE_HOST.IDEXCLUDE_HOST;
    }

    @Override
    public Field<String> field2() {
        return ResourceExcludeHost.RESOURCE_EXCLUDE_HOST.HOST_NAME;
    }

    @Override
    public Short component1() {
        return getIdexcludeHost();
    }

    @Override
    public String component2() {
        return getHostName();
    }

    @Override
    public Short value1() {
        return getIdexcludeHost();
    }

    @Override
    public String value2() {
        return getHostName();
    }

    @Override
    public ResourceExcludeHostRecord value1(Short value) {
        setIdexcludeHost(value);
        return this;
    }

    @Override
    public ResourceExcludeHostRecord value2(String value) {
        setHostName(value);
        return this;
    }

    @Override
    public ResourceExcludeHostRecord values(Short value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ResourceExcludeHostRecord
     */
    public ResourceExcludeHostRecord() {
        super(ResourceExcludeHost.RESOURCE_EXCLUDE_HOST);
    }

    /**
     * Create a detached, initialised ResourceExcludeHostRecord
     */
    public ResourceExcludeHostRecord(Short idexcludeHost, String hostName) {
        super(ResourceExcludeHost.RESOURCE_EXCLUDE_HOST);

        setIdexcludeHost(idexcludeHost);
        setHostName(hostName);
    }
}
