/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.PageHasRespondentRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageHasRespondent extends TableImpl<PageHasRespondentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.page_has_respondent</code>
     */
    public static final PageHasRespondent PAGE_HAS_RESPONDENT = new PageHasRespondent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageHasRespondentRecord> getRecordType() {
        return PageHasRespondentRecord.class;
    }

    /**
     * The column <code>live.page_has_respondent.idpage_has_respondent</code>.
     */
    public final TableField<PageHasRespondentRecord, Long> IDPAGE_HAS_RESPONDENT = createField(DSL.name("idpage_has_respondent"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>live.page_has_respondent.idpage</code>.
     */
    public final TableField<PageHasRespondentRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.page_has_respondent.idsite</code>.
     */
    public final TableField<PageHasRespondentRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live.page_has_respondent.idsession</code>.
     */
    public final TableField<PageHasRespondentRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.page_has_respondent.idvisitor</code>.
     */
    public final TableField<PageHasRespondentRecord, BigDecimal> IDVISITOR = createField(DSL.name("idvisitor"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.page_has_respondent.idrespondent</code>.
     */
    public final TableField<PageHasRespondentRecord, String> IDRESPONDENT = createField(DSL.name("idrespondent"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.page_has_respondent.idclient</code>.
     */
    public final TableField<PageHasRespondentRecord, BigDecimal> IDCLIENT = createField(DSL.name("idclient"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.page_has_respondent.idmodelinstance</code>.
     */
    public final TableField<PageHasRespondentRecord, String> IDMODELINSTANCE = createField(DSL.name("idmodelinstance"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.page_has_respondent.respondentdate</code>.
     */
    public final TableField<PageHasRespondentRecord, LocalTime> RESPONDENTDATE = createField(DSL.name("respondentdate"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live.page_has_respondent.respondenttype</code>.
     */
    public final TableField<PageHasRespondentRecord, String> RESPONDENTTYPE = createField(DSL.name("respondenttype"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.page_has_respondent.deleted_at</code>. The datetime
     * when the idpage to this respondent is deleted.
     */
    public final TableField<PageHasRespondentRecord, LocalTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALTIME(6), this, "The datetime when the idpage to this respondent is deleted.");

    private PageHasRespondent(Name alias, Table<PageHasRespondentRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageHasRespondent(Name alias, Table<PageHasRespondentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.page_has_respondent</code> table reference
     */
    public PageHasRespondent(String alias) {
        this(DSL.name(alias), PAGE_HAS_RESPONDENT);
    }

    /**
     * Create an aliased <code>live.page_has_respondent</code> table reference
     */
    public PageHasRespondent(Name alias) {
        this(alias, PAGE_HAS_RESPONDENT);
    }

    /**
     * Create a <code>live.page_has_respondent</code> table reference
     */
    public PageHasRespondent() {
        this(DSL.name("page_has_respondent"), null);
    }

    public <O extends Record> PageHasRespondent(Table<O> child, ForeignKey<O, PageHasRespondentRecord> key) {
        super(child, key, PAGE_HAS_RESPONDENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<PageHasRespondentRecord, Long> getIdentity() {
        return (Identity<PageHasRespondentRecord, Long>) super.getIdentity();
    }

    @Override
    public PageHasRespondent as(String alias) {
        return new PageHasRespondent(DSL.name(alias), this);
    }

    @Override
    public PageHasRespondent as(Name alias) {
        return new PageHasRespondent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageHasRespondent rename(String name) {
        return new PageHasRespondent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageHasRespondent rename(Name name) {
        return new PageHasRespondent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, BigDecimal, Integer, BigDecimal, BigDecimal, String, BigDecimal, String, LocalTime, String, LocalTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
