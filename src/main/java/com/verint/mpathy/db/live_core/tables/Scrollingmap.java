/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.ScrollingmapRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Scrollingmap extends TableImpl<ScrollingmapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.scrollingmap</code>
     */
    public static final Scrollingmap SCROLLINGMAP = new Scrollingmap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScrollingmapRecord> getRecordType() {
        return ScrollingmapRecord.class;
    }

    /**
     * The column <code>live_core.scrollingmap.idpage</code>.
     */
    public final TableField<ScrollingmapRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.scrollingmap.stripes1</code>.
     */
    public final TableField<ScrollingmapRecord, String> STRIPES1 = createField(DSL.name("stripes1"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.scrollingmap.stripes2</code>.
     */
    public final TableField<ScrollingmapRecord, String> STRIPES2 = createField(DSL.name("stripes2"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.scrollingmap.stripes3</code>.
     */
    public final TableField<ScrollingmapRecord, String> STRIPES3 = createField(DSL.name("stripes3"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.scrollingmap.stripes4</code>.
     */
    public final TableField<ScrollingmapRecord, String> STRIPES4 = createField(DSL.name("stripes4"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.scrollingmap.stripes5</code>.
     */
    public final TableField<ScrollingmapRecord, String> STRIPES5 = createField(DSL.name("stripes5"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.scrollingmap.stripes6</code>.
     */
    public final TableField<ScrollingmapRecord, String> STRIPES6 = createField(DSL.name("stripes6"), SQLDataType.CLOB, this, "");

    private Scrollingmap(Name alias, Table<ScrollingmapRecord> aliased) {
        this(alias, aliased, null);
    }

    private Scrollingmap(Name alias, Table<ScrollingmapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"scrollingmap\" as  SELECT scrollingmap.idpage,\n    scrollingmap.stripes1,\n    scrollingmap.stripes2,\n    scrollingmap.stripes3,\n    scrollingmap.stripes4,\n    scrollingmap.stripes5,\n    scrollingmap.stripes6\n   FROM live.scrollingmap;"));
    }

    /**
     * Create an aliased <code>live_core.scrollingmap</code> table reference
     */
    public Scrollingmap(String alias) {
        this(DSL.name(alias), SCROLLINGMAP);
    }

    /**
     * Create an aliased <code>live_core.scrollingmap</code> table reference
     */
    public Scrollingmap(Name alias) {
        this(alias, SCROLLINGMAP);
    }

    /**
     * Create a <code>live_core.scrollingmap</code> table reference
     */
    public Scrollingmap() {
        this(DSL.name("scrollingmap"), null);
    }

    public <O extends Record> Scrollingmap(Table<O> child, ForeignKey<O, ScrollingmapRecord> key) {
        super(child, key, SCROLLINGMAP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public Scrollingmap as(String alias) {
        return new Scrollingmap(DSL.name(alias), this);
    }

    @Override
    public Scrollingmap as(Name alias) {
        return new Scrollingmap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Scrollingmap rename(String name) {
        return new Scrollingmap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scrollingmap rename(Name name) {
        return new Scrollingmap(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<BigDecimal, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
