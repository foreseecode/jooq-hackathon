/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.QuestionnaireLayoutRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table to store the possible layouts for a site.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionnaireLayout extends TableImpl<QuestionnaireLayoutRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.questionnaire_layout</code>
     */
    public static final QuestionnaireLayout QUESTIONNAIRE_LAYOUT = new QuestionnaireLayout();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionnaireLayoutRecord> getRecordType() {
        return QuestionnaireLayoutRecord.class;
    }

    /**
     * The column <code>live.questionnaire_layout.idquestionnaire_layout</code>.
     * Primary key for this table.
     */
    public final TableField<QuestionnaireLayoutRecord, Long> IDQUESTIONNAIRE_LAYOUT = createField(DSL.name("idquestionnaire_layout"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Primary key for this table.");

    /**
     * The column <code>live.questionnaire_layout.idsite</code>. Foreign key to
     * the site table.
     */
    public final TableField<QuestionnaireLayoutRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "Foreign key to the site table.");

    /**
     * The column <code>live.questionnaire_layout.name</code>. Is the layout
     * name.
     */
    public final TableField<QuestionnaireLayoutRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "Is the layout name.");

    /**
     * The column <code>live.questionnaire_layout.css_url</code>. Is the
     * resource url (css) of this layout.
     */
    public final TableField<QuestionnaireLayoutRecord, String> CSS_URL = createField(DSL.name("css_url"), SQLDataType.CLOB.nullable(false), this, "Is the resource url (css) of this layout.");

    private QuestionnaireLayout(Name alias, Table<QuestionnaireLayoutRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionnaireLayout(Name alias, Table<QuestionnaireLayoutRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table to store the possible layouts for a site."), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.questionnaire_layout</code> table reference
     */
    public QuestionnaireLayout(String alias) {
        this(DSL.name(alias), QUESTIONNAIRE_LAYOUT);
    }

    /**
     * Create an aliased <code>live.questionnaire_layout</code> table reference
     */
    public QuestionnaireLayout(Name alias) {
        this(alias, QUESTIONNAIRE_LAYOUT);
    }

    /**
     * Create a <code>live.questionnaire_layout</code> table reference
     */
    public QuestionnaireLayout() {
        this(DSL.name("questionnaire_layout"), null);
    }

    public <O extends Record> QuestionnaireLayout(Table<O> child, ForeignKey<O, QuestionnaireLayoutRecord> key) {
        super(child, key, QUESTIONNAIRE_LAYOUT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public Identity<QuestionnaireLayoutRecord, Long> getIdentity() {
        return (Identity<QuestionnaireLayoutRecord, Long>) super.getIdentity();
    }

    @Override
    public QuestionnaireLayout as(String alias) {
        return new QuestionnaireLayout(DSL.name(alias), this);
    }

    @Override
    public QuestionnaireLayout as(Name alias) {
        return new QuestionnaireLayout(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionnaireLayout rename(String name) {
        return new QuestionnaireLayout(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionnaireLayout rename(Name name) {
        return new QuestionnaireLayout(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
