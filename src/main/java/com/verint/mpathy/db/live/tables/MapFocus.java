/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.MapFocusRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MapFocus extends TableImpl<MapFocusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.map_focus</code>
     */
    public static final MapFocus MAP_FOCUS = new MapFocus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MapFocusRecord> getRecordType() {
        return MapFocusRecord.class;
    }

    /**
     * The column <code>live.map_focus.idsite</code>.
     */
    public final TableField<MapFocusRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live.map_focus.x</code>.
     */
    public final TableField<MapFocusRecord, Integer> X = createField(DSL.name("x"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live.map_focus.y</code>.
     */
    public final TableField<MapFocusRecord, Integer> Y = createField(DSL.name("y"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live.map_focus.sum</code>.
     */
    public final TableField<MapFocusRecord, Integer> SUM = createField(DSL.name("sum"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live.map_focus.sessions</code>.
     */
    public final TableField<MapFocusRecord, String> SESSIONS = createField(DSL.name("sessions"), SQLDataType.CLOB, this, "");

    private MapFocus(Name alias, Table<MapFocusRecord> aliased) {
        this(alias, aliased, null);
    }

    private MapFocus(Name alias, Table<MapFocusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.map_focus</code> table reference
     */
    public MapFocus(String alias) {
        this(DSL.name(alias), MAP_FOCUS);
    }

    /**
     * Create an aliased <code>live.map_focus</code> table reference
     */
    public MapFocus(Name alias) {
        this(alias, MAP_FOCUS);
    }

    /**
     * Create a <code>live.map_focus</code> table reference
     */
    public MapFocus() {
        this(DSL.name("map_focus"), null);
    }

    public <O extends Record> MapFocus(Table<O> child, ForeignKey<O, MapFocusRecord> key) {
        super(child, key, MAP_FOCUS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public MapFocus as(String alias) {
        return new MapFocus(DSL.name(alias), this);
    }

    @Override
    public MapFocus as(Name alias) {
        return new MapFocus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MapFocus rename(String name) {
        return new MapFocus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MapFocus rename(Name name) {
        return new MapFocus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
