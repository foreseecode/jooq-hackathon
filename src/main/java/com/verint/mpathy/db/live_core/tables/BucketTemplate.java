/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.BucketTemplateRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BucketTemplate extends TableImpl<BucketTemplateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.bucket_template</code>
     */
    public static final BucketTemplate BUCKET_TEMPLATE = new BucketTemplate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BucketTemplateRecord> getRecordType() {
        return BucketTemplateRecord.class;
    }

    /**
     * The column <code>live_core.bucket_template.type</code>.
     */
    public final TableField<BucketTemplateRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.bucket_template.retention</code>.
     */
    public final TableField<BucketTemplateRecord, Short> RETENTION = createField(DSL.name("retention"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.bucket_template.limit</code>.
     */
    public final TableField<BucketTemplateRecord, Long> LIMIT = createField(DSL.name("limit"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.bucket_template.alert_threshold</code>.
     */
    public final TableField<BucketTemplateRecord, Short> ALERT_THRESHOLD = createField(DSL.name("alert_threshold"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.bucket_template.count_delay</code>.
     */
    public final TableField<BucketTemplateRecord, Short> COUNT_DELAY = createField(DSL.name("count_delay"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.bucket_template.priority</code>.
     */
    public final TableField<BucketTemplateRecord, Long> PRIORITY = createField(DSL.name("priority"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.bucket_template.name</code>.
     */
    public final TableField<BucketTemplateRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    private BucketTemplate(Name alias, Table<BucketTemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private BucketTemplate(Name alias, Table<BucketTemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"bucket_template\" as  SELECT bucket_template.type,\n    bucket_template.retention,\n    bucket_template.\"limit\",\n    bucket_template.alert_threshold,\n    bucket_template.count_delay,\n    bucket_template.priority,\n    bucket_template.name\n   FROM live.bucket_template;"));
    }

    /**
     * Create an aliased <code>live_core.bucket_template</code> table reference
     */
    public BucketTemplate(String alias) {
        this(DSL.name(alias), BUCKET_TEMPLATE);
    }

    /**
     * Create an aliased <code>live_core.bucket_template</code> table reference
     */
    public BucketTemplate(Name alias) {
        this(alias, BUCKET_TEMPLATE);
    }

    /**
     * Create a <code>live_core.bucket_template</code> table reference
     */
    public BucketTemplate() {
        this(DSL.name("bucket_template"), null);
    }

    public <O extends Record> BucketTemplate(Table<O> child, ForeignKey<O, BucketTemplateRecord> key) {
        super(child, key, BUCKET_TEMPLATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public BucketTemplate as(String alias) {
        return new BucketTemplate(DSL.name(alias), this);
    }

    @Override
    public BucketTemplate as(Name alias) {
        return new BucketTemplate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BucketTemplate rename(String name) {
        return new BucketTemplate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BucketTemplate rename(Name name) {
        return new BucketTemplate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Short, Long, Short, Short, Long, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
