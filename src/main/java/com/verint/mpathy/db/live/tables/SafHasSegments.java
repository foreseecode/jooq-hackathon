/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.SafHasSegmentsRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SafHasSegments extends TableImpl<SafHasSegmentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.saf_has_segments</code>
     */
    public static final SafHasSegments SAF_HAS_SEGMENTS = new SafHasSegments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SafHasSegmentsRecord> getRecordType() {
        return SafHasSegmentsRecord.class;
    }

    /**
     * The column <code>live.saf_has_segments.idfile</code>.
     */
    public final TableField<SafHasSegmentsRecord, BigDecimal> IDFILE = createField(DSL.name("idfile"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>live.saf_has_segments.idsegment_saf</code>.
     */
    public final TableField<SafHasSegmentsRecord, String> IDSEGMENT_SAF = createField(DSL.name("idsegment_saf"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>live.saf_has_segments.name</code>.
     */
    public final TableField<SafHasSegmentsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>live.saf_has_segments.type</code>.
     */
    public final TableField<SafHasSegmentsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.saf_has_segments.scope</code>.
     */
    public final TableField<SafHasSegmentsRecord, String> SCOPE = createField(DSL.name("scope"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.saf_has_segments.definition</code>.
     */
    public final TableField<SafHasSegmentsRecord, String> DEFINITION = createField(DSL.name("definition"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.saf_has_segments.created</code>.
     */
    public final TableField<SafHasSegmentsRecord, LocalTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live.saf_has_segments.modified</code>.
     */
    public final TableField<SafHasSegmentsRecord, LocalTime> MODIFIED = createField(DSL.name("modified"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live.saf_has_segments.idfilter</code>.
     */
    public final TableField<SafHasSegmentsRecord, BigDecimal> IDFILTER = createField(DSL.name("idfilter"), SQLDataType.NUMERIC, this, "");

    private SafHasSegments(Name alias, Table<SafHasSegmentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SafHasSegments(Name alias, Table<SafHasSegmentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.saf_has_segments</code> table reference
     */
    public SafHasSegments(String alias) {
        this(DSL.name(alias), SAF_HAS_SEGMENTS);
    }

    /**
     * Create an aliased <code>live.saf_has_segments</code> table reference
     */
    public SafHasSegments(Name alias) {
        this(alias, SAF_HAS_SEGMENTS);
    }

    /**
     * Create a <code>live.saf_has_segments</code> table reference
     */
    public SafHasSegments() {
        this(DSL.name("saf_has_segments"), null);
    }

    public <O extends Record> SafHasSegments(Table<O> child, ForeignKey<O, SafHasSegmentsRecord> key) {
        super(child, key, SAF_HAS_SEGMENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public SafHasSegments as(String alias) {
        return new SafHasSegments(DSL.name(alias), this);
    }

    @Override
    public SafHasSegments as(Name alias) {
        return new SafHasSegments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SafHasSegments rename(String name) {
        return new SafHasSegments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SafHasSegments rename(Name name) {
        return new SafHasSegments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<BigDecimal, String, String, String, String, String, LocalTime, LocalTime, BigDecimal> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
