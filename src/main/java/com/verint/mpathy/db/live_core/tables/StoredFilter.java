/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.StoredFilterRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoredFilter extends TableImpl<StoredFilterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.stored_filter</code>
     */
    public static final StoredFilter STORED_FILTER = new StoredFilter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoredFilterRecord> getRecordType() {
        return StoredFilterRecord.class;
    }

    /**
     * The column <code>live_core.stored_filter.iduser</code>. Foreign Key to
     * "user"-Table.
     */
    public final TableField<StoredFilterRecord, BigDecimal> IDUSER = createField(DSL.name("iduser"), SQLDataType.NUMERIC.nullable(false), this, "Foreign Key to \"user\"-Table.");

    /**
     * The column <code>live_core.stored_filter.idsite</code>. Foreign Key to
     * "site"-Table.
     */
    public final TableField<StoredFilterRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER.nullable(false), this, "Foreign Key to \"site\"-Table.");

    /**
     * The column <code>live_core.stored_filter.hash</code>. A unique hash based
     * on the "request"- and "created"-value.
     */
    public final TableField<StoredFilterRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.CHAR(1).nullable(false), this, "A unique hash based on the \"request\"- and \"created\"-value.");

    /**
     * The column <code>live_core.stored_filter.description</code>. Do describe
     * the Filter.
     */
    public final TableField<StoredFilterRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "Do describe the Filter.");

    /**
     * The column <code>live_core.stored_filter.request</code>. Serialized
     * JSON-Object with the Filter-Request.
     */
    public final TableField<StoredFilterRecord, String> REQUEST = createField(DSL.name("request"), SQLDataType.CLOB.nullable(false), this, "Serialized JSON-Object with the Filter-Request.");

    /**
     * The column <code>live_core.stored_filter.visible</code>. Store the
     * visibility of the Filter ("true" = public, "false" = private).
     */
    public final TableField<StoredFilterRecord, Boolean> VISIBLE = createField(DSL.name("visible"), SQLDataType.BOOLEAN.nullable(false), this, "Store the visibility of the Filter (\"true\" = public, \"false\" = private).");

    /**
     * The column <code>live_core.stored_filter.created</code>. The creation
     * time of the Filter.
     */
    public final TableField<StoredFilterRecord, LocalTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALTIME(6).nullable(false), this, "The creation time of the Filter.");

    /**
     * The column <code>live_core.stored_filter.type</code>.
     */
    public final TableField<StoredFilterRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.stored_filter.used</code>.
     */
    public final TableField<StoredFilterRecord, LocalTime> USED = createField(DSL.name("used"), SQLDataType.LOCALTIME(6), this, "");

    private StoredFilter(Name alias, Table<StoredFilterRecord> aliased) {
        this(alias, aliased, null);
    }

    private StoredFilter(Name alias, Table<StoredFilterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live_core.stored_filter</code> table reference
     */
    public StoredFilter(String alias) {
        this(DSL.name(alias), STORED_FILTER);
    }

    /**
     * Create an aliased <code>live_core.stored_filter</code> table reference
     */
    public StoredFilter(Name alias) {
        this(alias, STORED_FILTER);
    }

    /**
     * Create a <code>live_core.stored_filter</code> table reference
     */
    public StoredFilter() {
        this(DSL.name("stored_filter"), null);
    }

    public <O extends Record> StoredFilter(Table<O> child, ForeignKey<O, StoredFilterRecord> key) {
        super(child, key, STORED_FILTER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public StoredFilter as(String alias) {
        return new StoredFilter(DSL.name(alias), this);
    }

    @Override
    public StoredFilter as(Name alias) {
        return new StoredFilter(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StoredFilter rename(String name) {
        return new StoredFilter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StoredFilter rename(Name name) {
        return new StoredFilter(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<BigDecimal, Integer, String, String, String, Boolean, LocalTime, String, LocalTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
