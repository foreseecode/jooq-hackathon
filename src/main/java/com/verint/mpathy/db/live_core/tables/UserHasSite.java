/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.UserHasSiteRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserHasSite extends TableImpl<UserHasSiteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.user_has_site</code>
     */
    public static final UserHasSite USER_HAS_SITE = new UserHasSite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserHasSiteRecord> getRecordType() {
        return UserHasSiteRecord.class;
    }

    /**
     * The column <code>live_core.user_has_site.idsite</code>.
     */
    public final TableField<UserHasSiteRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>live_core.user_has_site.iduser</code>.
     */
    public final TableField<UserHasSiteRecord, BigDecimal> IDUSER = createField(DSL.name("iduser"), SQLDataType.NUMERIC, this, "");

    private UserHasSite(Name alias, Table<UserHasSiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserHasSite(Name alias, Table<UserHasSiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"user_has_site\" as  SELECT user_has_site.idsite,\n    user_has_site.iduser\n   FROM live.user_has_site;"));
    }

    /**
     * Create an aliased <code>live_core.user_has_site</code> table reference
     */
    public UserHasSite(String alias) {
        this(DSL.name(alias), USER_HAS_SITE);
    }

    /**
     * Create an aliased <code>live_core.user_has_site</code> table reference
     */
    public UserHasSite(Name alias) {
        this(alias, USER_HAS_SITE);
    }

    /**
     * Create a <code>live_core.user_has_site</code> table reference
     */
    public UserHasSite() {
        this(DSL.name("user_has_site"), null);
    }

    public <O extends Record> UserHasSite(Table<O> child, ForeignKey<O, UserHasSiteRecord> key) {
        super(child, key, USER_HAS_SITE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public UserHasSite as(String alias) {
        return new UserHasSite(DSL.name(alias), this);
    }

    @Override
    public UserHasSite as(Name alias) {
        return new UserHasSite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserHasSite rename(String name) {
        return new UserHasSite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserHasSite rename(Name name) {
        return new UserHasSite(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, BigDecimal> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
