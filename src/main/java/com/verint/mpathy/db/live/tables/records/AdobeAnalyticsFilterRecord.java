/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables.records;


import com.verint.mpathy.db.live.tables.AdobeAnalyticsFilter;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdobeAnalyticsFilterRecord extends TableRecordImpl<AdobeAnalyticsFilterRecord> implements Record7<Long, BigDecimal, String, String, String, Boolean, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>live.adobe_analytics_filter.idfilter</code>. the primary
     * key. this serves as a reference to the table
     * "adobe_analytics_filter_pids".
     */
    public void setIdfilter(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>live.adobe_analytics_filter.idfilter</code>. the primary
     * key. this serves as a reference to the table
     * "adobe_analytics_filter_pids".
     */
    public Long getIdfilter() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>live.adobe_analytics_filter.idsuite</code>. the primary
     * key. This serves as a FK to the table "adobe_analytics_suite".
     */
    public void setIdsuite(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>live.adobe_analytics_filter.idsuite</code>. the primary
     * key. This serves as a FK to the table "adobe_analytics_suite".
     */
    public BigDecimal getIdsuite() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>live.adobe_analytics_filter.segment</code>. the adobe
     * analytics segment id to generate the analytics report for.
     */
    public void setSegment(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>live.adobe_analytics_filter.segment</code>. the adobe
     * analytics segment id to generate the analytics report for.
     */
    public String getSegment() {
        return (String) get(2);
    }

    /**
     * Setter for <code>live.adobe_analytics_filter.segment_name</code>. the
     * adobe analytics segment name.
     */
    public void setSegmentName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>live.adobe_analytics_filter.segment_name</code>. the
     * adobe analytics segment name.
     */
    public String getSegmentName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>live.adobe_analytics_filter.name</code>. the name of the
     * filter to be displayed in the frontend.
     */
    public void setName(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>live.adobe_analytics_filter.name</code>. the name of the
     * filter to be displayed in the frontend.
     */
    public String getName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>live.adobe_analytics_filter.filter_enabled</code>. only
     * shown as a filter option in the interface when set to true.
     */
    public void setFilterEnabled(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>live.adobe_analytics_filter.filter_enabled</code>. only
     * shown as a filter option in the interface when set to true.
     */
    public Boolean getFilterEnabled() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>live.adobe_analytics_filter.import_enabled</code>. only
     * report suites with evars that are enabled, are asked for new information.
     * Set this to false to disregard this entry.
     */
    public void setImportEnabled(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>live.adobe_analytics_filter.import_enabled</code>. only
     * report suites with evars that are enabled, are asked for new information.
     * Set this to false to disregard this entry.
     */
    public Boolean getImportEnabled() {
        return (Boolean) get(6);
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, BigDecimal, String, String, String, Boolean, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, BigDecimal, String, String, String, Boolean, Boolean> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AdobeAnalyticsFilter.ADOBE_ANALYTICS_FILTER.IDFILTER;
    }

    @Override
    public Field<BigDecimal> field2() {
        return AdobeAnalyticsFilter.ADOBE_ANALYTICS_FILTER.IDSUITE;
    }

    @Override
    public Field<String> field3() {
        return AdobeAnalyticsFilter.ADOBE_ANALYTICS_FILTER.SEGMENT;
    }

    @Override
    public Field<String> field4() {
        return AdobeAnalyticsFilter.ADOBE_ANALYTICS_FILTER.SEGMENT_NAME;
    }

    @Override
    public Field<String> field5() {
        return AdobeAnalyticsFilter.ADOBE_ANALYTICS_FILTER.NAME;
    }

    @Override
    public Field<Boolean> field6() {
        return AdobeAnalyticsFilter.ADOBE_ANALYTICS_FILTER.FILTER_ENABLED;
    }

    @Override
    public Field<Boolean> field7() {
        return AdobeAnalyticsFilter.ADOBE_ANALYTICS_FILTER.IMPORT_ENABLED;
    }

    @Override
    public Long component1() {
        return getIdfilter();
    }

    @Override
    public BigDecimal component2() {
        return getIdsuite();
    }

    @Override
    public String component3() {
        return getSegment();
    }

    @Override
    public String component4() {
        return getSegmentName();
    }

    @Override
    public String component5() {
        return getName();
    }

    @Override
    public Boolean component6() {
        return getFilterEnabled();
    }

    @Override
    public Boolean component7() {
        return getImportEnabled();
    }

    @Override
    public Long value1() {
        return getIdfilter();
    }

    @Override
    public BigDecimal value2() {
        return getIdsuite();
    }

    @Override
    public String value3() {
        return getSegment();
    }

    @Override
    public String value4() {
        return getSegmentName();
    }

    @Override
    public String value5() {
        return getName();
    }

    @Override
    public Boolean value6() {
        return getFilterEnabled();
    }

    @Override
    public Boolean value7() {
        return getImportEnabled();
    }

    @Override
    public AdobeAnalyticsFilterRecord value1(Long value) {
        setIdfilter(value);
        return this;
    }

    @Override
    public AdobeAnalyticsFilterRecord value2(BigDecimal value) {
        setIdsuite(value);
        return this;
    }

    @Override
    public AdobeAnalyticsFilterRecord value3(String value) {
        setSegment(value);
        return this;
    }

    @Override
    public AdobeAnalyticsFilterRecord value4(String value) {
        setSegmentName(value);
        return this;
    }

    @Override
    public AdobeAnalyticsFilterRecord value5(String value) {
        setName(value);
        return this;
    }

    @Override
    public AdobeAnalyticsFilterRecord value6(Boolean value) {
        setFilterEnabled(value);
        return this;
    }

    @Override
    public AdobeAnalyticsFilterRecord value7(Boolean value) {
        setImportEnabled(value);
        return this;
    }

    @Override
    public AdobeAnalyticsFilterRecord values(Long value1, BigDecimal value2, String value3, String value4, String value5, Boolean value6, Boolean value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AdobeAnalyticsFilterRecord
     */
    public AdobeAnalyticsFilterRecord() {
        super(AdobeAnalyticsFilter.ADOBE_ANALYTICS_FILTER);
    }

    /**
     * Create a detached, initialised AdobeAnalyticsFilterRecord
     */
    public AdobeAnalyticsFilterRecord(Long idfilter, BigDecimal idsuite, String segment, String segmentName, String name, Boolean filterEnabled, Boolean importEnabled) {
        super(AdobeAnalyticsFilter.ADOBE_ANALYTICS_FILTER);

        setIdfilter(idfilter);
        setIdsuite(idsuite);
        setSegment(segment);
        setSegmentName(segmentName);
        setName(name);
        setFilterEnabled(filterEnabled);
        setImportEnabled(importEnabled);
    }
}
