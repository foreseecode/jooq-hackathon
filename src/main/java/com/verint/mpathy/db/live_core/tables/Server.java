/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.ServerRecord;

import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Server extends TableImpl<ServerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.server</code>
     */
    public static final Server SERVER = new Server();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerRecord> getRecordType() {
        return ServerRecord.class;
    }

    /**
     * The column <code>live_core.server.idserver</code>.
     */
    public final TableField<ServerRecord, Short> IDSERVER = createField(DSL.name("idserver"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.server.name</code>.
     */
    public final TableField<ServerRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.server.heartbeat</code>.
     */
    public final TableField<ServerRecord, LocalTime> HEARTBEAT = createField(DSL.name("heartbeat"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.server.active</code>.
     */
    public final TableField<ServerRecord, Short> ACTIVE = createField(DSL.name("active"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.server.ip_ext_1</code>.
     */
    public final TableField<ServerRecord, String> IP_EXT_1 = createField(DSL.name("ip_ext_1"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.server.ip_ext_2</code>.
     */
    public final TableField<ServerRecord, String> IP_EXT_2 = createField(DSL.name("ip_ext_2"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.server.ip_ext_3</code>.
     */
    public final TableField<ServerRecord, String> IP_EXT_3 = createField(DSL.name("ip_ext_3"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.server.ip_int_1</code>.
     */
    public final TableField<ServerRecord, String> IP_INT_1 = createField(DSL.name("ip_int_1"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.server.domain_rec</code>.
     */
    public final TableField<ServerRecord, String> DOMAIN_REC = createField(DSL.name("domain_rec"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.server.domain_srec</code>.
     */
    public final TableField<ServerRecord, String> DOMAIN_SREC = createField(DSL.name("domain_srec"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.server.domain_core</code>.
     */
    public final TableField<ServerRecord, String> DOMAIN_CORE = createField(DSL.name("domain_core"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.server.domain_play</code>.
     */
    public final TableField<ServerRecord, String> DOMAIN_PLAY = createField(DSL.name("domain_play"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.server.domain_fn</code>.
     */
    public final TableField<ServerRecord, String> DOMAIN_FN = createField(DSL.name("domain_fn"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.server.description</code>.
     */
    public final TableField<ServerRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private Server(Name alias, Table<ServerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Server(Name alias, Table<ServerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"server\" as  SELECT server.idserver,\n    server.name,\n    server.heartbeat,\n    server.active,\n    server.ip_ext_1,\n    server.ip_ext_2,\n    server.ip_ext_3,\n    server.ip_int_1,\n    server.domain_rec,\n    server.domain_srec,\n    server.domain_core,\n    server.domain_play,\n    server.domain_fn,\n    server.description\n   FROM live.server;"));
    }

    /**
     * Create an aliased <code>live_core.server</code> table reference
     */
    public Server(String alias) {
        this(DSL.name(alias), SERVER);
    }

    /**
     * Create an aliased <code>live_core.server</code> table reference
     */
    public Server(Name alias) {
        this(alias, SERVER);
    }

    /**
     * Create a <code>live_core.server</code> table reference
     */
    public Server() {
        this(DSL.name("server"), null);
    }

    public <O extends Record> Server(Table<O> child, ForeignKey<O, ServerRecord> key) {
        super(child, key, SERVER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public Server as(String alias) {
        return new Server(DSL.name(alias), this);
    }

    @Override
    public Server as(Name alias) {
        return new Server(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Server rename(String name) {
        return new Server(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Server rename(Name name) {
        return new Server(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Short, String, LocalTime, Short, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
