/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.ResourceOldRecord;

import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResourceOld extends TableImpl<ResourceOldRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.resource_old</code>
     */
    public static final ResourceOld RESOURCE_OLD = new ResourceOld();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResourceOldRecord> getRecordType() {
        return ResourceOldRecord.class;
    }

    /**
     * The column <code>live_core.resource_old.idres</code>.
     */
    public final TableField<ResourceOldRecord, Long> IDRES = createField(DSL.name("idres"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.resource_old.original_url</code>.
     */
    public final TableField<ResourceOldRecord, String> ORIGINAL_URL = createField(DSL.name("original_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.resource_old.hash</code>.
     */
    public final TableField<ResourceOldRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.resource_old.path</code>.
     */
    public final TableField<ResourceOldRecord, String> PATH = createField(DSL.name("path"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.resource_old.status</code>.
     */
    public final TableField<ResourceOldRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>live_core.resource_old.mime_type</code>.
     */
    public final TableField<ResourceOldRecord, String> MIME_TYPE = createField(DSL.name("mime_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live_core.resource_old.created</code>.
     */
    public final TableField<ResourceOldRecord, LocalTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.resource_old.date</code>.
     */
    public final TableField<ResourceOldRecord, LocalTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live_core.resource_old.download_url</code>.
     */
    public final TableField<ResourceOldRecord, String> DOWNLOAD_URL = createField(DSL.name("download_url"), SQLDataType.CLOB, this, "");

    private ResourceOld(Name alias, Table<ResourceOldRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResourceOld(Name alias, Table<ResourceOldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"resource_old\" as  SELECT resource_old.idres,\n    resource_old.original_url,\n    resource_old.hash,\n    resource_old.path,\n    resource_old.status,\n    resource_old.mime_type,\n    resource_old.created,\n    resource_old.date,\n    resource_old.download_url\n   FROM live.resource_old;"));
    }

    /**
     * Create an aliased <code>live_core.resource_old</code> table reference
     */
    public ResourceOld(String alias) {
        this(DSL.name(alias), RESOURCE_OLD);
    }

    /**
     * Create an aliased <code>live_core.resource_old</code> table reference
     */
    public ResourceOld(Name alias) {
        this(alias, RESOURCE_OLD);
    }

    /**
     * Create a <code>live_core.resource_old</code> table reference
     */
    public ResourceOld() {
        this(DSL.name("resource_old"), null);
    }

    public <O extends Record> ResourceOld(Table<O> child, ForeignKey<O, ResourceOldRecord> key) {
        super(child, key, RESOURCE_OLD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public ResourceOld as(String alias) {
        return new ResourceOld(DSL.name(alias), this);
    }

    @Override
    public ResourceOld as(Name alias) {
        return new ResourceOld(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceOld rename(String name) {
        return new ResourceOld(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceOld rename(Name name) {
        return new ResourceOld(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, Short, String, LocalTime, LocalTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
