/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live;


import com.verint.mpathy.db.live.tables.Account;
import com.verint.mpathy.db.live.tables.AdobeAnalyticsFilter;
import com.verint.mpathy.db.live.tables.AdobeAnalyticsFilterSession;
import com.verint.mpathy.db.live.tables.AdobeAnalyticsFilterVisitor;
import com.verint.mpathy.db.live.tables.AdobeAnalyticsSuite;
import com.verint.mpathy.db.live.tables.AdobeAnalyticsSuiteImportsettings;
import com.verint.mpathy.db.live.tables.AggregationPlan;
import com.verint.mpathy.db.live.tables.Bucket;
import com.verint.mpathy.db.live.tables.BucketAlertEmailSetting;
import com.verint.mpathy.db.live.tables.BucketCount;
import com.verint.mpathy.db.live.tables.BucketCountBdtcjn6dtf;
import com.verint.mpathy.db.live.tables.BucketCountCwav87wdqu;
import com.verint.mpathy.db.live.tables.BucketCountMdxdlwkdtm;
import com.verint.mpathy.db.live.tables.BucketCountVuxuvm8wek;
import com.verint.mpathy.db.live.tables.BucketCountXwwlf8vbaw;
import com.verint.mpathy.db.live.tables.BucketCountZdth64uzum;
import com.verint.mpathy.db.live.tables.BucketTemplate;
import com.verint.mpathy.db.live.tables.CassandraCleanlist;
import com.verint.mpathy.db.live.tables.ComscoreFilter;
import com.verint.mpathy.db.live.tables.ComscoreFilterPids;
import com.verint.mpathy.db.live.tables.Cp_10001Pageimpression;
import com.verint.mpathy.db.live.tables.Cp_10010Pageimpression;
import com.verint.mpathy.db.live.tables.Cp_1Pageimpression;
import com.verint.mpathy.db.live.tables.Cp_1Session;
import com.verint.mpathy.db.live.tables.Cp_2Pageimpression;
import com.verint.mpathy.db.live.tables.Cp_3338Pageimpression;
import com.verint.mpathy.db.live.tables.Cp_3338Session;
import com.verint.mpathy.db.live.tables.Cp_3Pageimpression;
import com.verint.mpathy.db.live.tables.Cp_3Session;
import com.verint.mpathy.db.live.tables.Cp_4Pageimpression;
import com.verint.mpathy.db.live.tables.Cp_5Pageimpression;
import com.verint.mpathy.db.live.tables.Cp_5Session;
import com.verint.mpathy.db.live.tables.Customparameter;
import com.verint.mpathy.db.live.tables.CustomparameterDomtree;
import com.verint.mpathy.db.live.tables.CustomparameterLucene;
import com.verint.mpathy.db.live.tables.CustomparameterPatterndetector;
import com.verint.mpathy.db.live.tables.CustomparameterSqlquery;
import com.verint.mpathy.db.live.tables.DataBaseTest;
import com.verint.mpathy.db.live.tables.DebugClient;
import com.verint.mpathy.db.live.tables.DeviceInfoJsonPair;
import com.verint.mpathy.db.live.tables.Document;
import com.verint.mpathy.db.live.tables.Element;
import com.verint.mpathy.db.live.tables.ElementVisible;
import com.verint.mpathy.db.live.tables.Event;
import com.verint.mpathy.db.live.tables.EventClick;
import com.verint.mpathy.db.live.tables.EventFocus;
import com.verint.mpathy.db.live.tables.EventHover;
import com.verint.mpathy.db.live.tables.EventTable;
import com.verint.mpathy.db.live.tables.ExceptionFilter;
import com.verint.mpathy.db.live.tables.Exportqueue;
import com.verint.mpathy.db.live.tables.FormelementAction;
import com.verint.mpathy.db.live.tables.FormelementactionHasTaskitem;
import com.verint.mpathy.db.live.tables.Gesture;
import com.verint.mpathy.db.live.tables.HeadlessAnswer;
import com.verint.mpathy.db.live.tables.HeadlessPollsShowed;
import com.verint.mpathy.db.live.tables.HeadlessResponseRate;
import com.verint.mpathy.db.live.tables.HeadlessanswerHasProperty;
import com.verint.mpathy.db.live.tables.HistoryTrackingAmount;
import com.verint.mpathy.db.live.tables.HistoryTrackingRate;
import com.verint.mpathy.db.live.tables.Is24Filter;
import com.verint.mpathy.db.live.tables.Is24FilterPids;
import com.verint.mpathy.db.live.tables.JsonDatatype;
import com.verint.mpathy.db.live.tables.JsonKey;
import com.verint.mpathy.db.live.tables.JsonValue;
import com.verint.mpathy.db.live.tables.LogPageHasAnswer;
import com.verint.mpathy.db.live.tables.LogSession;
import com.verint.mpathy.db.live.tables.LogSessionState;
import com.verint.mpathy.db.live.tables.MagicCode;
import com.verint.mpathy.db.live.tables.MapClick;
import com.verint.mpathy.db.live.tables.MapClickBotched;
import com.verint.mpathy.db.live.tables.MapClickCleanup;
import com.verint.mpathy.db.live.tables.MapClickKp;
import com.verint.mpathy.db.live.tables.MapClickPathinfo;
import com.verint.mpathy.db.live.tables.MapClickPathinfo_11024;
import com.verint.mpathy.db.live.tables.MapClickPathinfo_11198;
import com.verint.mpathy.db.live.tables.MapClickPathinfo_11689;
import com.verint.mpathy.db.live.tables.MapClickPathnode;
import com.verint.mpathy.db.live.tables.MapClickSettings;
import com.verint.mpathy.db.live.tables.MapClick_3135;
import com.verint.mpathy.db.live.tables.MapFocus;
import com.verint.mpathy.db.live.tables.MapMove;
import com.verint.mpathy.db.live.tables.MapMove_3;
import com.verint.mpathy.db.live.tables.MapScroll;
import com.verint.mpathy.db.live.tables.MapVisible;
import com.verint.mpathy.db.live.tables.Mdata;
import com.verint.mpathy.db.live.tables.Metadata;
import com.verint.mpathy.db.live.tables.MobileDevice;
import com.verint.mpathy.db.live.tables.MobileMetric;
import com.verint.mpathy.db.live.tables.Movement_0t1;
import com.verint.mpathy.db.live.tables.Movement_10t60;
import com.verint.mpathy.db.live.tables.Movement_120;
import com.verint.mpathy.db.live.tables.Movement_1t2;
import com.verint.mpathy.db.live.tables.Movement_2t3;
import com.verint.mpathy.db.live.tables.Movement_3t4;
import com.verint.mpathy.db.live.tables.Movement_4t5;
import com.verint.mpathy.db.live.tables.Movement_5t10;
import com.verint.mpathy.db.live.tables.Movement_60t120;
import com.verint.mpathy.db.live.tables.Movementmap;
import com.verint.mpathy.db.live.tables.Page;
import com.verint.mpathy.db.live.tables.PageFilter;
import com.verint.mpathy.db.live.tables.PageHasAnswer;
import com.verint.mpathy.db.live.tables.PageHasEtlvisitorreplayreadyevent;
import com.verint.mpathy.db.live.tables.PageHasGesture;
import com.verint.mpathy.db.live.tables.PageHasResource;
import com.verint.mpathy.db.live.tables.PageHasRespondent;
import com.verint.mpathy.db.live.tables.PageHasRespondentProd;
import com.verint.mpathy.db.live.tables.PageHasRespondentoldVoc_13071;
import com.verint.mpathy.db.live.tables.PageHasTag;
import com.verint.mpathy.db.live.tables.PageHasVideo;
import com.verint.mpathy.db.live.tables.PageName;
import com.verint.mpathy.db.live.tables.PageNameBlocklist;
import com.verint.mpathy.db.live.tables.PageNameImport;
import com.verint.mpathy.db.live.tables.PageStats;
import com.verint.mpathy.db.live.tables.PagenamesToDelete;
import com.verint.mpathy.db.live.tables.Privilege;
import com.verint.mpathy.db.live.tables.PropertyValues;
import com.verint.mpathy.db.live.tables.Questionnaire;
import com.verint.mpathy.db.live.tables.QuestionnaireAlert;
import com.verint.mpathy.db.live.tables.QuestionnaireCrypt;
import com.verint.mpathy.db.live.tables.QuestionnaireElement;
import com.verint.mpathy.db.live.tables.QuestionnaireHasExport;
import com.verint.mpathy.db.live.tables.QuestionnaireHasFile;
import com.verint.mpathy.db.live.tables.QuestionnaireLayout;
import com.verint.mpathy.db.live.tables.QuestionnaireType;
import com.verint.mpathy.db.live.tables.Raster;
import com.verint.mpathy.db.live.tables.Ratio;
import com.verint.mpathy.db.live.tables.RatioType;
import com.verint.mpathy.db.live.tables.ResourceExcludeBot;
import com.verint.mpathy.db.live.tables.ResourceExcludeHost;
import com.verint.mpathy.db.live.tables.ResourceExcludeKeyword;
import com.verint.mpathy.db.live.tables.ResourceHasParent;
import com.verint.mpathy.db.live.tables.ResourceIncludeProtocol;
import com.verint.mpathy.db.live.tables.ResourceOld;
import com.verint.mpathy.db.live.tables.ResourceReimport;
import com.verint.mpathy.db.live.tables.ResourceRule;
import com.verint.mpathy.db.live.tables.SafHasSegments;
import com.verint.mpathy.db.live.tables.SafSegmentHasPage;
import com.verint.mpathy.db.live.tables.SchemaInfo;
import com.verint.mpathy.db.live.tables.Scrollingmap;
import com.verint.mpathy.db.live.tables.Server;
import com.verint.mpathy.db.live.tables.Session;
import com.verint.mpathy.db.live.tables.SessionHasMetadata;
import com.verint.mpathy.db.live.tables.SessionHasMobileDevice;
import com.verint.mpathy.db.live.tables.SessionHasPagename;
import com.verint.mpathy.db.live.tables.SessionHasResource;
import com.verint.mpathy.db.live.tables.SessionReimport;
import com.verint.mpathy.db.live.tables.SessionSelection;
import com.verint.mpathy.db.live.tables.Sessionstats24h;
import com.verint.mpathy.db.live.tables.Settings;
import com.verint.mpathy.db.live.tables.Site;
import com.verint.mpathy.db.live.tables.SiteApiFiles;
import com.verint.mpathy.db.live.tables.SiteHasVendor;
import com.verint.mpathy.db.live.tables.Sitestats;
import com.verint.mpathy.db.live.tables.StageJsonPair;
import com.verint.mpathy.db.live.tables.StruggleIndicatorDeadClickCount;
import com.verint.mpathy.db.live.tables.StruggleIndicatorDomloadTime;
import com.verint.mpathy.db.live.tables.StruggleIndicatorErrorMessageCount;
import com.verint.mpathy.db.live.tables.StruggleIndicatorErrorPage;
import com.verint.mpathy.db.live.tables.StruggleIndicatorFormFieldAbandonment;
import com.verint.mpathy.db.live.tables.StruggleIndicatorFormFieldModificationCount;
import com.verint.mpathy.db.live.tables.StruggleIndicatorFunnelStepRepetition;
import com.verint.mpathy.db.live.tables.StruggleIndicatorJsErrorCount;
import com.verint.mpathy.db.live.tables.StruggleIndicatorLongInputTime;
import com.verint.mpathy.db.live.tables.StruggleIndicatorRageClickCount;
import com.verint.mpathy.db.live.tables.StruggleIndicatorScrollDirectionChangeCount;
import com.verint.mpathy.db.live.tables.StruggleScorePage;
import com.verint.mpathy.db.live.tables.StruggleScoreSession;
import com.verint.mpathy.db.live.tables.Tag;
import com.verint.mpathy.db.live.tables.Task;
import com.verint.mpathy.db.live.tables.TaskAction;
import com.verint.mpathy.db.live.tables.TaskHasRatio;
import com.verint.mpathy.db.live.tables.TaskItem;
import com.verint.mpathy.db.live.tables.TaskItemAction;
import com.verint.mpathy.db.live.tables.TaskitemHasPage;
import com.verint.mpathy.db.live.tables.TaskitemHasPagename;
import com.verint.mpathy.db.live.tables.TestDv_2020_07_24;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_20010141;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_20013229;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_20014116;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_20014677;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_2001621;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_2001646;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_20017851;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_20018558;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_20018769;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_20019106;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_200343;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_2005866;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_2005981;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_2006763;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_2007834;
import com.verint.mpathy.db.live.tables.TmpForDebugDeleteSessions_2009120;
import com.verint.mpathy.db.live.tables.TmpSelection_266184216;
import com.verint.mpathy.db.live.tables.TmpSelection_63943770;
import com.verint.mpathy.db.live.tables.Tmp_0;
import com.verint.mpathy.db.live.tables.TrackingConfig;
import com.verint.mpathy.db.live.tables.TrackingSetup;
import com.verint.mpathy.db.live.tables.Trafficstats;
import com.verint.mpathy.db.live.tables.Trafficstats31d;
import com.verint.mpathy.db.live.tables.UnmappedPage;
import com.verint.mpathy.db.live.tables.Url;
import com.verint.mpathy.db.live.tables.User;
import com.verint.mpathy.db.live.tables.UserHasPrivilege;
import com.verint.mpathy.db.live.tables.UserHasSaf;
import com.verint.mpathy.db.live.tables.UserHasSite;
import com.verint.mpathy.db.live.tables.UserViewedDashboard;
import com.verint.mpathy.db.live.tables.Useragent;
import com.verint.mpathy.db.live.tables.Useragents2;
import com.verint.mpathy.db.live.tables.Useragents3;
import com.verint.mpathy.db.live.tables.Vendor;
import com.verint.mpathy.db.live.tables.Video;
import com.verint.mpathy.db.live.tables.VideoPageStats;
import com.verint.mpathy.db.live.tables.Visitor;
import com.verint.mpathy.db.live.tables._SessionSelection;
import com.verint.mpathy.db.live.tables._TmpUseragentsDv2020_08_06;


/**
 * Convenience access to all tables in live.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tables {

    /**
     * The table <code>live._session_selection</code>.
     */
    public static final _SessionSelection _SESSION_SELECTION = _SessionSelection._SESSION_SELECTION;

    /**
     * The table <code>live._TMP-useragents-dv2020-08-06</code>.
     */
    public static final _TmpUseragentsDv2020_08_06 _TMP_USERAGENTS_DV2020_08_06 = _TmpUseragentsDv2020_08_06._TMP_USERAGENTS_DV2020_08_06;

    /**
     * The table <code>live.account</code>.
     */
    public static final Account ACCOUNT = Account.ACCOUNT;

    /**
     * The table <code>live.adobe_analytics_filter</code>.
     */
    public static final AdobeAnalyticsFilter ADOBE_ANALYTICS_FILTER = AdobeAnalyticsFilter.ADOBE_ANALYTICS_FILTER;

    /**
     * The table <code>live.adobe_analytics_filter_session</code>.
     */
    public static final AdobeAnalyticsFilterSession ADOBE_ANALYTICS_FILTER_SESSION = AdobeAnalyticsFilterSession.ADOBE_ANALYTICS_FILTER_SESSION;

    /**
     * The table <code>live.adobe_analytics_filter_visitor</code>.
     */
    public static final AdobeAnalyticsFilterVisitor ADOBE_ANALYTICS_FILTER_VISITOR = AdobeAnalyticsFilterVisitor.ADOBE_ANALYTICS_FILTER_VISITOR;

    /**
     * The table <code>live.adobe_analytics_suite</code>.
     */
    public static final AdobeAnalyticsSuite ADOBE_ANALYTICS_SUITE = AdobeAnalyticsSuite.ADOBE_ANALYTICS_SUITE;

    /**
     * The table <code>live.adobe_analytics_suite_importsettings</code>.
     */
    public static final AdobeAnalyticsSuiteImportsettings ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS = AdobeAnalyticsSuiteImportsettings.ADOBE_ANALYTICS_SUITE_IMPORTSETTINGS;

    /**
     * The table <code>live.aggregation_plan</code>.
     */
    public static final AggregationPlan AGGREGATION_PLAN = AggregationPlan.AGGREGATION_PLAN;

    /**
     * The table <code>live.bucket</code>.
     */
    public static final Bucket BUCKET = Bucket.BUCKET;

    /**
     * The table <code>live.bucket_alert_email_setting</code>.
     */
    public static final BucketAlertEmailSetting BUCKET_ALERT_EMAIL_SETTING = BucketAlertEmailSetting.BUCKET_ALERT_EMAIL_SETTING;

    /**
     * The table <code>live.bucket_count</code>.
     */
    public static final BucketCount BUCKET_COUNT = BucketCount.BUCKET_COUNT;

    /**
     * The table <code>live.bucket_count_bDTcJn6dTf</code>.
     */
    public static final BucketCountBdtcjn6dtf BUCKET_COUNT_BDTCJN6DTF = BucketCountBdtcjn6dtf.BUCKET_COUNT_BDTCJN6DTF;

    /**
     * The table <code>live.bucket_count_CwaV87wDQu</code>.
     */
    public static final BucketCountCwav87wdqu BUCKET_COUNT_CWAV87WDQU = BucketCountCwav87wdqu.BUCKET_COUNT_CWAV87WDQU;

    /**
     * The table <code>live.bucket_count_mDxdLWkdtm</code>.
     */
    public static final BucketCountMdxdlwkdtm BUCKET_COUNT_MDXDLWKDTM = BucketCountMdxdlwkdtm.BUCKET_COUNT_MDXDLWKDTM;

    /**
     * The table <code>live.bucket_count_vUxuVm8wek</code>.
     */
    public static final BucketCountVuxuvm8wek BUCKET_COUNT_VUXUVM8WEK = BucketCountVuxuvm8wek.BUCKET_COUNT_VUXUVM8WEK;

    /**
     * The table <code>live.bucket_count_xWwLF8VBaw</code>.
     */
    public static final BucketCountXwwlf8vbaw BUCKET_COUNT_XWWLF8VBAW = BucketCountXwwlf8vbaw.BUCKET_COUNT_XWWLF8VBAW;

    /**
     * The table <code>live.bucket_count_ZDTH64uZUM</code>.
     */
    public static final BucketCountZdth64uzum BUCKET_COUNT_ZDTH64UZUM = BucketCountZdth64uzum.BUCKET_COUNT_ZDTH64UZUM;

    /**
     * The table <code>live.bucket_template</code>.
     */
    public static final BucketTemplate BUCKET_TEMPLATE = BucketTemplate.BUCKET_TEMPLATE;

    /**
     * The table <code>live.cassandra_cleanlist</code>.
     */
    public static final CassandraCleanlist CASSANDRA_CLEANLIST = CassandraCleanlist.CASSANDRA_CLEANLIST;

    /**
     * The table <code>live.comscore_filter</code>.
     */
    public static final ComscoreFilter COMSCORE_FILTER = ComscoreFilter.COMSCORE_FILTER;

    /**
     * The table <code>live.comscore_filter_pids</code>.
     */
    public static final ComscoreFilterPids COMSCORE_FILTER_PIDS = ComscoreFilterPids.COMSCORE_FILTER_PIDS;

    /**
     * The table <code>live.cp_10001_pageimpression</code>.
     */
    public static final Cp_10001Pageimpression CP_10001_PAGEIMPRESSION = Cp_10001Pageimpression.CP_10001_PAGEIMPRESSION;

    /**
     * The table <code>live.cp_10010_pageimpression</code>.
     */
    public static final Cp_10010Pageimpression CP_10010_PAGEIMPRESSION = Cp_10010Pageimpression.CP_10010_PAGEIMPRESSION;

    /**
     * The table <code>live.cp_1_pageimpression</code>.
     */
    public static final Cp_1Pageimpression CP_1_PAGEIMPRESSION = Cp_1Pageimpression.CP_1_PAGEIMPRESSION;

    /**
     * The table <code>live.cp_1_session</code>.
     */
    public static final Cp_1Session CP_1_SESSION = Cp_1Session.CP_1_SESSION;

    /**
     * The table <code>live.cp_2_pageimpression</code>.
     */
    public static final Cp_2Pageimpression CP_2_PAGEIMPRESSION = Cp_2Pageimpression.CP_2_PAGEIMPRESSION;

    /**
     * The table <code>live.cp_3338_pageimpression</code>.
     */
    public static final Cp_3338Pageimpression CP_3338_PAGEIMPRESSION = Cp_3338Pageimpression.CP_3338_PAGEIMPRESSION;

    /**
     * The table <code>live.cp_3338_session</code>.
     */
    public static final Cp_3338Session CP_3338_SESSION = Cp_3338Session.CP_3338_SESSION;

    /**
     * The table <code>live.cp_3_pageimpression</code>.
     */
    public static final Cp_3Pageimpression CP_3_PAGEIMPRESSION = Cp_3Pageimpression.CP_3_PAGEIMPRESSION;

    /**
     * The table <code>live.cp_3_session</code>.
     */
    public static final Cp_3Session CP_3_SESSION = Cp_3Session.CP_3_SESSION;

    /**
     * The table <code>live.cp_4_pageimpression</code>.
     */
    public static final Cp_4Pageimpression CP_4_PAGEIMPRESSION = Cp_4Pageimpression.CP_4_PAGEIMPRESSION;

    /**
     * The table <code>live.cp_5_pageimpression</code>.
     */
    public static final Cp_5Pageimpression CP_5_PAGEIMPRESSION = Cp_5Pageimpression.CP_5_PAGEIMPRESSION;

    /**
     * The table <code>live.cp_5_session</code>.
     */
    public static final Cp_5Session CP_5_SESSION = Cp_5Session.CP_5_SESSION;

    /**
     * The table <code>live.customparameter</code>.
     */
    public static final Customparameter CUSTOMPARAMETER = Customparameter.CUSTOMPARAMETER;

    /**
     * The table <code>live.customparameter_domtree</code>.
     */
    public static final CustomparameterDomtree CUSTOMPARAMETER_DOMTREE = CustomparameterDomtree.CUSTOMPARAMETER_DOMTREE;

    /**
     * The table <code>live.customparameter_lucene</code>.
     */
    public static final CustomparameterLucene CUSTOMPARAMETER_LUCENE = CustomparameterLucene.CUSTOMPARAMETER_LUCENE;

    /**
     * The table <code>live.customparameter_patterndetector</code>.
     */
    public static final CustomparameterPatterndetector CUSTOMPARAMETER_PATTERNDETECTOR = CustomparameterPatterndetector.CUSTOMPARAMETER_PATTERNDETECTOR;

    /**
     * The table <code>live.customparameter_sqlquery</code>.
     */
    public static final CustomparameterSqlquery CUSTOMPARAMETER_SQLQUERY = CustomparameterSqlquery.CUSTOMPARAMETER_SQLQUERY;

    /**
     * The table <code>live.data_base_test</code>.
     */
    public static final DataBaseTest DATA_BASE_TEST = DataBaseTest.DATA_BASE_TEST;

    /**
     * The table <code>live.debug_client</code>.
     */
    public static final DebugClient DEBUG_CLIENT = DebugClient.DEBUG_CLIENT;

    /**
     * This table contains all json references for the "video_page_stats" table
     * and his "device_info" column.
     */
    public static final DeviceInfoJsonPair DEVICE_INFO_JSON_PAIR = DeviceInfoJsonPair.DEVICE_INFO_JSON_PAIR;

    /**
     * Table to increment the references to cassandra documents.
     */
    public static final Document DOCUMENT = Document.DOCUMENT;

    /**
     * The table <code>live.element</code>.
     */
    public static final Element ELEMENT = Element.ELEMENT;

    /**
     * The table <code>live.element_visible</code>.
     */
    public static final ElementVisible ELEMENT_VISIBLE = ElementVisible.ELEMENT_VISIBLE;

    /**
     * The table <code>live.event</code>.
     */
    public static final Event EVENT = Event.EVENT;

    /**
     * The table <code>live.event_click</code>.
     */
    public static final EventClick EVENT_CLICK = EventClick.EVENT_CLICK;

    /**
     * The table <code>live.event_focus</code>.
     */
    public static final EventFocus EVENT_FOCUS = EventFocus.EVENT_FOCUS;

    /**
     * The table <code>live.event_hover</code>.
     */
    public static final EventHover EVENT_HOVER = EventHover.EVENT_HOVER;

    /**
     * The table <code>live.event_table</code>.
     */
    public static final EventTable EVENT_TABLE = EventTable.EVENT_TABLE;

    /**
     * The table <code>live.exception_filter</code>.
     */
    public static final ExceptionFilter EXCEPTION_FILTER = ExceptionFilter.EXCEPTION_FILTER;

    /**
     * The table <code>live.exportqueue</code>.
     */
    public static final Exportqueue EXPORTQUEUE = Exportqueue.EXPORTQUEUE;

    /**
     * The table <code>live.formelement_action</code>.
     */
    public static final FormelementAction FORMELEMENT_ACTION = FormelementAction.FORMELEMENT_ACTION;

    /**
     * The table <code>live.formelementaction_has_taskitem</code>.
     */
    public static final FormelementactionHasTaskitem FORMELEMENTACTION_HAS_TASKITEM = FormelementactionHasTaskitem.FORMELEMENTACTION_HAS_TASKITEM;

    /**
     * Table with all known gesture of mobile devices.
     */
    public static final Gesture GESTURE = Gesture.GESTURE;

    /**
     * Collect all row data of the polls without tracking.
     */
    public static final HeadlessAnswer HEADLESS_ANSWER = HeadlessAnswer.HEADLESS_ANSWER;

    /**
     * Collect the number of questionnaire that has been shown for a visitor.
     */
    public static final HeadlessPollsShowed HEADLESS_POLLS_SHOWED = HeadlessPollsShowed.HEADLESS_POLLS_SHOWED;

    /**
     * Collect the number of questionnaire that has been shown for a site.
     */
    public static final HeadlessResponseRate HEADLESS_RESPONSE_RATE = HeadlessResponseRate.HEADLESS_RESPONSE_RATE;

    /**
     * reference table that links properties with headless answers (properties
     * for polls without tracking)
     */
    public static final HeadlessanswerHasProperty HEADLESSANSWER_HAS_PROPERTY = HeadlessanswerHasProperty.HEADLESSANSWER_HAS_PROPERTY;

    /**
     * The table <code>live.history_tracking_amount</code>.
     */
    public static final HistoryTrackingAmount HISTORY_TRACKING_AMOUNT = HistoryTrackingAmount.HISTORY_TRACKING_AMOUNT;

    /**
     * The table <code>live.history_tracking_rate</code>.
     */
    public static final HistoryTrackingRate HISTORY_TRACKING_RATE = HistoryTrackingRate.HISTORY_TRACKING_RATE;

    /**
     * The table <code>live.is24_filter</code>.
     */
    public static final Is24Filter IS24_FILTER = Is24Filter.IS24_FILTER;

    /**
     * The table <code>live.is24_filter_pids</code>.
     */
    public static final Is24FilterPids IS24_FILTER_PIDS = Is24FilterPids.IS24_FILTER_PIDS;

    /**
     * This table contains all supported json datatypes for the "json_value"
     * table.
     */
    public static final JsonDatatype JSON_DATATYPE = JsonDatatype.JSON_DATATYPE;

    /**
     * This table contains all available json key name of "json_value" table.
     */
    public static final JsonKey JSON_KEY = JsonKey.JSON_KEY;

    /**
     * This table contains all json values for the "stage_json_pair" table.
     */
    public static final JsonValue JSON_VALUE = JsonValue.JSON_VALUE;

    /**
     * log table for page has answer merges
     */
    public static final LogPageHasAnswer LOG_PAGE_HAS_ANSWER = LogPageHasAnswer.LOG_PAGE_HAS_ANSWER;

    /**
     * The table <code>live.log_session</code>.
     */
    public static final LogSession LOG_SESSION = LogSession.LOG_SESSION;

    /**
     * A table for logging state transitions of sessions.
     */
    public static final LogSessionState LOG_SESSION_STATE = LogSessionState.LOG_SESSION_STATE;

    /**
     * The table <code>live.magic_code</code>.
     */
    public static final MagicCode MAGIC_CODE = MagicCode.MAGIC_CODE;

    /**
     * The table <code>live.map_click</code>.
     */
    public static final MapClick MAP_CLICK = MapClick.MAP_CLICK;

    /**
     * The table <code>live.map_click_3135</code>.
     */
    public static final MapClick_3135 MAP_CLICK_3135 = MapClick_3135.MAP_CLICK_3135;

    /**
     * The table <code>live.map_click_botched</code>.
     */
    public static final MapClickBotched MAP_CLICK_BOTCHED = MapClickBotched.MAP_CLICK_BOTCHED;

    /**
     * The table <code>live.map_click_cleanup</code>.
     */
    public static final MapClickCleanup MAP_CLICK_CLEANUP = MapClickCleanup.MAP_CLICK_CLEANUP;

    /**
     * The table <code>live.map_click_kp</code>.
     */
    public static final MapClickKp MAP_CLICK_KP = MapClickKp.MAP_CLICK_KP;

    /**
     * The table <code>live.map_click_pathinfo</code>.
     */
    public static final MapClickPathinfo MAP_CLICK_PATHINFO = MapClickPathinfo.MAP_CLICK_PATHINFO;

    /**
     * The table <code>live.map_click_pathinfo_11024</code>.
     */
    public static final MapClickPathinfo_11024 MAP_CLICK_PATHINFO_11024 = MapClickPathinfo_11024.MAP_CLICK_PATHINFO_11024;

    /**
     * The table <code>live.map_click_pathinfo_11198</code>.
     */
    public static final MapClickPathinfo_11198 MAP_CLICK_PATHINFO_11198 = MapClickPathinfo_11198.MAP_CLICK_PATHINFO_11198;

    /**
     * The table <code>live.map_click_pathinfo_11689</code>.
     */
    public static final MapClickPathinfo_11689 MAP_CLICK_PATHINFO_11689 = MapClickPathinfo_11689.MAP_CLICK_PATHINFO_11689;

    /**
     * The table <code>live.map_click_pathnode</code>.
     */
    public static final MapClickPathnode MAP_CLICK_PATHNODE = MapClickPathnode.MAP_CLICK_PATHNODE;

    /**
     * The table <code>live.map_click_settings</code>.
     */
    public static final MapClickSettings MAP_CLICK_SETTINGS = MapClickSettings.MAP_CLICK_SETTINGS;

    /**
     * The table <code>live.map_focus</code>.
     */
    public static final MapFocus MAP_FOCUS = MapFocus.MAP_FOCUS;

    /**
     * The table <code>live.map_move</code>.
     */
    public static final MapMove MAP_MOVE = MapMove.MAP_MOVE;

    /**
     * Moves - every third move has been skipped during import.
     */
    public static final MapMove_3 MAP_MOVE_3 = MapMove_3.MAP_MOVE_3;

    /**
     * The table <code>live.map_scroll</code>.
     */
    public static final MapScroll MAP_SCROLL = MapScroll.MAP_SCROLL;

    /**
     * The table <code>live.map_visible</code>.
     */
    public static final MapVisible MAP_VISIBLE = MapVisible.MAP_VISIBLE;

    /**
     * The table <code>live.mdata</code>.
     */
    public static final Mdata MDATA = Mdata.MDATA;

    /**
     * The table <code>live.metadata</code>.
     */
    public static final Metadata METADATA = Metadata.METADATA;

    /**
     * The table contains all information about static information of a mobile
     * device.
     */
    public static final MobileDevice MOBILE_DEVICE = MobileDevice.MOBILE_DEVICE;

    /**
     * The table contains all information about dynamic information of a mobile
     * device.
     */
    public static final MobileMetric MOBILE_METRIC = MobileMetric.MOBILE_METRIC;

    /**
     * The table <code>live.movement_0t1</code>.
     */
    public static final Movement_0t1 MOVEMENT_0T1 = Movement_0t1.MOVEMENT_0T1;

    /**
     * The table <code>live.movement_10t60</code>.
     */
    public static final Movement_10t60 MOVEMENT_10T60 = Movement_10t60.MOVEMENT_10T60;

    /**
     * The table <code>live.movement_120</code>.
     */
    public static final Movement_120 MOVEMENT_120 = Movement_120.MOVEMENT_120;

    /**
     * The table <code>live.movement_1t2</code>.
     */
    public static final Movement_1t2 MOVEMENT_1T2 = Movement_1t2.MOVEMENT_1T2;

    /**
     * The table <code>live.movement_2t3</code>.
     */
    public static final Movement_2t3 MOVEMENT_2T3 = Movement_2t3.MOVEMENT_2T3;

    /**
     * The table <code>live.movement_3t4</code>.
     */
    public static final Movement_3t4 MOVEMENT_3T4 = Movement_3t4.MOVEMENT_3T4;

    /**
     * The table <code>live.movement_4t5</code>.
     */
    public static final Movement_4t5 MOVEMENT_4T5 = Movement_4t5.MOVEMENT_4T5;

    /**
     * The table <code>live.movement_5t10</code>.
     */
    public static final Movement_5t10 MOVEMENT_5T10 = Movement_5t10.MOVEMENT_5T10;

    /**
     * The table <code>live.movement_60t120</code>.
     */
    public static final Movement_60t120 MOVEMENT_60T120 = Movement_60t120.MOVEMENT_60T120;

    /**
     * The table <code>live.movementmap</code>.
     */
    public static final Movementmap MOVEMENTMAP = Movementmap.MOVEMENTMAP;

    /**
     * The table <code>live.page</code>.
     */
    public static final Page PAGE = Page.PAGE;

    /**
     * The table <code>live.page_filter</code>.
     */
    public static final PageFilter PAGE_FILTER = PageFilter.PAGE_FILTER;

    /**
     * The table <code>live.page_has_answer</code>.
     */
    public static final PageHasAnswer PAGE_HAS_ANSWER = PageHasAnswer.PAGE_HAS_ANSWER;

    /**
     * The table contains all specific information about videos for a page.
     */
    public static final PageHasEtlvisitorreplayreadyevent PAGE_HAS_ETLVISITORREPLAYREADYEVENT = PageHasEtlvisitorreplayreadyevent.PAGE_HAS_ETLVISITORREPLAYREADYEVENT;

    /**
     * Reference table (m:n connections) between "page" and "gesture" with a
     * occurrences counter.
     */
    public static final PageHasGesture PAGE_HAS_GESTURE = PageHasGesture.PAGE_HAS_GESTURE;

    /**
     * Reference table between "page" and "resource". Contains information for
     * resource usage
     */
    public static final PageHasResource PAGE_HAS_RESOURCE = PageHasResource.PAGE_HAS_RESOURCE;

    /**
     * The table <code>live.page_has_respondent</code>.
     */
    public static final PageHasRespondent PAGE_HAS_RESPONDENT = PageHasRespondent.PAGE_HAS_RESPONDENT;

    /**
     * The table <code>live.page_has_respondent_prod</code>.
     */
    public static final PageHasRespondentProd PAGE_HAS_RESPONDENT_PROD = PageHasRespondentProd.PAGE_HAS_RESPONDENT_PROD;

    /**
     * The table <code>live.page_has_respondentold_VOC-13071</code>.
     */
    public static final PageHasRespondentoldVoc_13071 PAGE_HAS_RESPONDENTOLD_VOC_13071 = PageHasRespondentoldVoc_13071.PAGE_HAS_RESPONDENTOLD_VOC_13071;

    /**
     * The table <code>live.page_has_tag</code>.
     */
    public static final PageHasTag PAGE_HAS_TAG = PageHasTag.PAGE_HAS_TAG;

    /**
     * The table contains all specific information about videos for a page.
     */
    public static final PageHasVideo PAGE_HAS_VIDEO = PageHasVideo.PAGE_HAS_VIDEO;

    /**
     * The table <code>live.page_name</code>.
     */
    public static final PageName PAGE_NAME = PageName.PAGE_NAME;

    /**
     * This table contains the visible text for a page.
     */
    public static final PageNameBlocklist PAGE_NAME_BLOCKLIST = PageNameBlocklist.PAGE_NAME_BLOCKLIST;

    /**
     * The table <code>live.page_name_import</code>.
     */
    public static final PageNameImport PAGE_NAME_IMPORT = PageNameImport.PAGE_NAME_IMPORT;

    /**
     * The table <code>live.page_stats</code>.
     */
    public static final PageStats PAGE_STATS = PageStats.PAGE_STATS;

    /**
     * The table <code>live.pagenames_to_delete</code>.
     */
    public static final PagenamesToDelete PAGENAMES_TO_DELETE = PagenamesToDelete.PAGENAMES_TO_DELETE;

    /**
     * The table <code>live.privilege</code>.
     */
    public static final Privilege PRIVILEGE = Privilege.PRIVILEGE;

    /**
     * The table <code>live.property_values</code>.
     */
    public static final PropertyValues PROPERTY_VALUES = PropertyValues.PROPERTY_VALUES;

    /**
     * The table <code>live.questionnaire</code>.
     */
    public static final Questionnaire QUESTIONNAIRE = Questionnaire.QUESTIONNAIRE;

    /**
     * The table <code>live.questionnaire_alert</code>.
     */
    public static final QuestionnaireAlert QUESTIONNAIRE_ALERT = QuestionnaireAlert.QUESTIONNAIRE_ALERT;

    /**
     * Reference table between questionnaire (exasol) and crypt_keys
     * (cassandra).
     */
    public static final QuestionnaireCrypt QUESTIONNAIRE_CRYPT = QuestionnaireCrypt.QUESTIONNAIRE_CRYPT;

    /**
     * The table <code>live.questionnaire_element</code>.
     */
    public static final QuestionnaireElement QUESTIONNAIRE_ELEMENT = QuestionnaireElement.QUESTIONNAIRE_ELEMENT;

    /**
     * The table <code>live.questionnaire_has_export</code>.
     */
    public static final QuestionnaireHasExport QUESTIONNAIRE_HAS_EXPORT = QuestionnaireHasExport.QUESTIONNAIRE_HAS_EXPORT;

    /**
     * Reference table between a questionnaire element (1) and his files (n).
     * For each file a document is referenced (content inside cassandra).
     */
    public static final QuestionnaireHasFile QUESTIONNAIRE_HAS_FILE = QuestionnaireHasFile.QUESTIONNAIRE_HAS_FILE;

    /**
     * Table to store the possible layouts for a site.
     */
    public static final QuestionnaireLayout QUESTIONNAIRE_LAYOUT = QuestionnaireLayout.QUESTIONNAIRE_LAYOUT;

    /**
     * The table <code>live.questionnaire_type</code>.
     */
    public static final QuestionnaireType QUESTIONNAIRE_TYPE = QuestionnaireType.QUESTIONNAIRE_TYPE;

    /**
     * The table <code>live.raster</code>.
     */
    public static final Raster RASTER = Raster.RASTER;

    /**
     * The table <code>live.ratio</code>.
     */
    public static final Ratio RATIO = Ratio.RATIO;

    /**
     * The table <code>live.ratio_type</code>.
     */
    public static final RatioType RATIO_TYPE = RatioType.RATIO_TYPE;

    /**
     * The table contains regular expression parts to identify bots by his
     * useragent.
     */
    public static final ResourceExcludeBot RESOURCE_EXCLUDE_BOT = ResourceExcludeBot.RESOURCE_EXCLUDE_BOT;

    /**
     * The table contains host/domains which must not be processed  by the
     * mpathy-asset-store-serivce.
     */
    public static final ResourceExcludeHost RESOURCE_EXCLUDE_HOST = ResourceExcludeHost.RESOURCE_EXCLUDE_HOST;

    /**
     * The table contains keywords which must not be processed by the
     * mpathy-asset-store-serivce.
     */
    public static final ResourceExcludeKeyword RESOURCE_EXCLUDE_KEYWORD = ResourceExcludeKeyword.RESOURCE_EXCLUDE_KEYWORD;

    /**
     * Reference table between "resource" and "resource" parent.
     */
    public static final ResourceHasParent RESOURCE_HAS_PARENT = ResourceHasParent.RESOURCE_HAS_PARENT;

    /**
     * The table contains protocols which supported by the
     * mpathy-asset-store-serivce.
     */
    public static final ResourceIncludeProtocol RESOURCE_INCLUDE_PROTOCOL = ResourceIncludeProtocol.RESOURCE_INCLUDE_PROTOCOL;

    /**
     * Contains all currently stored CSS files.
     */
    public static final ResourceOld RESOURCE_OLD = ResourceOld.RESOURCE_OLD;

    /**
     * The table <code>live.resource_reimport</code>.
     */
    public static final ResourceReimport RESOURCE_REIMPORT = ResourceReimport.RESOURCE_REIMPORT;

    /**
     * Contains all CSS files that have to be downloaded.
     */
    public static final ResourceRule RESOURCE_RULE = ResourceRule.RESOURCE_RULE;

    /**
     * The table <code>live.saf_has_segments</code>.
     */
    public static final SafHasSegments SAF_HAS_SEGMENTS = SafHasSegments.SAF_HAS_SEGMENTS;

    /**
     * The table <code>live.saf_segment_has_page</code>.
     */
    public static final SafSegmentHasPage SAF_SEGMENT_HAS_PAGE = SafSegmentHasPage.SAF_SEGMENT_HAS_PAGE;

    /**
     * The table <code>live.schema_info</code>.
     */
    public static final SchemaInfo SCHEMA_INFO = SchemaInfo.SCHEMA_INFO;

    /**
     * The table <code>live.scrollingmap</code>.
     */
    public static final Scrollingmap SCROLLINGMAP = Scrollingmap.SCROLLINGMAP;

    /**
     * The table <code>live.server</code>.
     */
    public static final Server SERVER = Server.SERVER;

    /**
     * The table <code>live.session</code>.
     */
    public static final Session SESSION = Session.SESSION;

    /**
     * The table <code>live.session_has_metadata</code>.
     */
    public static final SessionHasMetadata SESSION_HAS_METADATA = SessionHasMetadata.SESSION_HAS_METADATA;

    /**
     * The table contains the reference between a session and his mobile device
     * information.
     */
    public static final SessionHasMobileDevice SESSION_HAS_MOBILE_DEVICE = SessionHasMobileDevice.SESSION_HAS_MOBILE_DEVICE;

    /**
     * The table <code>live.session_has_pagename</code>.
     */
    public static final SessionHasPagename SESSION_HAS_PAGENAME = SessionHasPagename.SESSION_HAS_PAGENAME;

    /**
     * Reference table between "session" and "resource". Contains information
     * for resource usage
     */
    public static final SessionHasResource SESSION_HAS_RESOURCE = SessionHasResource.SESSION_HAS_RESOURCE;

    /**
     * The table <code>live.session_reimport</code>.
     */
    public static final SessionReimport SESSION_REIMPORT = SessionReimport.SESSION_REIMPORT;

    /**
     * The table <code>live.session_selection</code>.
     */
    public static final SessionSelection SESSION_SELECTION = SessionSelection.SESSION_SELECTION;

    /**
     * The table <code>live.sessionstats24h</code>.
     */
    public static final Sessionstats24h SESSIONSTATS24H = Sessionstats24h.SESSIONSTATS24H;

    /**
     * General settings table to define key/value pairs at user, site or
     * user/site level.
     */
    public static final Settings SETTINGS = Settings.SETTINGS;

    /**
     * The table <code>live.site</code>.
     */
    public static final Site SITE = Site.SITE;

    /**
     * The table <code>live.site_api_files</code>.
     */
    public static final SiteApiFiles SITE_API_FILES = SiteApiFiles.SITE_API_FILES;

    /**
     * The table <code>live.site_has_vendor</code>.
     */
    public static final SiteHasVendor SITE_HAS_VENDOR = SiteHasVendor.SITE_HAS_VENDOR;

    /**
     * The table <code>live.sitestats</code>.
     */
    public static final Sitestats SITESTATS = Sitestats.SITESTATS;

    /**
     * This table contains all json references for the "video_page_stats" table
     * on stage level.
     */
    public static final StageJsonPair STAGE_JSON_PAIR = StageJsonPair.STAGE_JSON_PAIR;

    /**
     * Indicator definition: An element is clicked and does not cause any
     * reaction within the time window.
     */
    public static final StruggleIndicatorDeadClickCount STRUGGLE_INDICATOR_DEAD_CLICK_COUNT = StruggleIndicatorDeadClickCount.STRUGGLE_INDICATOR_DEAD_CLICK_COUNT;

    /**
     * Indicator definition: Domload Time is calculated via the browser's
     * performance API and sent with the new domLoaded event (ID: 52). If the
     * browser is for some reason incompatible with API, duration will be NULL.
     */
    public static final StruggleIndicatorDomloadTime STRUGGLE_INDICATOR_DOMLOAD_TIME = StruggleIndicatorDomloadTime.STRUGGLE_INDICATOR_DOMLOAD_TIME;

    /**
     * Indicator definition: The amount of error properties set for a page view
     * succeeded the threshold defined in the struggle settings.
     */
    public static final StruggleIndicatorErrorMessageCount STRUGGLE_INDICATOR_ERROR_MESSAGE_COUNT = StruggleIndicatorErrorMessageCount.STRUGGLE_INDICATOR_ERROR_MESSAGE_COUNT;

    /**
     * Indicator definition: The page view is defined as an error page in the
     * struggle settings.
     */
    public static final StruggleIndicatorErrorPage STRUGGLE_INDICATOR_ERROR_PAGE = StruggleIndicatorErrorPage.STRUGGLE_INDICATOR_ERROR_PAGE;

    /**
     * Indicator definition: A user has entered at least the minimum amount of
     * characters defined within the settings into a funnel form field, but did
     * not submit the form.
     */
    public static final StruggleIndicatorFormFieldAbandonment STRUGGLE_INDICATOR_FORM_FIELD_ABANDONMENT = StruggleIndicatorFormFieldAbandonment.STRUGGLE_INDICATOR_FORM_FIELD_ABANDONMENT;

    /**
     * Indicator definition: Repeated interactions (focus) and edits (i.e.
     * content changes, min. 1 char or status changes) in the same form field
     * during a page view.
     */
    public static final StruggleIndicatorFormFieldModificationCount STRUGGLE_INDICATOR_FORM_FIELD_MODIFICATION_COUNT = StruggleIndicatorFormFieldModificationCount.STRUGGLE_INDICATOR_FORM_FIELD_MODIFICATION_COUNT;

    /**
     * Indicator definition: Event is triggered when a user visits a page that
     * is part of a funnel more often than defined in the struggle settings.
     */
    public static final StruggleIndicatorFunnelStepRepetition STRUGGLE_INDICATOR_FUNNEL_STEP_REPETITION = StruggleIndicatorFunnelStepRepetition.STRUGGLE_INDICATOR_FUNNEL_STEP_REPETITION;

    /**
     * Indicator definition: The accumulated amount of JavaScript errors on a
     * page view.
     */
    public static final StruggleIndicatorJsErrorCount STRUGGLE_INDICATOR_JS_ERROR_COUNT = StruggleIndicatorJsErrorCount.STRUGGLE_INDICATOR_JS_ERROR_COUNT;

    /**
     * Indicator definition: Average time of the time between the character
     * inputs from a customer into a field.
     */
    public static final StruggleIndicatorLongInputTime STRUGGLE_INDICATOR_LONG_INPUT_TIME = StruggleIndicatorLongInputTime.STRUGGLE_INDICATOR_LONG_INPUT_TIME;

    /**
     * Indicator definition: High frequency of clicks within time window on the
     * in a specified radius (e.g. 25px) around this first click
     */
    public static final StruggleIndicatorRageClickCount STRUGGLE_INDICATOR_RAGE_CLICK_COUNT = StruggleIndicatorRageClickCount.STRUGGLE_INDICATOR_RAGE_CLICK_COUNT;

    /**
     * Indicator definition: The customer is experiencing struggle as he shows
     * high scroll activity in the form of many direction changes.
     */
    public static final StruggleIndicatorScrollDirectionChangeCount STRUGGLE_INDICATOR_SCROLL_DIRECTION_CHANGE_COUNT = StruggleIndicatorScrollDirectionChangeCount.STRUGGLE_INDICATOR_SCROLL_DIRECTION_CHANGE_COUNT;

    /**
     * Holds the calculated struggle score for a specific page ID and its
     * references to relevant tables.
     */
    public static final StruggleScorePage STRUGGLE_SCORE_PAGE = StruggleScorePage.STRUGGLE_SCORE_PAGE;

    /**
     * Holds the calculated struggle score for a specific session ID and its
     * references to relevant tables.
     */
    public static final StruggleScoreSession STRUGGLE_SCORE_SESSION = StruggleScoreSession.STRUGGLE_SCORE_SESSION;

    /**
     * The table <code>live.tag</code>.
     */
    public static final Tag TAG = Tag.TAG;

    /**
     * The table <code>live.task</code>.
     */
    public static final Task TASK = Task.TASK;

    /**
     * The table <code>live.task_action</code>.
     */
    public static final TaskAction TASK_ACTION = TaskAction.TASK_ACTION;

    /**
     * The table <code>live.task_has_ratio</code>.
     */
    public static final TaskHasRatio TASK_HAS_RATIO = TaskHasRatio.TASK_HAS_RATIO;

    /**
     * The table <code>live.task_item</code>.
     */
    public static final TaskItem TASK_ITEM = TaskItem.TASK_ITEM;

    /**
     * The table <code>live.task_item_action</code>.
     */
    public static final TaskItemAction TASK_ITEM_ACTION = TaskItemAction.TASK_ITEM_ACTION;

    /**
     * The table <code>live.taskitem_has_page</code>.
     */
    public static final TaskitemHasPage TASKITEM_HAS_PAGE = TaskitemHasPage.TASKITEM_HAS_PAGE;

    /**
     * Reference table between "task_item" and "page_name" to define the form
     * step condition.
     */
    public static final TaskitemHasPagename TASKITEM_HAS_PAGENAME = TaskitemHasPagename.TASKITEM_HAS_PAGENAME;

    /**
     * The table <code>live.TEST_DV_2020_07_24</code>.
     */
    public static final TestDv_2020_07_24 TEST_DV_2020_07_24 = TestDv_2020_07_24.TEST_DV_2020_07_24;

    /**
     * The table <code>live.tmp_0</code>.
     */
    public static final Tmp_0 TMP_0 = Tmp_0.TMP_0;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_20010141</code>.
     */
    public static final TmpForDebugDeleteSessions_20010141 TMP_FOR_DEBUG_DELETE_SESSIONS_20010141 = TmpForDebugDeleteSessions_20010141.TMP_FOR_DEBUG_DELETE_SESSIONS_20010141;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_20013229</code>.
     */
    public static final TmpForDebugDeleteSessions_20013229 TMP_FOR_DEBUG_DELETE_SESSIONS_20013229 = TmpForDebugDeleteSessions_20013229.TMP_FOR_DEBUG_DELETE_SESSIONS_20013229;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_20014116</code>.
     */
    public static final TmpForDebugDeleteSessions_20014116 TMP_FOR_DEBUG_DELETE_SESSIONS_20014116 = TmpForDebugDeleteSessions_20014116.TMP_FOR_DEBUG_DELETE_SESSIONS_20014116;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_20014677</code>.
     */
    public static final TmpForDebugDeleteSessions_20014677 TMP_FOR_DEBUG_DELETE_SESSIONS_20014677 = TmpForDebugDeleteSessions_20014677.TMP_FOR_DEBUG_DELETE_SESSIONS_20014677;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_2001621</code>.
     */
    public static final TmpForDebugDeleteSessions_2001621 TMP_FOR_DEBUG_DELETE_SESSIONS_2001621 = TmpForDebugDeleteSessions_2001621.TMP_FOR_DEBUG_DELETE_SESSIONS_2001621;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_2001646</code>.
     */
    public static final TmpForDebugDeleteSessions_2001646 TMP_FOR_DEBUG_DELETE_SESSIONS_2001646 = TmpForDebugDeleteSessions_2001646.TMP_FOR_DEBUG_DELETE_SESSIONS_2001646;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_20017851</code>.
     */
    public static final TmpForDebugDeleteSessions_20017851 TMP_FOR_DEBUG_DELETE_SESSIONS_20017851 = TmpForDebugDeleteSessions_20017851.TMP_FOR_DEBUG_DELETE_SESSIONS_20017851;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_20018558</code>.
     */
    public static final TmpForDebugDeleteSessions_20018558 TMP_FOR_DEBUG_DELETE_SESSIONS_20018558 = TmpForDebugDeleteSessions_20018558.TMP_FOR_DEBUG_DELETE_SESSIONS_20018558;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_20018769</code>.
     */
    public static final TmpForDebugDeleteSessions_20018769 TMP_FOR_DEBUG_DELETE_SESSIONS_20018769 = TmpForDebugDeleteSessions_20018769.TMP_FOR_DEBUG_DELETE_SESSIONS_20018769;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_20019106</code>.
     */
    public static final TmpForDebugDeleteSessions_20019106 TMP_FOR_DEBUG_DELETE_SESSIONS_20019106 = TmpForDebugDeleteSessions_20019106.TMP_FOR_DEBUG_DELETE_SESSIONS_20019106;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_200343</code>.
     */
    public static final TmpForDebugDeleteSessions_200343 TMP_FOR_DEBUG_DELETE_SESSIONS_200343 = TmpForDebugDeleteSessions_200343.TMP_FOR_DEBUG_DELETE_SESSIONS_200343;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_2005866</code>.
     */
    public static final TmpForDebugDeleteSessions_2005866 TMP_FOR_DEBUG_DELETE_SESSIONS_2005866 = TmpForDebugDeleteSessions_2005866.TMP_FOR_DEBUG_DELETE_SESSIONS_2005866;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_2005981</code>.
     */
    public static final TmpForDebugDeleteSessions_2005981 TMP_FOR_DEBUG_DELETE_SESSIONS_2005981 = TmpForDebugDeleteSessions_2005981.TMP_FOR_DEBUG_DELETE_SESSIONS_2005981;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_2006763</code>.
     */
    public static final TmpForDebugDeleteSessions_2006763 TMP_FOR_DEBUG_DELETE_SESSIONS_2006763 = TmpForDebugDeleteSessions_2006763.TMP_FOR_DEBUG_DELETE_SESSIONS_2006763;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_2007834</code>.
     */
    public static final TmpForDebugDeleteSessions_2007834 TMP_FOR_DEBUG_DELETE_SESSIONS_2007834 = TmpForDebugDeleteSessions_2007834.TMP_FOR_DEBUG_DELETE_SESSIONS_2007834;

    /**
     * The table <code>live.tmp_for_debug_delete_sessions_2009120</code>.
     */
    public static final TmpForDebugDeleteSessions_2009120 TMP_FOR_DEBUG_DELETE_SESSIONS_2009120 = TmpForDebugDeleteSessions_2009120.TMP_FOR_DEBUG_DELETE_SESSIONS_2009120;

    /**
     * The table <code>live.tmp_selection_266184216</code>.
     */
    public static final TmpSelection_266184216 TMP_SELECTION_266184216 = TmpSelection_266184216.TMP_SELECTION_266184216;

    /**
     * The table <code>live.tmp_selection_63943770</code>.
     */
    public static final TmpSelection_63943770 TMP_SELECTION_63943770 = TmpSelection_63943770.TMP_SELECTION_63943770;

    /**
     * Holds information about the tracking config revisions that exist for a
     * site.
     */
    public static final TrackingConfig TRACKING_CONFIG = TrackingConfig.TRACKING_CONFIG;

    /**
     * The table <code>live.tracking_setup</code>.
     */
    public static final TrackingSetup TRACKING_SETUP = TrackingSetup.TRACKING_SETUP;

    /**
     * The table <code>live.trafficstats</code>.
     */
    public static final Trafficstats TRAFFICSTATS = Trafficstats.TRAFFICSTATS;

    /**
     * The table <code>live.trafficstats31d</code>.
     */
    public static final Trafficstats31d TRAFFICSTATS31D = Trafficstats31d.TRAFFICSTATS31D;

    /**
     * Holds info about pages for a site that are not mapped to a tracking
     * config page name yet.
     */
    public static final UnmappedPage UNMAPPED_PAGE = UnmappedPage.UNMAPPED_PAGE;

    /**
     * The table <code>live.url</code>.
     */
    public static final Url URL = Url.URL;

    /**
     * The table <code>live.user</code>.
     */
    public static final User USER = User.USER;

    /**
     * The table <code>live.user_has_privilege</code>.
     */
    public static final UserHasPrivilege USER_HAS_PRIVILEGE = UserHasPrivilege.USER_HAS_PRIVILEGE;

    /**
     * The table <code>live.user_has_saf</code>.
     */
    public static final UserHasSaf USER_HAS_SAF = UserHasSaf.USER_HAS_SAF;

    /**
     * The table <code>live.user_has_site</code>.
     */
    public static final UserHasSite USER_HAS_SITE = UserHasSite.USER_HAS_SITE;

    /**
     * The table <code>live.user_viewed_dashboard</code>.
     */
    public static final UserViewedDashboard USER_VIEWED_DASHBOARD = UserViewedDashboard.USER_VIEWED_DASHBOARD;

    /**
     * The table <code>live.useragent</code>.
     */
    public static final Useragent USERAGENT = Useragent.USERAGENT;

    /**
     * The table <code>live.useragents2</code>.
     */
    public static final Useragents2 USERAGENTS2 = Useragents2.USERAGENTS2;

    /**
     * The table <code>live.useragents3</code>.
     */
    public static final Useragents3 USERAGENTS3 = Useragents3.USERAGENTS3;

    /**
     * The table <code>live.vendor</code>.
     */
    public static final Vendor VENDOR = Vendor.VENDOR;

    /**
     * video export list and job queue
     */
    public static final Video VIDEO = Video.VIDEO;

    /**
     * This table holds debugging/logging information for recordings generated
     * by the native mobile SDK.
     */
    public static final VideoPageStats VIDEO_PAGE_STATS = VideoPageStats.VIDEO_PAGE_STATS;

    /**
     * The table <code>live.visitor</code>.
     */
    public static final Visitor VISITOR = Visitor.VISITOR;
}
