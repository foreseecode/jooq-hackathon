/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.SessionHasMetadataRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionHasMetadata extends TableImpl<SessionHasMetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.session_has_metadata</code>
     */
    public static final SessionHasMetadata SESSION_HAS_METADATA = new SessionHasMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionHasMetadataRecord> getRecordType() {
        return SessionHasMetadataRecord.class;
    }

    /**
     * The column
     * <code>live_core.session_has_metadata.idsession_has_metadata</code>.
     */
    public final TableField<SessionHasMetadataRecord, Long> IDSESSION_HAS_METADATA = createField(DSL.name("idsession_has_metadata"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.session_has_metadata.idsession</code>.
     */
    public final TableField<SessionHasMetadataRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.session_has_metadata.idmetadata</code>.
     */
    public final TableField<SessionHasMetadataRecord, Long> IDMETADATA = createField(DSL.name("idmetadata"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live_core.session_has_metadata.iduser</code>.
     */
    public final TableField<SessionHasMetadataRecord, BigDecimal> IDUSER = createField(DSL.name("iduser"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.session_has_metadata.evcounter</code>.
     */
    public final TableField<SessionHasMetadataRecord, Long> EVCOUNTER = createField(DSL.name("evcounter"), SQLDataType.BIGINT, this, "");

    private SessionHasMetadata(Name alias, Table<SessionHasMetadataRecord> aliased) {
        this(alias, aliased, null);
    }

    private SessionHasMetadata(Name alias, Table<SessionHasMetadataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"session_has_metadata\" as  SELECT session_has_metadata.idsession_has_metadata,\n    session_has_metadata.idsession,\n    session_has_metadata.idmetadata,\n    session_has_metadata.iduser,\n    session_has_metadata.evcounter\n   FROM live.session_has_metadata;"));
    }

    /**
     * Create an aliased <code>live_core.session_has_metadata</code> table
     * reference
     */
    public SessionHasMetadata(String alias) {
        this(DSL.name(alias), SESSION_HAS_METADATA);
    }

    /**
     * Create an aliased <code>live_core.session_has_metadata</code> table
     * reference
     */
    public SessionHasMetadata(Name alias) {
        this(alias, SESSION_HAS_METADATA);
    }

    /**
     * Create a <code>live_core.session_has_metadata</code> table reference
     */
    public SessionHasMetadata() {
        this(DSL.name("session_has_metadata"), null);
    }

    public <O extends Record> SessionHasMetadata(Table<O> child, ForeignKey<O, SessionHasMetadataRecord> key) {
        super(child, key, SESSION_HAS_METADATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public SessionHasMetadata as(String alias) {
        return new SessionHasMetadata(DSL.name(alias), this);
    }

    @Override
    public SessionHasMetadata as(Name alias) {
        return new SessionHasMetadata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionHasMetadata rename(String name) {
        return new SessionHasMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionHasMetadata rename(Name name) {
        return new SessionHasMetadata(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, BigDecimal, Long, BigDecimal, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
