/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live.tables;


import com.verint.mpathy.db.live.Live;
import com.verint.mpathy.db.live.tables.records.PageStatsRecord;

import java.math.BigDecimal;
import java.time.LocalTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageStats extends TableImpl<PageStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live.page_stats</code>
     */
    public static final PageStats PAGE_STATS = new PageStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageStatsRecord> getRecordType() {
        return PageStatsRecord.class;
    }

    /**
     * The column <code>live.page_stats.idpage</code>.
     */
    public final TableField<PageStatsRecord, BigDecimal> IDPAGE = createField(DSL.name("idpage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.page_stats.idsession</code>.
     */
    public final TableField<PageStatsRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.page_stats.idsite</code>.
     */
    public final TableField<PageStatsRecord, Long> IDSITE = createField(DSL.name("idsite"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>live.page_stats.pagename</code>.
     */
    public final TableField<PageStatsRecord, String> PAGENAME = createField(DSL.name("pagename"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.page_stats.url</code>.
     */
    public final TableField<PageStatsRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.page_stats.date</code>.
     */
    public final TableField<PageStatsRecord, LocalTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>live.page_stats.type</code>.
     */
    public final TableField<PageStatsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.page_stats.msg</code>.
     */
    public final TableField<PageStatsRecord, String> MSG = createField(DSL.name("msg"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.page_stats.script_url</code>.
     */
    public final TableField<PageStatsRecord, String> SCRIPT_URL = createField(DSL.name("script_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.page_stats.ua_string</code>.
     */
    public final TableField<PageStatsRecord, String> UA_STRING = createField(DSL.name("ua_string"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>live.page_stats.idvisitor</code>.
     */
    public final TableField<PageStatsRecord, BigDecimal> IDVISITOR = createField(DSL.name("idvisitor"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live.page_stats.has_valid_scaffold</code>.
     */
    public final TableField<PageStatsRecord, Boolean> HAS_VALID_SCAFFOLD = createField(DSL.name("has_valid_scaffold"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>live.page_stats.script_versions</code>. Script version
     * of loader, engine, customcode and polls-engine.
     */
    public final TableField<PageStatsRecord, String> SCRIPT_VERSIONS = createField(DSL.name("script_versions"), SQLDataType.CLOB, this, "Script version of loader, engine, customcode and polls-engine.");

    /**
     * The column <code>live.page_stats.error_code</code>.
     */
    public final TableField<PageStatsRecord, Short> ERROR_CODE = createField(DSL.name("error_code"), SQLDataType.SMALLINT, this, "");

    private PageStats(Name alias, Table<PageStatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageStats(Name alias, Table<PageStatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>live.page_stats</code> table reference
     */
    public PageStats(String alias) {
        this(DSL.name(alias), PAGE_STATS);
    }

    /**
     * Create an aliased <code>live.page_stats</code> table reference
     */
    public PageStats(Name alias) {
        this(alias, PAGE_STATS);
    }

    /**
     * Create a <code>live.page_stats</code> table reference
     */
    public PageStats() {
        this(DSL.name("page_stats"), null);
    }

    public <O extends Record> PageStats(Table<O> child, ForeignKey<O, PageStatsRecord> key) {
        super(child, key, PAGE_STATS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Live.LIVE;
    }

    @Override
    public PageStats as(String alias) {
        return new PageStats(DSL.name(alias), this);
    }

    @Override
    public PageStats as(Name alias) {
        return new PageStats(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageStats rename(String name) {
        return new PageStats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageStats rename(Name name) {
        return new PageStats(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<BigDecimal, BigDecimal, Long, String, String, LocalTime, String, String, String, String, BigDecimal, Boolean, String, Short> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
