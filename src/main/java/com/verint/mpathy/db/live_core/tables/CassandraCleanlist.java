/*
 * This file is generated by jOOQ.
 */
package com.verint.mpathy.db.live_core.tables;


import com.verint.mpathy.db.live_core.LiveCore;
import com.verint.mpathy.db.live_core.tables.records.CassandraCleanlistRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Easy access to underlying table in other schemas.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CassandraCleanlist extends TableImpl<CassandraCleanlistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>live_core.cassandra_cleanlist</code>
     */
    public static final CassandraCleanlist CASSANDRA_CLEANLIST = new CassandraCleanlist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CassandraCleanlistRecord> getRecordType() {
        return CassandraCleanlistRecord.class;
    }

    /**
     * The column <code>live_core.cassandra_cleanlist.idsession</code>.
     */
    public final TableField<CassandraCleanlistRecord, BigDecimal> IDSESSION = createField(DSL.name("idsession"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>live_core.cassandra_cleanlist.idsite</code>.
     */
    public final TableField<CassandraCleanlistRecord, Integer> IDSITE = createField(DSL.name("idsite"), SQLDataType.INTEGER, this, "");

    private CassandraCleanlist(Name alias, Table<CassandraCleanlistRecord> aliased) {
        this(alias, aliased, null);
    }

    private CassandraCleanlist(Name alias, Table<CassandraCleanlistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Easy access to underlying table in other schemas."), TableOptions.view("create view \"cassandra_cleanlist\" as  SELECT cassandra_cleanlist.idsession,\n    cassandra_cleanlist.idsite\n   FROM live.cassandra_cleanlist;"));
    }

    /**
     * Create an aliased <code>live_core.cassandra_cleanlist</code> table
     * reference
     */
    public CassandraCleanlist(String alias) {
        this(DSL.name(alias), CASSANDRA_CLEANLIST);
    }

    /**
     * Create an aliased <code>live_core.cassandra_cleanlist</code> table
     * reference
     */
    public CassandraCleanlist(Name alias) {
        this(alias, CASSANDRA_CLEANLIST);
    }

    /**
     * Create a <code>live_core.cassandra_cleanlist</code> table reference
     */
    public CassandraCleanlist() {
        this(DSL.name("cassandra_cleanlist"), null);
    }

    public <O extends Record> CassandraCleanlist(Table<O> child, ForeignKey<O, CassandraCleanlistRecord> key) {
        super(child, key, CASSANDRA_CLEANLIST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LiveCore.LIVE_CORE;
    }

    @Override
    public CassandraCleanlist as(String alias) {
        return new CassandraCleanlist(DSL.name(alias), this);
    }

    @Override
    public CassandraCleanlist as(Name alias) {
        return new CassandraCleanlist(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CassandraCleanlist rename(String name) {
        return new CassandraCleanlist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CassandraCleanlist rename(Name name) {
        return new CassandraCleanlist(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<BigDecimal, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
